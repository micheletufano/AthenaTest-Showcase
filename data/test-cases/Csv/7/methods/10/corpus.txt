CSVParser implements Iterable<CSVRecord>, Closeable { public Iterator<CSVRecord> iterator() { return new Iterator<CSVRecord>() { private CSVRecord current; private CSVRecord getNextRecord() { try { return CSVParser.this.nextRecord(); } catch (final IOException e) { throw new RuntimeException(e); } } public boolean hasNext() { if (CSVParser.this.isClosed()) { return false; } if (this.current == null) { this.current = this.getNextRecord(); } return this.current != null; } public CSVRecord next() { if (CSVParser.this.isClosed()) { throw new NoSuchElementException("CSVParser has been closed"); } CSVRecord next = this.current; this.current = null; if (next == null) { next = this.getNextRecord(); if (next == null) { throw new NoSuchElementException("No more CSV records available"); } } return next; } public void remove() { throw new UnsupportedOperationException(); } }; } CSVParser(final Reader reader, final CSVFormat format); static CSVParser parse(final File file, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); void close(); long getCurrentLineNumber(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); T getRecords(T records); boolean isClosed(); Iterator<CSVRecord> iterator(); }