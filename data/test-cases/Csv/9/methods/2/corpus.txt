CSVRecord implements Serializable, Iterable<String> { public String get(final String name) { if (mapping == null) { throw new IllegalStateException( "No header mapping was specified, the record values can't be accessed by name"); } final Integer index = mapping.get(name); if (index == null) { throw new IllegalArgumentException(String.format("Mapping for %s not found, expected one of %s", name, mapping.keySet())); } try { return values[index.intValue()]; } catch (final ArrayIndexOutOfBoundsException e) { throw new IllegalArgumentException(String.format( "Index for header '%s' is %d but CSVRecord only has %d values!", name, index, Integer.valueOf(values.length))); } } CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, final long recordNumber); String get(final Enum<?> e); String get(final int i); String get(final String name); String getComment(); long getRecordNumber(); boolean isConsistent(); boolean isMapped(final String name); boolean isSet(final String name); Iterator<String> iterator(); int size(); Map<String, String> toMap(); @Override String toString(); }