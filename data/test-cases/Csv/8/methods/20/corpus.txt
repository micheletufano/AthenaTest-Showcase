CSVFormat implements Serializable { @Override public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(recordSeparator != null) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (getIgnoreEmptyLines()) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { sb.append(" SurroundingSpaces:ignored"); } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (header != null) { sb.append(' '); sb.append("Header:").append(Arrays.toString(header)); } return sb.toString(); } private CSVFormat(final char delimiter, final Character quoteChar, final Quote quotePolicy, final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces, final boolean ignoreEmptyLines, final String recordSeparator, final String nullString, final String[] header, final boolean skipHeaderRecord); static CSVFormat newFormat(final char delimiter); @Override boolean equals(final Object obj); String format(final Object... values); Character getCommentStart(); char getDelimiter(); Character getEscape(); String[] getHeader(); boolean getIgnoreEmptyLines(); boolean getIgnoreSurroundingSpaces(); String getNullString(); Character getQuoteChar(); Quote getQuotePolicy(); String getRecordSeparator(); boolean getSkipHeaderRecord(); @Override int hashCode(); boolean isCommentingEnabled(); boolean isEscaping(); boolean isNullHandling(); boolean isQuoting(); CSVParser parse(final Reader in); @Override String toString(); CSVFormat withCommentStart(final char commentStart); CSVFormat withCommentStart(final Character commentStart); CSVFormat withDelimiter(final char delimiter); CSVFormat withEscape(final char escape); CSVFormat withEscape(final Character escape); CSVFormat withHeader(final String... header); CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines); CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces); CSVFormat withNullString(final String nullString); CSVFormat withQuoteChar(final char quoteChar); CSVFormat withQuoteChar(final Character quoteChar); CSVFormat withQuotePolicy(final Quote quotePolicy); CSVFormat withRecordSeparator(final char recordSeparator); CSVFormat withRecordSeparator(final String recordSeparator); CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord); static final CSVFormat DEFAULT; static final CSVFormat RFC4180; static final CSVFormat EXCEL; static final CSVFormat TDF; static final CSVFormat MYSQL; }