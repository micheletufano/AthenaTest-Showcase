CSVFormat implements Serializable { public Character getEscapeCharacter() { return escapeCharacter; } private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode, final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces, final boolean ignoreEmptyLines, final String recordSeparator, final String nullString, final Object[] headerComments, final String[] header, final boolean skipHeaderRecord, final boolean allowMissingColumnNames, final boolean ignoreHeaderCase, final boolean trim, final boolean trailingDelimiter); static CSVFormat newFormat(final char delimiter); static CSVFormat valueOf(final String format); @Override boolean equals(final Object obj); String format(final Object... values); boolean getAllowMissingColumnNames(); Character getCommentMarker(); char getDelimiter(); Character getEscapeCharacter(); String[] getHeader(); String[] getHeaderComments(); boolean getIgnoreEmptyLines(); boolean getIgnoreHeaderCase(); boolean getIgnoreSurroundingSpaces(); String getNullString(); Character getQuoteCharacter(); QuoteMode getQuoteMode(); String getRecordSeparator(); boolean getSkipHeaderRecord(); boolean getTrailingDelimiter(); boolean getTrim(); @Override int hashCode(); boolean isCommentMarkerSet(); boolean isEscapeCharacterSet(); boolean isNullStringSet(); boolean isQuoteCharacterSet(); CSVParser parse(final Reader in); CSVPrinter print(final Appendable out); @SuppressWarnings("resource") CSVPrinter print(final File out, Charset charset); CSVPrinter print(final Path out, Charset charset); void print(final Object value, final Appendable out, final boolean newRecord); void println(final Appendable out); void printRecord(final Appendable out, final Object... values); @Override String toString(); CSVFormat withAllowMissingColumnNames(); CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames); CSVFormat withCommentMarker(final char commentMarker); CSVFormat withCommentMarker(final Character commentMarker); CSVFormat withDelimiter(final char delimiter); CSVFormat withEscape(final char escape); CSVFormat withEscape(final Character escape); CSVFormat withFirstRecordAsHeader(); CSVFormat withHeader(final Class<? extends Enum<?>> headerEnum); CSVFormat withHeader(final ResultSet resultSet); CSVFormat withHeader(final ResultSetMetaData metaData); CSVFormat withHeader(final String... header); CSVFormat withHeaderComments(final Object... headerComments); CSVFormat withIgnoreEmptyLines(); CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines); CSVFormat withIgnoreHeaderCase(); CSVFormat withIgnoreHeaderCase(final boolean ignoreHeaderCase); CSVFormat withIgnoreSurroundingSpaces(); CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces); CSVFormat withNullString(final String nullString); CSVFormat withQuote(final char quoteChar); CSVFormat withQuote(final Character quoteChar); CSVFormat withQuoteMode(final QuoteMode quoteModePolicy); CSVFormat withRecordSeparator(final char recordSeparator); CSVFormat withRecordSeparator(final String recordSeparator); CSVFormat withSkipHeaderRecord(); CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord); CSVFormat withTrailingDelimiter(); CSVFormat withTrailingDelimiter(final boolean trailingDelimiter); CSVFormat withTrim(); CSVFormat withTrim(final boolean trim); static final CSVFormat DEFAULT; static final CSVFormat EXCEL; static final CSVFormat INFORMIX_UNLOAD; static final CSVFormat INFORMIX_UNLOAD_CSV; static final CSVFormat MYSQL; static final CSVFormat RFC4180; static final CSVFormat TDF; }