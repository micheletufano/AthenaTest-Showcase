CSVParser implements Iterable<CSVRecord>, Closeable { public List<CSVRecord> getRecords() throws IOException { CSVRecord rec; final List<CSVRecord> records = new ArrayList<>(); while ((rec = this.nextRecord()) != null) { records.add(rec); } return records; } CSVParser(final Reader reader, final CSVFormat format); @SuppressWarnings("resource") CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber); @SuppressWarnings("resource") static CSVParser parse(final File file, final Charset charset, final CSVFormat format); @SuppressWarnings("resource") static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format); static CSVParser parse(final Path path, final Charset charset, final CSVFormat format); static CSVParser parse(final Reader reader, final CSVFormat format); static CSVParser parse(final String string, final CSVFormat format); static CSVParser parse(final URL url, final Charset charset, final CSVFormat format); @Override void close(); long getCurrentLineNumber(); String getFirstEndOfLine(); Map<String, Integer> getHeaderMap(); long getRecordNumber(); List<CSVRecord> getRecords(); boolean isClosed(); @Override Iterator<CSVRecord> iterator(); }