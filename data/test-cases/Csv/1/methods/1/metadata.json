{"identifier": "read", "parameters": "(char[] buf, int offset, int length)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int read(char[] buf, int offset, int length) throws IOException {\n        if (length == 0) {\n            return 0;\n        }\n        \n        int len = super.read(buf, offset, length);\n        \n        if (len > 0) {\n\n            for (int i = offset; i < offset + len; i++) {\n                char ch = buf[i];\n                if (ch == '\\n') {\n                    if ('\\r' != (i > 0 ? buf[i-1]: lastChar)) {\n                        lineCounter++;                        \n                    }\n                } else if (ch == '\\r') {\n                    lineCounter++;\n                }\n            }\n\n            lastChar = buf[offset + len - 1];\n\n        } else if (len == -1) {\n            lastChar = END_OF_STREAM;\n        }\n        \n        return len;\n    }", "class": "ExtendedBufferedReader", "signature": "int read(char[] buf, int offset, int length)", "full_signature": "@Override public int read(char[] buf, int offset, int length)", "class_method_signature": "ExtendedBufferedReader.read(char[] buf, int offset, int length)", "testcase": false, "constructor": false, "invocations": ["read"]}