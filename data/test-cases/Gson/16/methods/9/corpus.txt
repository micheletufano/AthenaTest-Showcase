Types { public static Type getCollectionElementType(Type context, Class<?> contextRawType) { Type collectionType = getSupertype(context, contextRawType, Collection.class); if (collectionType instanceof WildcardType) { collectionType = ((WildcardType)collectionType).getUpperBounds()[0]; } if (collectionType instanceof ParameterizedType) { return ((ParameterizedType) collectionType).getActualTypeArguments()[0]; } return Object.class; } static ParameterizedType newParameterizedTypeWithOwner( Type ownerType, Type rawType, Type... typeArguments); static GenericArrayType arrayOf(Type componentType); static WildcardType subtypeOf(Type bound); static WildcardType supertypeOf(Type bound); static Type canonicalize(Type type); static Class<?> getRawType(Type type); static boolean equals(Type a, Type b); static String typeToString(Type type); static Type getArrayComponentType(Type array); static Type getCollectionElementType(Type context, Class<?> contextRawType); static Type[] getMapKeyAndValueTypes(Type context, Class<?> contextRawType); static Type resolve(Type context, Class<?> contextRawType, Type toResolve); }