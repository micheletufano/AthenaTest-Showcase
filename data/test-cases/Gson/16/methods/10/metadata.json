{"identifier": "getMapKeyAndValueTypes", "parameters": "(Type context, Class<?> contextRawType)", "modifiers": "public static", "return": "Type[]", "body": "public static Type[] getMapKeyAndValueTypes(Type context, Class<?> contextRawType) {\n    /*\n     * Work around a problem with the declaration of java.util.Properties. That\n     * class should extend Hashtable<String, String>, but it's declared to\n     * extend Hashtable<Object, Object>.\n     */\n    if (context == Properties.class) {\n      return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!\n    }\n\n    Type mapType = getSupertype(context, contextRawType, Map.class);\n    // TODO: strip wildcards?\n    if (mapType instanceof ParameterizedType) {\n      ParameterizedType mapParameterizedType = (ParameterizedType) mapType;\n      return mapParameterizedType.getActualTypeArguments();\n    }\n    return new Type[] { Object.class, Object.class };\n  }", "class": "Types", "signature": "Type[] getMapKeyAndValueTypes(Type context, Class<?> contextRawType)", "full_signature": "public static Type[] getMapKeyAndValueTypes(Type context, Class<?> contextRawType)", "class_method_signature": "Types.getMapKeyAndValueTypes(Type context, Class<?> contextRawType)", "testcase": false, "constructor": false, "invocations": ["getSupertype", "getActualTypeArguments"]}