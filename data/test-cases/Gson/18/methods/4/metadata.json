{"identifier": "canonicalize", "parameters": "(Type type)", "modifiers": "public static", "return": "Type", "body": "public static Type canonicalize(Type type) {\n    if (type instanceof Class) {\n      Class<?> c = (Class<?>) type;\n      return c.isArray() ? new GenericArrayTypeImpl(canonicalize(c.getComponentType())) : c;\n\n    } else if (type instanceof ParameterizedType) {\n      ParameterizedType p = (ParameterizedType) type;\n      return new ParameterizedTypeImpl(p.getOwnerType(),\n          p.getRawType(), p.getActualTypeArguments());\n\n    } else if (type instanceof GenericArrayType) {\n      GenericArrayType g = (GenericArrayType) type;\n      return new GenericArrayTypeImpl(g.getGenericComponentType());\n\n    } else if (type instanceof WildcardType) {\n      WildcardType w = (WildcardType) type;\n      return new WildcardTypeImpl(w.getUpperBounds(), w.getLowerBounds());\n\n    } else {\n      // type is either serializable as-is or unsupported\n      return type;\n    }\n  }", "class": "Types", "signature": "Type canonicalize(Type type)", "full_signature": "public static Type canonicalize(Type type)", "class_method_signature": "Types.canonicalize(Type type)", "testcase": false, "constructor": false, "invocations": ["isArray", "canonicalize", "getComponentType", "getOwnerType", "getRawType", "getActualTypeArguments", "getGenericComponentType", "getUpperBounds", "getLowerBounds"]}