Types { public static WildcardType subtypeOf(Type bound) { Type[] upperBounds; if (bound instanceof WildcardType) { upperBounds = ((WildcardType) bound).getUpperBounds(); } else { upperBounds = new Type[] { bound }; } return new WildcardTypeImpl(upperBounds, EMPTY_TYPE_ARRAY); } static ParameterizedType newParameterizedTypeWithOwner( Type ownerType, Type rawType, Type... typeArguments); static GenericArrayType arrayOf(Type componentType); static WildcardType subtypeOf(Type bound); static WildcardType supertypeOf(Type bound); static Type canonicalize(Type type); static Class<?> getRawType(Type type); static boolean equals(Type a, Type b); static String typeToString(Type type); static Type getArrayComponentType(Type array); static Type getCollectionElementType(Type context, Class<?> contextRawType); static Type[] getMapKeyAndValueTypes(Type context, Class<?> contextRawType); static Type resolve(Type context, Class<?> contextRawType, Type toResolve); }