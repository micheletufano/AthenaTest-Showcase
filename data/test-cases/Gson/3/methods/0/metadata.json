{"identifier": "get", "parameters": "(TypeToken<T> typeToken)", "modifiers": "public", "return": "ObjectConstructor<T>", "body": "public <T> ObjectConstructor<T> get(TypeToken<T> typeToken) {\n    final Type type = typeToken.getType();\n    final Class<? super T> rawType = typeToken.getRawType();\n\n    // first try an instance creator\n\n    @SuppressWarnings(\"unchecked\") // types must agree\n    final InstanceCreator<T> typeCreator = (InstanceCreator<T>) instanceCreators.get(type);\n    if (typeCreator != null) {\n      return new ObjectConstructor<T>() {\n        @Override public T construct() {\n          return typeCreator.createInstance(type);\n        }\n      };\n    }\n\n    // Next try raw type match for instance creators\n    @SuppressWarnings(\"unchecked\") // types must agree\n    final InstanceCreator<T> rawTypeCreator =\n        (InstanceCreator<T>) instanceCreators.get(rawType);\n    if (rawTypeCreator != null) {\n      return new ObjectConstructor<T>() {\n        @Override public T construct() {\n          return rawTypeCreator.createInstance(type);\n        }\n      };\n    }\n\n    ObjectConstructor<T> defaultConstructor = newDefaultConstructor(rawType);\n    if (defaultConstructor != null) {\n      return defaultConstructor;\n    }\n\n    ObjectConstructor<T> defaultImplementation = newDefaultImplementationConstructor(type, rawType);\n    if (defaultImplementation != null) {\n      return defaultImplementation;\n    }\n\n    // finally try unsafe\n    return newUnsafeAllocator(type, rawType);\n  }", "class": "ConstructorConstructor", "signature": "ObjectConstructor<T> get(TypeToken<T> typeToken)", "full_signature": "public ObjectConstructor<T> get(TypeToken<T> typeToken)", "class_method_signature": "ConstructorConstructor.get(TypeToken<T> typeToken)", "testcase": false, "constructor": false, "invocations": ["getType", "getRawType", "get", "createInstance", "get", "createInstance", "newDefaultConstructor", "newDefaultImplementationConstructor", "newUnsafeAllocator"]}