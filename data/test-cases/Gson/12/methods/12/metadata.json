{"identifier": "nextInt", "parameters": "()", "modifiers": "@Override public", "return": "int", "body": "@Override public int nextInt() throws IOException {\n    JsonToken token = peek();\n    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n      throw new IllegalStateException(\n          \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n    }\n    int result = ((JsonPrimitive) peekStack()).getAsInt();\n    popStack();\n    if (stackSize > 0) {\n      pathIndices[stackSize - 1]++;\n    }\n    return result;\n  }", "class": "JsonTreeReader", "signature": "int nextInt()", "full_signature": "@Override public int nextInt()", "class_method_signature": "JsonTreeReader.nextInt()", "testcase": false, "constructor": false, "invocations": ["peek", "locationString", "getAsInt", "peekStack", "popStack"]}