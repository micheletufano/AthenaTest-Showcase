JsonTreeReader extends JsonReader { @Override public double nextDouble() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( "Expected " + JsonToken.NUMBER + " but was " + token + locationString()); } double result = ((JsonPrimitive) peekStack()).getAsDouble(); if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) { throw new NumberFormatException("JSON forbids NaN and infinities: " + result); } popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } JsonTreeReader(JsonElement element); @Override void beginArray(); @Override void endArray(); @Override void beginObject(); @Override void endObject(); @Override boolean hasNext(); @Override JsonToken peek(); @Override String nextName(); @Override String nextString(); @Override boolean nextBoolean(); @Override void nextNull(); @Override double nextDouble(); @Override long nextLong(); @Override int nextInt(); @Override void close(); @Override void skipValue(); @Override String toString(); void promoteNameToValue(); @Override String getPath(); }