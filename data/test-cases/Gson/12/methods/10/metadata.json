{"identifier": "nextDouble", "parameters": "()", "modifiers": "@Override public", "return": "double", "body": "@Override public double nextDouble() throws IOException {\n    JsonToken token = peek();\n    if (token != JsonToken.NUMBER && token != JsonToken.STRING) {\n      throw new IllegalStateException(\n          \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());\n    }\n    double result = ((JsonPrimitive) peekStack()).getAsDouble();\n    if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {\n      throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + result);\n    }\n    popStack();\n    if (stackSize > 0) {\n      pathIndices[stackSize - 1]++;\n    }\n    return result;\n  }", "class": "JsonTreeReader", "signature": "double nextDouble()", "full_signature": "@Override public double nextDouble()", "class_method_signature": "JsonTreeReader.nextDouble()", "testcase": false, "constructor": false, "invocations": ["peek", "locationString", "getAsDouble", "peekStack", "isLenient", "isNaN", "isInfinite", "popStack"]}