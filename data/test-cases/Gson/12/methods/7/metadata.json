{"identifier": "nextString", "parameters": "()", "modifiers": "@Override public", "return": "String", "body": "@Override public String nextString() throws IOException {\n    JsonToken token = peek();\n    if (token != JsonToken.STRING && token != JsonToken.NUMBER) {\n      throw new IllegalStateException(\n          \"Expected \" + JsonToken.STRING + \" but was \" + token + locationString());\n    }\n    String result = ((JsonPrimitive) popStack()).getAsString();\n    if (stackSize > 0) {\n      pathIndices[stackSize - 1]++;\n    }\n    return result;\n  }", "class": "JsonTreeReader", "signature": "String nextString()", "full_signature": "@Override public String nextString()", "class_method_signature": "JsonTreeReader.nextString()", "testcase": false, "constructor": false, "invocations": ["peek", "locationString", "getAsString", "popStack"]}