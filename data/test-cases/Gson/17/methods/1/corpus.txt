DefaultDateTypeAdapter extends TypeAdapter<Date> { @Override public Date read(JsonReader in) throws IOException { if (in.peek() == JsonToken.NULL) { in.nextNull(); return null; } Date date = deserializeToDate(in.nextString()); if (dateType == Date.class) { return date; } else if (dateType == Timestamp.class) { return new Timestamp(date.getTime()); } else if (dateType == java.sql.Date.class) { return new java.sql.Date(date.getTime()); } else { throw new AssertionError(); } } DefaultDateTypeAdapter(Class<? extends Date> dateType); DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern); DefaultDateTypeAdapter(Class<? extends Date> dateType, int style); DefaultDateTypeAdapter(int dateStyle, int timeStyle); DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle); DefaultDateTypeAdapter(final Class<? extends Date> dateType, DateFormat enUsFormat, DateFormat localFormat); @Override void write(JsonWriter out, Date value); @Override Date read(JsonReader in); @Override String toString(); }