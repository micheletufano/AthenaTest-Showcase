{"identifier": "read", "parameters": "(JsonReader in)", "modifiers": "@Override public", "return": "Date", "body": "@Override\n  public Date read(JsonReader in) throws IOException {\n    if (in.peek() == JsonToken.NULL) {\n      in.nextNull();\n      return null;\n    }\n    Date date = deserializeToDate(in.nextString());\n    if (dateType == Date.class) {\n      return date;\n    } else if (dateType == Timestamp.class) {\n      return new Timestamp(date.getTime());\n    } else if (dateType == java.sql.Date.class) {\n      return new java.sql.Date(date.getTime());\n    } else {\n      // This must never happen: dateType is guarded in the primary constructor\n      throw new AssertionError();\n    }\n  }", "class": "DefaultDateTypeAdapter", "signature": "Date read(JsonReader in)", "full_signature": "@Override public Date read(JsonReader in)", "class_method_signature": "DefaultDateTypeAdapter.read(JsonReader in)", "testcase": false, "constructor": false, "invocations": ["peek", "nextNull", "deserializeToDate", "nextString", "getTime", "getTime"]}