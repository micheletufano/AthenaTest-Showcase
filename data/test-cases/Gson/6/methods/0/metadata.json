{"identifier": "create", "parameters": "(Gson gson, TypeToken<T> targetType)", "modifiers": "@SuppressWarnings(\"unchecked\") @Override public", "return": "TypeAdapter<T>", "body": "@SuppressWarnings(\"unchecked\")\n  @Override\n  public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) {\n    JsonAdapter annotation = targetType.getRawType().getAnnotation(JsonAdapter.class);\n    if (annotation == null) {\n      return null;\n    }\n    return (TypeAdapter<T>) getTypeAdapter(constructorConstructor, gson, targetType, annotation);\n  }", "class": "JsonAdapterAnnotationTypeAdapterFactory", "signature": "TypeAdapter<T> create(Gson gson, TypeToken<T> targetType)", "full_signature": "@SuppressWarnings(\"unchecked\") @Override public TypeAdapter<T> create(Gson gson, TypeToken<T> targetType)", "class_method_signature": "JsonAdapterAnnotationTypeAdapterFactory.create(Gson gson, TypeToken<T> targetType)", "testcase": false, "constructor": false, "invocations": ["getAnnotation", "getRawType", "getTypeAdapter"]}