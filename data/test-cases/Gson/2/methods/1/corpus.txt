TypeAdapters { public static <TT> TypeAdapterFactory newFactory( final Class<TT> type, final TypeAdapter<TT> typeAdapter) { return new TypeAdapterFactory() { @SuppressWarnings("unchecked") public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) { return typeToken.getRawType() == type ? (TypeAdapter<T>) typeAdapter : null; } @Override public String toString() { return "Factory[type=" + type.getName() + ",adapter=" + typeAdapter + "]"; } }; } private TypeAdapters(); static TypeAdapterFactory newFactory( final TypeToken<TT> type, final TypeAdapter<TT> typeAdapter); static TypeAdapterFactory newFactory( final Class<TT> type, final TypeAdapter<TT> typeAdapter); static TypeAdapterFactory newFactory( final Class<TT> unboxed, final Class<TT> boxed, final TypeAdapter<? super TT> typeAdapter); static TypeAdapterFactory newFactoryForMultipleTypes(final Class<TT> base, final Class<? extends TT> sub, final TypeAdapter<? super TT> typeAdapter); static TypeAdapterFactory newTypeHierarchyFactory( final Class<T1> clazz, final TypeAdapter<T1> typeAdapter); @SuppressWarnings("rawtypes") static final TypeAdapter<Class> CLASS; static final TypeAdapterFactory CLASS_FACTORY; static final TypeAdapter<BitSet> BIT_SET; static final TypeAdapterFactory BIT_SET_FACTORY; static final TypeAdapter<Boolean> BOOLEAN; static final TypeAdapter<Boolean> BOOLEAN_AS_STRING; static final TypeAdapterFactory BOOLEAN_FACTORY; static final TypeAdapter<Number> BYTE; static final TypeAdapterFactory BYTE_FACTORY; static final TypeAdapter<Number> SHORT; static final TypeAdapterFactory SHORT_FACTORY; static final TypeAdapter<Number> INTEGER; static final TypeAdapterFactory INTEGER_FACTORY; static final TypeAdapter<Number> LONG; static final TypeAdapter<Number> FLOAT; static final TypeAdapter<Number> DOUBLE; static final TypeAdapter<Number> NUMBER; static final TypeAdapterFactory NUMBER_FACTORY; static final TypeAdapter<Character> CHARACTER; static final TypeAdapterFactory CHARACTER_FACTORY; static final TypeAdapter<String> STRING; static final TypeAdapter<BigDecimal> BIG_DECIMAL; static final TypeAdapter<BigInteger> BIG_INTEGER; static final TypeAdapterFactory STRING_FACTORY; static final TypeAdapter<StringBuilder> STRING_BUILDER; static final TypeAdapterFactory STRING_BUILDER_FACTORY; static final TypeAdapter<StringBuffer> STRING_BUFFER; static final TypeAdapterFactory STRING_BUFFER_FACTORY; static final TypeAdapter<URL> URL; static final TypeAdapterFactory URL_FACTORY; static final TypeAdapter<URI> URI; static final TypeAdapterFactory URI_FACTORY; static final TypeAdapter<InetAddress> INET_ADDRESS; static final TypeAdapterFactory INET_ADDRESS_FACTORY; static final TypeAdapter<UUID> UUID; static final TypeAdapterFactory UUID_FACTORY; static final TypeAdapterFactory TIMESTAMP_FACTORY; static final TypeAdapter<Calendar> CALENDAR; static final TypeAdapterFactory CALENDAR_FACTORY; static final TypeAdapter<Locale> LOCALE; static final TypeAdapterFactory LOCALE_FACTORY; static final TypeAdapter<JsonElement> JSON_ELEMENT; static final TypeAdapterFactory JSON_ELEMENT_FACTORY; static final TypeAdapterFactory ENUM_FACTORY; }