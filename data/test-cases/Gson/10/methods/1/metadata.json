{"identifier": "create", "parameters": "(Gson gson, final TypeToken<T> type)", "modifiers": "@Override public", "return": "TypeAdapter<T>", "body": "@Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {\n    Class<? super T> raw = type.getRawType();\n\n    if (!Object.class.isAssignableFrom(raw)) {\n      return null; // it's a primitive!\n    }\n\n    ObjectConstructor<T> constructor = constructorConstructor.get(type);\n    return new Adapter<T>(constructor, getBoundFields(gson, type, raw));\n  }", "class": "ReflectiveTypeAdapterFactory", "signature": "TypeAdapter<T> create(Gson gson, final TypeToken<T> type)", "full_signature": "@Override public TypeAdapter<T> create(Gson gson, final TypeToken<T> type)", "class_method_signature": "ReflectiveTypeAdapterFactory.create(Gson gson, final TypeToken<T> type)", "testcase": false, "constructor": false, "invocations": ["getRawType", "isAssignableFrom", "get", "getBoundFields"]}