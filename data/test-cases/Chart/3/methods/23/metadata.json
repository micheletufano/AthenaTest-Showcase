{"identifier": "add", "parameters": "(TimeSeriesDataItem item, boolean notify)", "modifiers": "public", "return": "void", "body": "public void add(TimeSeriesDataItem item, boolean notify) {\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null 'item' argument.\");\n        }\n        item = (TimeSeriesDataItem) item.clone();\n        Class c = item.getPeriod().getClass();\n        if (this.timePeriodClass == null) {\n            this.timePeriodClass = c;\n        }\n        else if (!this.timePeriodClass.equals(c)) {\n            StringBuffer b = new StringBuffer();\n            b.append(\"You are trying to add data where the time period class \");\n            b.append(\"is \");\n            b.append(item.getPeriod().getClass().getName());\n            b.append(\", but the TimeSeries is expecting an instance of \");\n            b.append(this.timePeriodClass.getName());\n            b.append(\".\");\n            throw new SeriesException(b.toString());\n        }\n\n        // make the change (if it's not a duplicate time period)...\n        boolean added = false;\n        int count = getItemCount();\n        if (count == 0) {\n            this.data.add(item);\n            added = true;\n        }\n        else {\n            RegularTimePeriod last = getTimePeriod(getItemCount() - 1);\n            if (item.getPeriod().compareTo(last) > 0) {\n                this.data.add(item);\n                added = true;\n            }\n            else {\n                int index = Collections.binarySearch(this.data, item);\n                if (index < 0) {\n                    this.data.add(-index - 1, item);\n                    added = true;\n                }\n                else {\n                    StringBuffer b = new StringBuffer();\n                    b.append(\"You are attempting to add an observation for \");\n                    b.append(\"the time period \");\n                    b.append(item.getPeriod().toString());\n                    b.append(\" but the series already contains an observation\");\n                    b.append(\" for that time period. Duplicates are not \");\n                    b.append(\"permitted.  Try using the addOrUpdate() method.\");\n                    throw new SeriesException(b.toString());\n                }\n            }\n        }\n        if (added) {\n            updateBoundsForAddedItem(item);\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                TimeSeriesDataItem d = (TimeSeriesDataItem) this.data.remove(0);\n                updateBoundsForRemovedItem(d);\n            }\n\n            removeAgedItems(false);  // remove old items if necessary, but\n                                     // don't notify anyone, because that\n                                     // happens next anyway...\n            if (notify) {\n                fireSeriesChanged();\n            }\n        }\n\n    }", "class": "TimeSeries", "signature": "void add(TimeSeriesDataItem item, boolean notify)", "full_signature": "public void add(TimeSeriesDataItem item, boolean notify)", "class_method_signature": "TimeSeries.add(TimeSeriesDataItem item, boolean notify)", "testcase": false, "constructor": false, "invocations": ["clone", "getClass", "getPeriod", "equals", "append", "append", "append", "getName", "getClass", "getPeriod", "append", "append", "getName", "append", "toString", "getItemCount", "add", "getTimePeriod", "getItemCount", "compareTo", "getPeriod", "add", "binarySearch", "add", "append", "append", "append", "toString", "getPeriod", "append", "append", "append", "toString", "updateBoundsForAddedItem", "getItemCount", "remove", "updateBoundsForRemovedItem", "removeAgedItems", "fireSeriesChanged"]}