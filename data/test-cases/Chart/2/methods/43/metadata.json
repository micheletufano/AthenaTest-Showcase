{"identifier": "findStackedRangeBounds", "parameters": "(CategoryDataset dataset,\n            double base)", "modifiers": "public static", "return": "Range", "body": "public static Range findStackedRangeBounds(CategoryDataset dataset,\n            double base) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        Range result = null;\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int categoryCount = dataset.getColumnCount();\n        for (int item = 0; item < categoryCount; item++) {\n            double positive = base;\n            double negative = base;\n            int seriesCount = dataset.getRowCount();\n            for (int series = 0; series < seriesCount; series++) {\n                Number number = dataset.getValue(series, item);\n                if (number != null) {\n                    double value = number.doubleValue();\n                    if (value > 0.0) {\n                        positive = positive + value;\n                    }\n                    if (value < 0.0) {\n                        negative = negative + value;\n                        // '+', remember value is negative\n                    }\n                }\n            }\n            minimum = Math.min(minimum, negative);\n            maximum = Math.max(maximum, positive);\n        }\n        if (minimum <= maximum) {\n            result = new Range(minimum, maximum);\n        }\n        return result;\n\n    }", "class": "DatasetUtilities", "signature": "Range findStackedRangeBounds(CategoryDataset dataset,\n            double base)", "full_signature": "public static Range findStackedRangeBounds(CategoryDataset dataset,\n            double base)", "class_method_signature": "DatasetUtilities.findStackedRangeBounds(CategoryDataset dataset,\n            double base)", "testcase": false, "constructor": false, "invocations": ["getColumnCount", "getRowCount", "getValue", "doubleValue", "min", "max"]}