DatasetUtilities { public static PieDataset createConsolidatedPieDataset(PieDataset source, Comparable key, double minimumPercent, int minItems) { DefaultPieDataset result = new DefaultPieDataset(); double total = DatasetUtilities.calculatePieDatasetTotal(source); List keys = source.getKeys(); ArrayList otherKeys = new ArrayList(); Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Comparable currentKey = (Comparable) iterator.next(); Number dataValue = source.getValue(currentKey); if (dataValue != null) { double value = dataValue.doubleValue(); if (value / total < minimumPercent) { otherKeys.add(currentKey); } } } iterator = keys.iterator(); double otherValue = 0; while (iterator.hasNext()) { Comparable currentKey = (Comparable) iterator.next(); Number dataValue = source.getValue(currentKey); if (dataValue != null) { if (otherKeys.contains(currentKey) && otherKeys.size() >= minItems) { otherValue += dataValue.doubleValue(); } else { result.setValue(currentKey, dataValue); } } } if (otherKeys.size() >= minItems) { result.setValue(key, otherValue); } return result; } private DatasetUtilities(); static double calculatePieDatasetTotal(PieDataset dataset); static PieDataset createPieDatasetForRow(CategoryDataset dataset, Comparable rowKey); static PieDataset createPieDatasetForRow(CategoryDataset dataset, int row); static PieDataset createPieDatasetForColumn(CategoryDataset dataset, Comparable columnKey); static PieDataset createPieDatasetForColumn(CategoryDataset dataset, int column); static PieDataset createConsolidatedPieDataset(PieDataset source, Comparable key, double minimumPercent); static PieDataset createConsolidatedPieDataset(PieDataset source, Comparable key, double minimumPercent, int minItems); static CategoryDataset createCategoryDataset(String rowKeyPrefix, String columnKeyPrefix, double[][] data); static CategoryDataset createCategoryDataset(String rowKeyPrefix, String columnKeyPrefix, Number[][] data); static CategoryDataset createCategoryDataset(Comparable[] rowKeys, Comparable[] columnKeys, double[][] data); static CategoryDataset createCategoryDataset(Comparable rowKey, KeyedValues rowData); static XYDataset sampleFunction2D(Function2D f, double start, double end, int samples, Comparable seriesKey); static XYSeries sampleFunction2DToSeries(Function2D f, double start, double end, int samples, Comparable seriesKey); static boolean isEmptyOrNull(PieDataset dataset); static boolean isEmptyOrNull(CategoryDataset dataset); static boolean isEmptyOrNull(XYDataset dataset); static Range findDomainBounds(XYDataset dataset); static Range findDomainBounds(XYDataset dataset, boolean includeInterval); static Range findDomainBounds(XYDataset dataset, List visibleSeriesKeys, boolean includeInterval); static Range iterateDomainBounds(XYDataset dataset); static Range iterateDomainBounds(XYDataset dataset, boolean includeInterval); static Range findRangeBounds(CategoryDataset dataset); static Range findRangeBounds(CategoryDataset dataset, boolean includeInterval); static Range findRangeBounds(CategoryDataset dataset, List visibleSeriesKeys, boolean includeInterval); static Range findRangeBounds(XYDataset dataset); static Range findRangeBounds(XYDataset dataset, boolean includeInterval); static Range findRangeBounds(XYDataset dataset, List visibleSeriesKeys, Range xRange, boolean includeInterval); static Range iterateCategoryRangeBounds(CategoryDataset dataset, boolean includeInterval); static Range iterateRangeBounds(CategoryDataset dataset); static Range iterateRangeBounds(CategoryDataset dataset, boolean includeInterval); static Range iterateToFindRangeBounds(CategoryDataset dataset, List visibleSeriesKeys, boolean includeInterval); static Range iterateXYRangeBounds(XYDataset dataset); static Range iterateRangeBounds(XYDataset dataset); static Range iterateRangeBounds(XYDataset dataset, boolean includeInterval); static Range iterateToFindDomainBounds(XYDataset dataset, List visibleSeriesKeys, boolean includeInterval); static Range iterateToFindRangeBounds(XYDataset dataset, List visibleSeriesKeys, Range xRange, boolean includeInterval); static Number findMinimumDomainValue(XYDataset dataset); static Number findMaximumDomainValue(XYDataset dataset); static Number findMinimumRangeValue(CategoryDataset dataset); static Number findMinimumRangeValue(XYDataset dataset); static Number findMaximumRangeValue(CategoryDataset dataset); static Number findMaximumRangeValue(XYDataset dataset); static Range findStackedRangeBounds(CategoryDataset dataset); static Range findStackedRangeBounds(CategoryDataset dataset, double base); static Range findStackedRangeBounds(CategoryDataset dataset, KeyToGroupMap map); static Number findMinimumStackedRangeValue(CategoryDataset dataset); static Number findMaximumStackedRangeValue(CategoryDataset dataset); static Range findStackedRangeBounds(TableXYDataset dataset); static Range findStackedRangeBounds(TableXYDataset dataset, double base); static double calculateStackTotal(TableXYDataset dataset, int item); static Range findCumulativeRangeBounds(CategoryDataset dataset); }