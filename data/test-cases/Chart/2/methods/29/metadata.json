{"identifier": "iterateRangeBounds", "parameters": "(CategoryDataset dataset,\n            boolean includeInterval)", "modifiers": "public static", "return": "Range", "body": "public static Range iterateRangeBounds(CategoryDataset dataset,\n            boolean includeInterval) {\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int rowCount = dataset.getRowCount();\n        int columnCount = dataset.getColumnCount();\n        if (includeInterval && dataset instanceof IntervalCategoryDataset) {\n            // handle the special case where the dataset has y-intervals that\n            // we want to measure\n            IntervalCategoryDataset icd = (IntervalCategoryDataset) dataset;\n            Number value, lvalue, uvalue;\n            for (int row = 0; row < rowCount; row++) {\n                for (int column = 0; column < columnCount; column++) {\n                    value = icd.getValue(row, column);\n                    double v;\n                    if ((value != null)\n                            && !Double.isNaN(v = value.doubleValue())) {\n                        minimum = Math.min(v, minimum);\n                        maximum = Math.max(v, maximum);\n                    }\n                    lvalue = icd.getStartValue(row, column);\n                    if (lvalue != null\n                            && !Double.isNaN(v = lvalue.doubleValue())) {\n                        minimum = Math.min(v, minimum);\n                        maximum = Math.max(v, maximum);\n                    }\n                    uvalue = icd.getEndValue(row, column);\n                    if (uvalue != null \n                            && !Double.isNaN(v = uvalue.doubleValue())) {\n                        minimum = Math.min(v, minimum);\n                        maximum = Math.max(v, maximum);\n                    }\n                }\n            }\n        }\n        else {\n            // handle the standard case (plain CategoryDataset)\n            for (int row = 0; row < rowCount; row++) {\n                for (int column = 0; column < columnCount; column++) {\n                    Number value = dataset.getValue(row, column);\n                    if (value != null) {\n                        double v = value.doubleValue();\n                        if (!Double.isNaN(v)) {\n                            minimum = Math.min(minimum, v);\n                            maximum = Math.max(maximum, v);\n                        }\n                    }\n                }\n            }\n        }\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }", "class": "DatasetUtilities", "signature": "Range iterateRangeBounds(CategoryDataset dataset,\n            boolean includeInterval)", "full_signature": "public static Range iterateRangeBounds(CategoryDataset dataset,\n            boolean includeInterval)", "class_method_signature": "DatasetUtilities.iterateRangeBounds(CategoryDataset dataset,\n            boolean includeInterval)", "testcase": false, "constructor": false, "invocations": ["getRowCount", "getColumnCount", "getValue", "isNaN", "doubleValue", "min", "max", "getStartValue", "isNaN", "doubleValue", "min", "max", "getEndValue", "isNaN", "doubleValue", "min", "max", "getValue", "doubleValue", "isNaN", "min", "max"]}