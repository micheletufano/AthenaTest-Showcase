{"identifier": "iterateToFindRangeBounds", "parameters": "(CategoryDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval)", "modifiers": "public static", "return": "Range", "body": "public static Range iterateToFindRangeBounds(CategoryDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval) {\n\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        if (visibleSeriesKeys == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'visibleSeriesKeys' argument.\");\n        }\n\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int columnCount = dataset.getColumnCount();\n        if (includeInterval\n                && dataset instanceof BoxAndWhiskerCategoryDataset) {\n            // handle special case of BoxAndWhiskerDataset\n            BoxAndWhiskerCategoryDataset bx\n                    = (BoxAndWhiskerCategoryDataset) dataset;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.getRowIndex(seriesKey);\n                int itemCount = dataset.getColumnCount();\n                for (int item = 0; item < itemCount; item++) {\n                    Number lvalue = bx.getMinRegularValue(series, item);\n                    if (lvalue == null) {\n                        lvalue = bx.getValue(series, item);\n                    }\n                    Number uvalue = bx.getMaxRegularValue(series, item);\n                    if (uvalue == null) {\n                        uvalue = bx.getValue(series, item);\n                    }\n                    if (lvalue != null) {\n                        minimum = Math.min(minimum, lvalue.doubleValue());\n                    }\n                    if (uvalue != null) {\n                        maximum = Math.max(maximum, uvalue.doubleValue());\n                    }\n                }\n            }\n        }\n        else if (includeInterval\n                && dataset instanceof IntervalCategoryDataset) {\n            // handle the special case where the dataset has y-intervals that\n            // we want to measure\n            IntervalCategoryDataset icd = (IntervalCategoryDataset) dataset;\n            Number lvalue, uvalue;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.getRowIndex(seriesKey);\n                for (int column = 0; column < columnCount; column++) {\n                    lvalue = icd.getStartValue(series, column);\n                    uvalue = icd.getEndValue(series, column);\n                    if (lvalue != null && !Double.isNaN(lvalue.doubleValue())) {\n                        minimum = Math.min(minimum, lvalue.doubleValue());\n                    }\n                    if (uvalue != null && !Double.isNaN(uvalue.doubleValue())) {\n                        maximum = Math.max(maximum, uvalue.doubleValue());\n                    }\n                }\n            }\n        }\n        else if (includeInterval\n                && dataset instanceof MultiValueCategoryDataset) {\n            // handle the special case where the dataset has y-intervals that\n            // we want to measure\n            MultiValueCategoryDataset mvcd\n                    = (MultiValueCategoryDataset) dataset;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.getRowIndex(seriesKey);\n                for (int column = 0; column < columnCount; column++) {\n                    List values = mvcd.getValues(series, column);\n                    Iterator valueIterator = values.iterator();\n                    while (valueIterator.hasNext()) {\n                    \tObject o = valueIterator.next();\n\t\t\t\t\t\tif (o instanceof Number){\n\t\t\t\t\t\t\tdouble v = ((Number) o).doubleValue();\n\t\t\t\t\t\t\tif (!Double.isNaN(v)){\n\t                            minimum = Math.min(minimum, v);\n\t                            maximum = Math.max(maximum, v);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n                    }\n               }\n            }\n        }\n        else if (includeInterval\n                && dataset instanceof StatisticalCategoryDataset) {\n            // handle the special case where the dataset has y-intervals that\n            // we want to measure\n            StatisticalCategoryDataset scd\n                    = (StatisticalCategoryDataset) dataset;\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.getRowIndex(seriesKey);\n                for (int column = 0; column < columnCount; column++) {\n                    Number meanN = scd.getMeanValue(series, column);\n                    if (meanN != null) {\n                        double std = 0.0;\n                        Number stdN = scd.getStdDevValue(series, column);\n                        if (stdN != null) {\n                            std = stdN.doubleValue();\n                            if (Double.isNaN(std)) {\n                                std = 0.0;\n                            }\n                        }\n                        double mean = meanN.doubleValue();\n                        if (!Double.isNaN(mean)) {\n                            minimum = Math.min(minimum, mean - std);\n                            maximum = Math.max(maximum, mean + std);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            // handle the standard case (plain CategoryDataset)\n            Iterator iterator = visibleSeriesKeys.iterator();\n            while (iterator.hasNext()) {\n                Comparable seriesKey = (Comparable) iterator.next();\n                int series = dataset.getRowIndex(seriesKey);\n                for (int column = 0; column < columnCount; column++) {\n                    Number value = dataset.getValue(series, column);\n                    if (value != null) {\n                        double v = value.doubleValue();\n                        if (!Double.isNaN(v)) {\n                            minimum = Math.min(minimum, v);\n                            maximum = Math.max(maximum, v);\n                        }\n                    }\n                }\n            }\n        }\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }", "class": "DatasetUtilities", "signature": "Range iterateToFindRangeBounds(CategoryDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval)", "full_signature": "public static Range iterateToFindRangeBounds(CategoryDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval)", "class_method_signature": "DatasetUtilities.iterateToFindRangeBounds(CategoryDataset dataset,\n            List visibleSeriesKeys, boolean includeInterval)", "testcase": false, "constructor": false, "invocations": ["getColumnCount", "iterator", "hasNext", "next", "getRowIndex", "getColumnCount", "getMinRegularValue", "getValue", "getMaxRegularValue", "getValue", "min", "doubleValue", "max", "doubleValue", "iterator", "hasNext", "next", "getRowIndex", "getStartValue", "getEndValue", "isNaN", "doubleValue", "min", "doubleValue", "isNaN", "doubleValue", "max", "doubleValue", "iterator", "hasNext", "next", "getRowIndex", "getValues", "iterator", "hasNext", "next", "doubleValue", "isNaN", "min", "max", "iterator", "hasNext", "next", "getRowIndex", "getMeanValue", "getStdDevValue", "doubleValue", "isNaN", "doubleValue", "isNaN", "min", "max", "iterator", "hasNext", "next", "getRowIndex", "getValue", "doubleValue", "isNaN", "min", "max"]}