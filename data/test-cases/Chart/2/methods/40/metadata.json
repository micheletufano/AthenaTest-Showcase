{"identifier": "findMaximumRangeValue", "parameters": "(CategoryDataset dataset)", "modifiers": "public static", "return": "Number", "body": "public static Number findMaximumRangeValue(CategoryDataset dataset) {\n\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n\n        // work out the minimum value...\n        if (dataset instanceof RangeInfo) {\n            RangeInfo info = (RangeInfo) dataset;\n            return new Double(info.getRangeUpperBound(true));\n        }\n\n        // hasn't implemented RangeInfo, so we'll have to iterate...\n        else {\n\n            double maximum = Double.NEGATIVE_INFINITY;\n            int seriesCount = dataset.getRowCount();\n            int itemCount = dataset.getColumnCount();\n            for (int series = 0; series < seriesCount; series++) {\n                for (int item = 0; item < itemCount; item++) {\n                    Number value;\n                    if (dataset instanceof IntervalCategoryDataset) {\n                        IntervalCategoryDataset icd\n                            = (IntervalCategoryDataset) dataset;\n                        value = icd.getEndValue(series, item);\n                    }\n                    else {\n                        value = dataset.getValue(series, item);\n                    }\n                    if (value != null) {\n                        maximum = Math.max(maximum, value.doubleValue());\n                    }\n                }\n            }\n            if (maximum == Double.NEGATIVE_INFINITY) {\n                return null;\n            }\n            else {\n                return new Double(maximum);\n            }\n\n        }\n\n    }", "class": "DatasetUtilities", "signature": "Number findMaximumRangeValue(CategoryDataset dataset)", "full_signature": "public static Number findMaximumRangeValue(CategoryDataset dataset)", "class_method_signature": "DatasetUtilities.findMaximumRangeValue(CategoryDataset dataset)", "testcase": false, "constructor": false, "invocations": ["getRangeUpperBound", "getRowCount", "getColumnCount", "getEndValue", "getValue", "max", "doubleValue"]}