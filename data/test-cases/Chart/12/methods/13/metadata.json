{"identifier": "draw", "parameters": "(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "modifiers": "public", "return": "void", "body": "public void draw(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info) {\n\n\n        // adjust the drawing area for the plot insets (if any)...\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n        drawBackground(g2, area);\n        drawOutline(g2, area);\n\n        // check that there is some data to display...\n        if (DatasetUtilities.isEmptyOrNull(this.dataset)) {\n            drawNoDataMessage(g2, area);\n            return;\n        }\n\n        int pieCount = 0;\n        if (this.dataExtractOrder == TableOrder.BY_ROW) {\n            pieCount = this.dataset.getRowCount();\n        }\n        else {\n            pieCount = this.dataset.getColumnCount();\n        }\n\n        // the columns variable is always >= rows\n        int displayCols = (int) Math.ceil(Math.sqrt(pieCount));\n        int displayRows\n            = (int) Math.ceil((double) pieCount / (double) displayCols);\n\n        // swap rows and columns to match plotArea shape\n        if (displayCols > displayRows && area.getWidth() < area.getHeight()) {\n            int temp = displayCols;\n            displayCols = displayRows;\n            displayRows = temp;\n        }\n\n        prefetchSectionPaints();\n\n        int x = (int) area.getX();\n        int y = (int) area.getY();\n        int width = ((int) area.getWidth()) / displayCols;\n        int height = ((int) area.getHeight()) / displayRows;\n        int row = 0;\n        int column = 0;\n        int diff = (displayRows * displayCols) - pieCount;\n        int xoffset = 0;\n        Rectangle rect = new Rectangle();\n\n        for (int pieIndex = 0; pieIndex < pieCount; pieIndex++) {\n            rect.setBounds(x + xoffset + (width * column), y + (height * row),\n                    width, height);\n\n            String title = null;\n            if (this.dataExtractOrder == TableOrder.BY_ROW) {\n                title = this.dataset.getRowKey(pieIndex).toString();\n            }\n            else {\n                title = this.dataset.getColumnKey(pieIndex).toString();\n            }\n            this.pieChart.setTitle(title);\n\n            PieDataset piedataset = null;\n            PieDataset dd = new CategoryToPieDataset(this.dataset,\n                    this.dataExtractOrder, pieIndex);\n            if (this.limit > 0.0) {\n                piedataset = DatasetUtilities.createConsolidatedPieDataset(\n                        dd, this.aggregatedItemsKey, this.limit);\n            }\n            else {\n                piedataset = dd;\n            }\n            PiePlot piePlot = (PiePlot) this.pieChart.getPlot();\n            piePlot.setDataset(piedataset);\n            piePlot.setPieIndex(pieIndex);\n\n            // update the section colors to match the global colors...\n            for (int i = 0; i < piedataset.getItemCount(); i++) {\n                Comparable key = piedataset.getKey(i);\n                Paint p;\n                if (key.equals(this.aggregatedItemsKey)) {\n                    p = this.aggregatedItemsPaint;\n                }\n                else {\n                    p = (Paint) this.sectionPaints.get(key);\n                }\n                piePlot.setSectionPaint(key, p);\n            }\n\n            ChartRenderingInfo subinfo = null;\n            if (info != null) {\n                subinfo = new ChartRenderingInfo();\n            }\n            this.pieChart.draw(g2, rect, subinfo);\n            if (info != null) {\n                info.getOwner().getEntityCollection().addAll(\n                        subinfo.getEntityCollection());\n                info.addSubplotInfo(subinfo.getPlotInfo());\n            }\n\n            ++column;\n            if (column == displayCols) {\n                column = 0;\n                ++row;\n\n                if (row == displayRows - 1 && diff != 0) {\n                    xoffset = (diff * width) / 2;\n                }\n            }\n        }\n\n    }", "class": "MultiplePiePlot", "signature": "void draw(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "full_signature": "public void draw(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "class_method_signature": "MultiplePiePlot.draw(Graphics2D g2,\n                     Rectangle2D area,\n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo info)", "testcase": false, "constructor": false, "invocations": ["getInsets", "trim", "drawBackground", "drawOutline", "isEmptyOrNull", "drawNoDataMessage", "getRowCount", "getColumnCount", "ceil", "sqrt", "ceil", "getWidth", "getHeight", "prefetchSectionPaints", "getX", "getY", "getWidth", "getHeight", "setBounds", "toString", "getRowKey", "toString", "getColumnKey", "setTitle", "createConsolidatedPieDataset", "getPlot", "setDataset", "setPieIndex", "getItemCount", "getKey", "equals", "get", "setSectionPaint", "draw", "addAll", "getEntityCollection", "getOwner", "getEntityCollection", "addSubplotInfo", "getPlotInfo"]}