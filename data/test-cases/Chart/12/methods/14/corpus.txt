MultiplePiePlot extends Plot implements Cloneable, Serializable { public LegendItemCollection getLegendItems() { LegendItemCollection result = new LegendItemCollection(); if (this.dataset != null) { List keys = null; prefetchSectionPaints(); if (this.dataExtractOrder == TableOrder.BY_ROW) { keys = this.dataset.getColumnKeys(); } else if (this.dataExtractOrder == TableOrder.BY_COLUMN) { keys = this.dataset.getRowKeys(); } if (keys != null) { int section = 0; Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Comparable key = (Comparable) iterator.next(); String label = key.toString(); String description = label; Paint paint = (Paint) this.sectionPaints.get(key); LegendItem item = new LegendItem(label, description, null, null, Plot.DEFAULT_LEGEND_ITEM_CIRCLE, paint, Plot.DEFAULT_OUTLINE_STROKE, paint); item.setDataset(getDataset()); result.add(item); section++; } } if (this.limit > 0.0) { result.add(new LegendItem(this.aggregatedItemsKey.toString(), this.aggregatedItemsKey.toString(), null, null, Plot.DEFAULT_LEGEND_ITEM_CIRCLE, this.aggregatedItemsPaint, Plot.DEFAULT_OUTLINE_STROKE, this.aggregatedItemsPaint)); } } return result; } MultiplePiePlot(); MultiplePiePlot(CategoryDataset dataset); CategoryDataset getDataset(); void setDataset(CategoryDataset dataset); JFreeChart getPieChart(); void setPieChart(JFreeChart pieChart); TableOrder getDataExtractOrder(); void setDataExtractOrder(TableOrder order); double getLimit(); void setLimit(double limit); Comparable getAggregatedItemsKey(); void setAggregatedItemsKey(Comparable key); Paint getAggregatedItemsPaint(); void setAggregatedItemsPaint(Paint paint); String getPlotType(); void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info); LegendItemCollection getLegendItems(); boolean equals(Object obj); }