{"identifier": "addOrUpdate", "parameters": "(RegularTimePeriod period,\n                                          Number value)", "modifiers": "public", "return": "TimeSeriesDataItem", "body": "public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period,\n                                          Number value) {\n\n        if (period == null) {\n            throw new IllegalArgumentException(\"Null 'period' argument.\");\n        }\n        TimeSeriesDataItem overwritten = null;\n\n        TimeSeriesDataItem key = new TimeSeriesDataItem(period, value);\n        int index = Collections.binarySearch(this.data, key);\n        if (index >= 0) {\n            TimeSeriesDataItem existing\n                = (TimeSeriesDataItem) this.data.get(index);\n            overwritten = (TimeSeriesDataItem) existing.clone();\n            existing.setValue(value);\n            removeAgedItems(false);  // remove old items if necessary, but\n                                     // don't notify anyone, because that\n                                     // happens next anyway...\n            fireSeriesChanged();\n        }\n        else {\n            this.data.add(-index - 1, new TimeSeriesDataItem(period, value));\n\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n\n            removeAgedItems(false);  // remove old items if necessary, but\n                                     // don't notify anyone, because that\n                                     // happens next anyway...\n            fireSeriesChanged();\n        }\n        return overwritten;\n\n    }", "class": "TimeSeries", "signature": "TimeSeriesDataItem addOrUpdate(RegularTimePeriod period,\n                                          Number value)", "full_signature": "public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period,\n                                          Number value)", "class_method_signature": "TimeSeries.addOrUpdate(RegularTimePeriod period,\n                                          Number value)", "testcase": false, "constructor": false, "invocations": ["binarySearch", "get", "clone", "setValue", "removeAgedItems", "fireSeriesChanged", "add", "getItemCount", "remove", "removeAgedItems", "fireSeriesChanged"]}