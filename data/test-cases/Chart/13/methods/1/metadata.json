{"identifier": "arrange", "parameters": "(BlockContainer container,\n                          Graphics2D g2,\n                          RectangleConstraint constraint)", "modifiers": "public", "return": "Size2D", "body": "public Size2D arrange(BlockContainer container,\n                          Graphics2D g2,\n                          RectangleConstraint constraint) {\n        RectangleConstraint contentConstraint\n                = container.toContentConstraint(constraint);\n        Size2D contentSize = null;\n        LengthConstraintType w = contentConstraint.getWidthConstraintType();\n        LengthConstraintType h = contentConstraint.getHeightConstraintType();\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeNN(container, g2);\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeFN(container, g2, constraint.getWidth());\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                contentSize = arrangeFF(container, g2, constraint);\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeFR(container, g2, constraint);\n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeRR(container, constraint.getWidthRange(),\n                        constraint.getHeightRange(), g2);\n            }\n        }\n        return new Size2D(container.calculateTotalWidth(contentSize.getWidth()),\n                container.calculateTotalHeight(contentSize.getHeight()));\n    }", "class": "BorderArrangement", "signature": "Size2D arrange(BlockContainer container,\n                          Graphics2D g2,\n                          RectangleConstraint constraint)", "full_signature": "public Size2D arrange(BlockContainer container,\n                          Graphics2D g2,\n                          RectangleConstraint constraint)", "class_method_signature": "BorderArrangement.arrange(BlockContainer container,\n                          Graphics2D g2,\n                          RectangleConstraint constraint)", "testcase": false, "constructor": false, "invocations": ["toContentConstraint", "getWidthConstraintType", "getHeightConstraintType", "arrangeNN", "arrangeFN", "getWidth", "arrangeFF", "arrangeFR", "arrangeRR", "getWidthRange", "getHeightRange", "calculateTotalWidth", "getWidth", "calculateTotalHeight", "getHeight"]}