{"identifier": "createCopy", "parameters": "(RegularTimePeriod start, RegularTimePeriod end)", "modifiers": "public", "return": "TimeSeries", "body": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n        throws CloneNotSupportedException {\n\n        if (start == null) {\n            throw new IllegalArgumentException(\"Null 'start' argument.\");\n        }\n        if (end == null) {\n            throw new IllegalArgumentException(\"Null 'end' argument.\");\n        }\n        if (start.compareTo(end) > 0) {\n            throw new IllegalArgumentException(\n                    \"Requires start on or before end.\");\n        }\n        boolean emptyRange = false;\n        int startIndex = getIndex(start);\n        if (startIndex < 0) {\n            startIndex = -(startIndex + 1);\n            if (startIndex == this.data.size()) {\n                emptyRange = true;  // start is after last data item\n            }\n        }\n        int endIndex = getIndex(end);\n        if (endIndex < 0) {             // end period is not in original series\n            endIndex = -(endIndex + 1); // this is first item AFTER end period\n            endIndex = endIndex - 1;    // so this is last item BEFORE end \n        }\n        if (endIndex < 0) {\n            emptyRange = true;\n        }\n        if (emptyRange) {\n            TimeSeries copy = (TimeSeries) super.clone();\n            copy.data = new java.util.ArrayList();\n            return copy;\n        }\n        else {\n            return createCopy(startIndex, endIndex);\n        }\n\n    }", "class": "TimeSeries", "signature": "TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)", "full_signature": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)", "class_method_signature": "TimeSeries.createCopy(RegularTimePeriod start, RegularTimePeriod end)", "testcase": false, "constructor": false, "invocations": ["compareTo", "getIndex", "size", "getIndex", "clone", "createCopy"]}