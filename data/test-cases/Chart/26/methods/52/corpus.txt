Axis implements Cloneable, Serializable { public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof Axis)) { return false; } Axis that = (Axis) obj; if (this.visible != that.visible) { return false; } if (!ObjectUtilities.equal(this.label, that.label)) { return false; } if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) { return false; } if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) { return false; } if (!ObjectUtilities.equal(this.labelInsets, that.labelInsets)) { return false; } if (this.labelAngle != that.labelAngle) { return false; } if (!ObjectUtilities.equal(this.labelToolTip, that.labelToolTip)) { return false; } if (!ObjectUtilities.equal(this.labelURL, that.labelURL)) { return false; } if (this.axisLineVisible != that.axisLineVisible) { return false; } if (!ObjectUtilities.equal(this.axisLineStroke, that.axisLineStroke)) { return false; } if (!PaintUtilities.equal(this.axisLinePaint, that.axisLinePaint)) { return false; } if (this.tickLabelsVisible != that.tickLabelsVisible) { return false; } if (!ObjectUtilities.equal(this.tickLabelFont, that.tickLabelFont)) { return false; } if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) { return false; } if (!ObjectUtilities.equal( this.tickLabelInsets, that.tickLabelInsets )) { return false; } if (this.tickMarksVisible != that.tickMarksVisible) { return false; } if (this.tickMarkInsideLength != that.tickMarkInsideLength) { return false; } if (this.tickMarkOutsideLength != that.tickMarkOutsideLength) { return false; } if (!PaintUtilities.equal(this.tickMarkPaint, that.tickMarkPaint)) { return false; } if (!ObjectUtilities.equal(this.tickMarkStroke, that.tickMarkStroke)) { return false; } if (this.fixedDimension != that.fixedDimension) { return false; } return true; } protected Axis(String label); boolean isVisible(); void setVisible(boolean flag); String getLabel(); void setLabel(String label); Font getLabelFont(); void setLabelFont(Font font); Paint getLabelPaint(); void setLabelPaint(Paint paint); RectangleInsets getLabelInsets(); void setLabelInsets(RectangleInsets insets); double getLabelAngle(); void setLabelAngle(double angle); String getLabelToolTip(); void setLabelToolTip(String text); String getLabelURL(); void setLabelURL(String url); boolean isAxisLineVisible(); void setAxisLineVisible(boolean visible); Paint getAxisLinePaint(); void setAxisLinePaint(Paint paint); Stroke getAxisLineStroke(); void setAxisLineStroke(Stroke stroke); boolean isTickLabelsVisible(); void setTickLabelsVisible(boolean flag); Font getTickLabelFont(); void setTickLabelFont(Font font); Paint getTickLabelPaint(); void setTickLabelPaint(Paint paint); RectangleInsets getTickLabelInsets(); void setTickLabelInsets(RectangleInsets insets); boolean isTickMarksVisible(); void setTickMarksVisible(boolean flag); float getTickMarkInsideLength(); void setTickMarkInsideLength(float length); float getTickMarkOutsideLength(); void setTickMarkOutsideLength(float length); Stroke getTickMarkStroke(); void setTickMarkStroke(Stroke stroke); Paint getTickMarkPaint(); void setTickMarkPaint(Paint paint); Plot getPlot(); void setPlot(Plot plot); double getFixedDimension(); void setFixedDimension(double dimension); abstract void configure(); abstract AxisSpace reserveSpace(Graphics2D g2, Plot plot, Rectangle2D plotArea, RectangleEdge edge, AxisSpace space); abstract AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, PlotRenderingInfo plotState); abstract List refreshTicks(Graphics2D g2, AxisState state, Rectangle2D dataArea, RectangleEdge edge); void addChangeListener(AxisChangeListener listener); void removeChangeListener(AxisChangeListener listener); boolean hasListener(EventListener listener); Object clone(); boolean equals(Object obj); static final boolean DEFAULT_AXIS_VISIBLE; static final Font DEFAULT_AXIS_LABEL_FONT; static final Paint DEFAULT_AXIS_LABEL_PAINT; static final RectangleInsets DEFAULT_AXIS_LABEL_INSETS; static final Paint DEFAULT_AXIS_LINE_PAINT; static final Stroke DEFAULT_AXIS_LINE_STROKE; static final boolean DEFAULT_TICK_LABELS_VISIBLE; static final Font DEFAULT_TICK_LABEL_FONT; static final Paint DEFAULT_TICK_LABEL_PAINT; static final RectangleInsets DEFAULT_TICK_LABEL_INSETS; static final boolean DEFAULT_TICK_MARKS_VISIBLE; static final Stroke DEFAULT_TICK_MARK_STROKE; static final Paint DEFAULT_TICK_MARK_PAINT; static final float DEFAULT_TICK_MARK_INSIDE_LENGTH; static final float DEFAULT_TICK_MARK_OUTSIDE_LENGTH; }