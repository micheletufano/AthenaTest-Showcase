{"identifier": "equal", "parameters": "(Shape s1, Shape s2)", "modifiers": "public static", "return": "boolean", "body": "public static boolean equal(Shape s1, Shape s2) {\n        if (s1 instanceof Line2D && s2 instanceof Line2D) {\n            return equal((Line2D) s1, (Line2D) s2);\n        }\n        else if (s1 instanceof Ellipse2D && s2 instanceof Ellipse2D) {\n            return equal((Ellipse2D) s1, (Ellipse2D) s2);\n        }\n        else if (s1 instanceof Arc2D && s2 instanceof Arc2D) {\n            return equal((Arc2D) s1, (Arc2D) s2);\n        }\n        else if (s1 instanceof Polygon && s2 instanceof Polygon) {\n            return equal((Polygon) s1, (Polygon) s2);\n        }\n        else if (s1 instanceof GeneralPath && s2 instanceof GeneralPath) {\n            return equal((GeneralPath) s1, (GeneralPath) s2);\n        }\n        else {\n            // this will handle Rectangle2D...\n            return ObjectUtilities.equal(s1, s2);\n        }\n    }", "class": "ShapeUtilities", "signature": "boolean equal(Shape s1, Shape s2)", "full_signature": "public static boolean equal(Shape s1, Shape s2)", "class_method_signature": "ShapeUtilities.equal(Shape s1, Shape s2)", "testcase": false, "constructor": false, "invocations": ["equal", "equal", "equal", "equal", "equal", "equal"]}