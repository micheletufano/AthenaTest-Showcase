ShapeUtilities { public static boolean equal(Shape s1, Shape s2) { if (s1 instanceof Line2D && s2 instanceof Line2D) { return equal((Line2D) s1, (Line2D) s2); } else if (s1 instanceof Ellipse2D && s2 instanceof Ellipse2D) { return equal((Ellipse2D) s1, (Ellipse2D) s2); } else if (s1 instanceof Arc2D && s2 instanceof Arc2D) { return equal((Arc2D) s1, (Arc2D) s2); } else if (s1 instanceof Polygon && s2 instanceof Polygon) { return equal((Polygon) s1, (Polygon) s2); } else if (s1 instanceof GeneralPath && s2 instanceof GeneralPath) { return equal((GeneralPath) s1, (GeneralPath) s2); } else { return ObjectUtilities.equal(s1, s2); } } private ShapeUtilities(); static Shape clone(Shape shape); static boolean equal(Shape s1, Shape s2); static boolean equal(Line2D l1, Line2D l2); static boolean equal(Ellipse2D e1, Ellipse2D e2); static boolean equal(Arc2D a1, Arc2D a2); static boolean equal(Polygon p1, Polygon p2); static boolean equal(GeneralPath p1, GeneralPath p2); static Shape createTranslatedShape(Shape shape, double transX, double transY); static Shape createTranslatedShape(Shape shape, RectangleAnchor anchor, double locationX, double locationY); static Shape rotateShape(Shape base, double angle, float x, float y); static void drawRotatedShape(Graphics2D g2, Shape shape, double angle, float x, float y); static Shape createDiagonalCross(float l, float t); static Shape createRegularCross(float l, float t); static Shape createDiamond(float s); static Shape createUpTriangle(float s); static Shape createDownTriangle(float s); static Shape createLineRegion(Line2D line, float width); static Point2D getPointInRectangle(double x, double y, Rectangle2D area); static boolean contains(Rectangle2D rect1, Rectangle2D rect2); static boolean intersects(Rectangle2D rect1, Rectangle2D rect2); }