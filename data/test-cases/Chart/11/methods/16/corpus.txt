ShapeUtilities { public static Shape createLineRegion(Line2D line, float width) { GeneralPath result = new GeneralPath(); float x1 = (float) line.getX1(); float x2 = (float) line.getX2(); float y1 = (float) line.getY1(); float y2 = (float) line.getY2(); if ((x2 - x1) != 0.0) { double theta = Math.atan((y2 - y1) / (x2 - x1)); float dx = (float) Math.sin(theta) * width; float dy = (float) Math.cos(theta) * width; result.moveTo(x1 - dx, y1 + dy); result.lineTo(x1 + dx, y1 - dy); result.lineTo(x2 + dx, y2 - dy); result.lineTo(x2 - dx, y2 + dy); result.closePath(); } else { result.moveTo(x1 - width / 2.0f, y1); result.lineTo(x1 + width / 2.0f, y1); result.lineTo(x2 + width / 2.0f, y2); result.lineTo(x2 - width / 2.0f, y2); result.closePath(); } return result; } private ShapeUtilities(); static Shape clone(Shape shape); static boolean equal(Shape s1, Shape s2); static boolean equal(Line2D l1, Line2D l2); static boolean equal(Ellipse2D e1, Ellipse2D e2); static boolean equal(Arc2D a1, Arc2D a2); static boolean equal(Polygon p1, Polygon p2); static boolean equal(GeneralPath p1, GeneralPath p2); static Shape createTranslatedShape(Shape shape, double transX, double transY); static Shape createTranslatedShape(Shape shape, RectangleAnchor anchor, double locationX, double locationY); static Shape rotateShape(Shape base, double angle, float x, float y); static void drawRotatedShape(Graphics2D g2, Shape shape, double angle, float x, float y); static Shape createDiagonalCross(float l, float t); static Shape createRegularCross(float l, float t); static Shape createDiamond(float s); static Shape createUpTriangle(float s); static Shape createDownTriangle(float s); static Shape createLineRegion(Line2D line, float width); static Point2D getPointInRectangle(double x, double y, Rectangle2D area); static boolean contains(Rectangle2D rect1, Rectangle2D rect2); static boolean intersects(Rectangle2D rect1, Rectangle2D rect2); }