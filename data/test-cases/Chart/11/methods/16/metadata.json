{"identifier": "createLineRegion", "parameters": "(Line2D line, float width)", "modifiers": "public static", "return": "Shape", "body": "public static Shape createLineRegion(Line2D line, float width) {\n        GeneralPath result = new GeneralPath();\n        float x1 = (float) line.getX1();\n        float x2 = (float) line.getX2();\n        float y1 = (float) line.getY1();\n        float y2 = (float) line.getY2();\n        if ((x2 - x1) != 0.0) {\n            double theta = Math.atan((y2 - y1) / (x2 - x1));\n            float dx = (float) Math.sin(theta) * width;\n            float dy = (float) Math.cos(theta) * width;\n            result.moveTo(x1 - dx, y1 + dy);\n            result.lineTo(x1 + dx, y1 - dy);\n            result.lineTo(x2 + dx, y2 - dy);\n            result.lineTo(x2 - dx, y2 + dy);\n            result.closePath();\n        }\n        else {\n            // special case, vertical line\n            result.moveTo(x1 - width / 2.0f, y1);\n            result.lineTo(x1 + width / 2.0f, y1);\n            result.lineTo(x2 + width / 2.0f, y2);\n            result.lineTo(x2 - width / 2.0f, y2);\n            result.closePath();\n        }\n        return result;\n    }", "class": "ShapeUtilities", "signature": "Shape createLineRegion(Line2D line, float width)", "full_signature": "public static Shape createLineRegion(Line2D line, float width)", "class_method_signature": "ShapeUtilities.createLineRegion(Line2D line, float width)", "testcase": false, "constructor": false, "invocations": ["getX1", "getX2", "getY1", "getY2", "atan", "sin", "cos", "moveTo", "lineTo", "lineTo", "lineTo", "closePath", "moveTo", "lineTo", "lineTo", "lineTo", "closePath"]}