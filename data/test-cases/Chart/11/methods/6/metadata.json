{"identifier": "equal", "parameters": "(GeneralPath p1, GeneralPath p2)", "modifiers": "public static", "return": "boolean", "body": "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator1 = p1.getPathIterator(null);\n        PathIterator iterator2 = p2.getPathIterator(null);\n        double[] d1 = new double[6];\n        double[] d2 = new double[6];\n        boolean done = iterator1.isDone() && iterator2.isDone();\n        while (!done) {\n            if (iterator1.isDone() != iterator2.isDone()) {\n                return false;\n            }\n            int seg1 = iterator1.currentSegment(d1);\n            int seg2 = iterator2.currentSegment(d2);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d1, d2)) {\n                return false;\n            }\n            iterator1.next();\n            iterator2.next();\n            done = iterator1.isDone() && iterator2.isDone();\n        }\n        return true;\n    }", "class": "ShapeUtilities", "signature": "boolean equal(GeneralPath p1, GeneralPath p2)", "full_signature": "public static boolean equal(GeneralPath p1, GeneralPath p2)", "class_method_signature": "ShapeUtilities.equal(GeneralPath p1, GeneralPath p2)", "testcase": false, "constructor": false, "invocations": ["getWindingRule", "getWindingRule", "getPathIterator", "getPathIterator", "isDone", "isDone", "isDone", "isDone", "currentSegment", "currentSegment", "equals", "next", "next", "isDone", "isDone"]}