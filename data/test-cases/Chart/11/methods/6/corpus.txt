ShapeUtilities { public static boolean equal(GeneralPath p1, GeneralPath p2) { if (p1 == null) { return (p2 == null); } if (p2 == null) { return false; } if (p1.getWindingRule() != p2.getWindingRule()) { return false; } PathIterator iterator1 = p1.getPathIterator(null); PathIterator iterator2 = p2.getPathIterator(null); double[] d1 = new double[6]; double[] d2 = new double[6]; boolean done = iterator1.isDone() && iterator2.isDone(); while (!done) { if (iterator1.isDone() != iterator2.isDone()) { return false; } int seg1 = iterator1.currentSegment(d1); int seg2 = iterator2.currentSegment(d2); if (seg1 != seg2) { return false; } if (!Arrays.equals(d1, d2)) { return false; } iterator1.next(); iterator2.next(); done = iterator1.isDone() && iterator2.isDone(); } return true; } private ShapeUtilities(); static Shape clone(Shape shape); static boolean equal(Shape s1, Shape s2); static boolean equal(Line2D l1, Line2D l2); static boolean equal(Ellipse2D e1, Ellipse2D e2); static boolean equal(Arc2D a1, Arc2D a2); static boolean equal(Polygon p1, Polygon p2); static boolean equal(GeneralPath p1, GeneralPath p2); static Shape createTranslatedShape(Shape shape, double transX, double transY); static Shape createTranslatedShape(Shape shape, RectangleAnchor anchor, double locationX, double locationY); static Shape rotateShape(Shape base, double angle, float x, float y); static void drawRotatedShape(Graphics2D g2, Shape shape, double angle, float x, float y); static Shape createDiagonalCross(float l, float t); static Shape createRegularCross(float l, float t); static Shape createDiamond(float s); static Shape createUpTriangle(float s); static Shape createDownTriangle(float s); static Shape createLineRegion(Line2D line, float width); static Point2D getPointInRectangle(double x, double y, Rectangle2D area); static boolean contains(Rectangle2D rect1, Rectangle2D rect2); static boolean intersects(Rectangle2D rect1, Rectangle2D rect2); }