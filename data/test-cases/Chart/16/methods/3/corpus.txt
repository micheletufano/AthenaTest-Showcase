DefaultIntervalCategoryDataset extends AbstractSeriesDataset implements IntervalCategoryDataset { public void setSeriesKeys(Comparable[] seriesKeys) { if (seriesKeys == null) { throw new IllegalArgumentException("Null 'seriesKeys' argument."); } if (seriesKeys.length != getSeriesCount()) { throw new IllegalArgumentException( "The number of series keys does not match the data."); } this.seriesKeys = seriesKeys; fireDatasetChanged(); } DefaultIntervalCategoryDataset(double[][] starts, double[][] ends); DefaultIntervalCategoryDataset(Number[][] starts, Number[][] ends); DefaultIntervalCategoryDataset(String[] seriesNames, Number[][] starts, Number[][] ends); DefaultIntervalCategoryDataset(Comparable[] seriesKeys, Comparable[] categoryKeys, Number[][] starts, Number[][] ends); int getSeriesCount(); int getSeriesIndex(Comparable seriesKey); Comparable getSeriesKey(int series); void setSeriesKeys(Comparable[] seriesKeys); int getCategoryCount(); List getColumnKeys(); void setCategoryKeys(Comparable[] categoryKeys); Number getValue(Comparable series, Comparable category); Number getValue(int series, int category); Number getStartValue(Comparable series, Comparable category); Number getStartValue(int series, int category); Number getEndValue(Comparable series, Comparable category); Number getEndValue(int series, int category); void setStartValue(int series, Comparable category, Number value); void setEndValue(int series, Comparable category, Number value); int getCategoryIndex(Comparable category); Comparable getColumnKey(int column); int getColumnIndex(Comparable columnKey); int getRowIndex(Comparable rowKey); List getRowKeys(); Comparable getRowKey(int row); int getColumnCount(); int getRowCount(); boolean equals(Object obj); Object clone(); }