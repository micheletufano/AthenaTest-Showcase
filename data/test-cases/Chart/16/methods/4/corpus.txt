DefaultIntervalCategoryDataset extends AbstractSeriesDataset implements IntervalCategoryDataset { public int getCategoryCount() { int result = 0; if (this.startData != null) { if (getSeriesCount() > 0) { result = this.startData[0].length; } } return result; } DefaultIntervalCategoryDataset(double[][] starts, double[][] ends); DefaultIntervalCategoryDataset(Number[][] starts, Number[][] ends); DefaultIntervalCategoryDataset(String[] seriesNames, Number[][] starts, Number[][] ends); DefaultIntervalCategoryDataset(Comparable[] seriesKeys, Comparable[] categoryKeys, Number[][] starts, Number[][] ends); int getSeriesCount(); int getSeriesIndex(Comparable seriesKey); Comparable getSeriesKey(int series); void setSeriesKeys(Comparable[] seriesKeys); int getCategoryCount(); List getColumnKeys(); void setCategoryKeys(Comparable[] categoryKeys); Number getValue(Comparable series, Comparable category); Number getValue(int series, int category); Number getStartValue(Comparable series, Comparable category); Number getStartValue(int series, int category); Number getEndValue(Comparable series, Comparable category); Number getEndValue(int series, int category); void setStartValue(int series, Comparable category, Number value); void setEndValue(int series, Comparable category, Number value); int getCategoryIndex(Comparable category); Comparable getColumnKey(int column); int getColumnIndex(Comparable columnKey); int getRowIndex(Comparable rowKey); List getRowKeys(); Comparable getRowKey(int row); int getColumnCount(); int getRowCount(); boolean equals(Object obj); Object clone(); }