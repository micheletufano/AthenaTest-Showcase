AbstractCategoryItemRenderer extends AbstractRenderer implements CategoryItemRenderer, Cloneable, PublicCloneable, Serializable { public void drawDomainMarker(Graphics2D g2, CategoryPlot plot, CategoryAxis axis, CategoryMarker marker, Rectangle2D dataArea) { Comparable category = marker.getKey(); CategoryDataset dataset = plot.getDataset(plot.getIndexOf(this)); int columnIndex = dataset.getColumnIndex(category); if (columnIndex < 0) { return; } final Composite savedComposite = g2.getComposite(); g2.setComposite(AlphaComposite.getInstance( AlphaComposite.SRC_OVER, marker.getAlpha())); PlotOrientation orientation = plot.getOrientation(); Rectangle2D bounds = null; if (marker.getDrawAsLine()) { double v = axis.getCategoryMiddle(columnIndex, dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge()); Line2D line = null; if (orientation == PlotOrientation.HORIZONTAL) { line = new Line2D.Double(dataArea.getMinX(), v, dataArea.getMaxX(), v); } else if (orientation == PlotOrientation.VERTICAL) { line = new Line2D.Double(v, dataArea.getMinY(), v, dataArea.getMaxY()); } g2.setPaint(marker.getPaint()); g2.setStroke(marker.getStroke()); g2.draw(line); bounds = line.getBounds2D(); } else { double v0 = axis.getCategoryStart(columnIndex, dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge()); double v1 = axis.getCategoryEnd(columnIndex, dataset.getColumnCount(), dataArea, plot.getDomainAxisEdge()); Rectangle2D area = null; if (orientation == PlotOrientation.HORIZONTAL) { area = new Rectangle2D.Double(dataArea.getMinX(), v0, dataArea.getWidth(), (v1 - v0)); } else if (orientation == PlotOrientation.VERTICAL) { area = new Rectangle2D.Double(v0, dataArea.getMinY(), (v1 - v0), dataArea.getHeight()); } g2.setPaint(marker.getPaint()); g2.fill(area); bounds = area; } String label = marker.getLabel(); RectangleAnchor anchor = marker.getLabelAnchor(); if (label != null) { Font labelFont = marker.getLabelFont(); g2.setFont(labelFont); g2.setPaint(marker.getLabelPaint()); Point2D coordinates = calculateDomainMarkerTextAnchorPoint( g2, orientation, dataArea, bounds, marker.getLabelOffset(), marker.getLabelOffsetType(), anchor); TextUtilities.drawAlignedString(label, g2, (float) coordinates.getX(), (float) coordinates.getY(), marker.getLabelTextAnchor()); } g2.setComposite(savedComposite); } protected AbstractCategoryItemRenderer(); int getPassCount(); CategoryPlot getPlot(); void setPlot(CategoryPlot plot); CategoryItemLabelGenerator getItemLabelGenerator(int row, int column, boolean selected); CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series); void setSeriesItemLabelGenerator(int series, CategoryItemLabelGenerator generator); void setSeriesItemLabelGenerator(int series, CategoryItemLabelGenerator generator, boolean notify); CategoryItemLabelGenerator getBaseItemLabelGenerator(); void setBaseItemLabelGenerator( CategoryItemLabelGenerator generator); void setBaseItemLabelGenerator( CategoryItemLabelGenerator generator, boolean notify); CategoryToolTipGenerator getToolTipGenerator(int row, int column, boolean selected); CategoryToolTipGenerator getSeriesToolTipGenerator(int series); void setSeriesToolTipGenerator(int series, CategoryToolTipGenerator generator); void setSeriesToolTipGenerator(int series, CategoryToolTipGenerator generator, boolean notify); CategoryToolTipGenerator getBaseToolTipGenerator(); void setBaseToolTipGenerator(CategoryToolTipGenerator generator); void setBaseToolTipGenerator(CategoryToolTipGenerator generator, boolean notify); CategoryURLGenerator getURLGenerator(int row, int column, boolean selected); CategoryURLGenerator getSeriesURLGenerator(int series); void setSeriesURLGenerator(int series, CategoryURLGenerator generator); void setSeriesURLGenerator(int series, CategoryURLGenerator generator, boolean notify); CategoryURLGenerator getBaseURLGenerator(); void setBaseURLGenerator(CategoryURLGenerator generator); void setBaseURLGenerator(CategoryURLGenerator generator, boolean notify); void addAnnotation(CategoryAnnotation annotation); void addAnnotation(CategoryAnnotation annotation, Layer layer); boolean removeAnnotation(CategoryAnnotation annotation); void removeAnnotations(); CategorySeriesLabelGenerator getLegendItemLabelGenerator(); void setLegendItemLabelGenerator( CategorySeriesLabelGenerator generator); CategorySeriesLabelGenerator getLegendItemToolTipGenerator(); void setLegendItemToolTipGenerator( CategorySeriesLabelGenerator generator); CategorySeriesLabelGenerator getLegendItemURLGenerator(); void setLegendItemURLGenerator( CategorySeriesLabelGenerator generator); int getRowCount(); int getColumnCount(); CategoryItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset, PlotRenderingInfo info); Range findRangeBounds(CategoryDataset dataset); double getItemMiddle(Comparable rowKey, Comparable columnKey, CategoryDataset dataset, CategoryAxis axis, Rectangle2D area, RectangleEdge edge); void drawBackground(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea); void drawOutline(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea); void drawDomainLine(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea, double value, Paint paint, Stroke stroke); void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Rectangle2D dataArea, double value, Paint paint, Stroke stroke); void drawDomainMarker(Graphics2D g2, CategoryPlot plot, CategoryAxis axis, CategoryMarker marker, Rectangle2D dataArea); void drawRangeMarker(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Marker marker, Rectangle2D dataArea); LegendItem getLegendItem(int datasetIndex, int series); boolean equals(Object obj); int hashCode(); DrawingSupplier getDrawingSupplier(); void drawAnnotations(Graphics2D g2, Rectangle2D dataArea, CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer, PlotRenderingInfo info); Object clone(); LegendItemCollection getLegendItems(); Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state); Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state, Rectangle2D result); boolean hitTest(double xx, double yy, Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state); }