{"identifier": "drawRangeMarker", "parameters": "(Graphics2D g2,\n                                CategoryPlot plot,\n                                ValueAxis axis,\n                                Marker marker,\n                                Rectangle2D dataArea)", "modifiers": "public", "return": "void", "body": "public void drawRangeMarker(Graphics2D g2,\n                                CategoryPlot plot,\n                                ValueAxis axis,\n                                Marker marker,\n                                Rectangle2D dataArea) {\n\n        if (marker instanceof ValueMarker) {\n            ValueMarker vm = (ValueMarker) marker;\n            double value = vm.getValue();\n            Range range = axis.getRange();\n\n            if (!range.contains(value)) {\n                return;\n            }\n\n            final Composite savedComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n            PlotOrientation orientation = plot.getOrientation();\n            double v = axis.valueToJava2D(value, dataArea,\n                    plot.getRangeAxisEdge());\n            Line2D line = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                line = new Line2D.Double(v, dataArea.getMinY(), v,\n                        dataArea.getMaxY());\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                line = new Line2D.Double(dataArea.getMinX(), v,\n                        dataArea.getMaxX(), v);\n            }\n\n            g2.setPaint(marker.getPaint());\n            g2.setStroke(marker.getStroke());\n            g2.draw(line);\n\n            String label = marker.getLabel();\n            RectangleAnchor anchor = marker.getLabelAnchor();\n            if (label != null) {\n                Font labelFont = marker.getLabelFont();\n                g2.setFont(labelFont);\n                g2.setPaint(marker.getLabelPaint());\n                Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\n                        g2, orientation, dataArea, line.getBounds2D(),\n                        marker.getLabelOffset(), LengthAdjustmentType.EXPAND,\n                        anchor);\n                TextUtilities.drawAlignedString(label, g2,\n                        (float) coordinates.getX(), (float) coordinates.getY(),\n                        marker.getLabelTextAnchor());\n            }\n            g2.setComposite(savedComposite);\n        }\n        else if (marker instanceof IntervalMarker) {\n            IntervalMarker im = (IntervalMarker) marker;\n            double start = im.getStartValue();\n            double end = im.getEndValue();\n            Range range = axis.getRange();\n            if (!(range.intersects(start, end))) {\n                return;\n            }\n\n            final Composite savedComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(\n                    AlphaComposite.SRC_OVER, marker.getAlpha()));\n\n            double start2d = axis.valueToJava2D(start, dataArea,\n                    plot.getRangeAxisEdge());\n            double end2d = axis.valueToJava2D(end, dataArea,\n                    plot.getRangeAxisEdge());\n            double low = Math.min(start2d, end2d);\n            double high = Math.max(start2d, end2d);\n\n            PlotOrientation orientation = plot.getOrientation();\n            Rectangle2D rect = null;\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                // clip left and right bounds to data area\n                low = Math.max(low, dataArea.getMinX());\n                high = Math.min(high, dataArea.getMaxX());\n                rect = new Rectangle2D.Double(low,\n                        dataArea.getMinY(), high - low,\n                        dataArea.getHeight());\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                // clip top and bottom bounds to data area\n                low = Math.max(low, dataArea.getMinY());\n                high = Math.min(high, dataArea.getMaxY());\n                rect = new Rectangle2D.Double(dataArea.getMinX(),\n                        low, dataArea.getWidth(),\n                        high - low);\n            }\n            Paint p = marker.getPaint();\n            if (p instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) p;\n                GradientPaintTransformer t = im.getGradientPaintTransformer();\n                if (t != null) {\n                    gp = t.transform(gp, rect);\n                }\n                g2.setPaint(gp);\n            }\n            else {\n                g2.setPaint(p);\n            }\n            g2.fill(rect);\n\n            // now draw the outlines, if visible...\n            if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {\n                if (orientation == PlotOrientation.VERTICAL) {\n                    Line2D line = new Line2D.Double();\n                    double x0 = dataArea.getMinX();\n                    double x1 = dataArea.getMaxX();\n                    g2.setPaint(im.getOutlinePaint());\n                    g2.setStroke(im.getOutlineStroke());\n                    if (range.contains(start)) {\n                        line.setLine(x0, start2d, x1, start2d);\n                        g2.draw(line);\n                    }\n                    if (range.contains(end)) {\n                        line.setLine(x0, end2d, x1, end2d);\n                        g2.draw(line);\n                    }\n                }\n                else { // PlotOrientation.HORIZONTAL\n                    Line2D line = new Line2D.Double();\n                    double y0 = dataArea.getMinY();\n                    double y1 = dataArea.getMaxY();\n                    g2.setPaint(im.getOutlinePaint());\n                    g2.setStroke(im.getOutlineStroke());\n                    if (range.contains(start)) {\n                        line.setLine(start2d, y0, start2d, y1);\n                        g2.draw(line);\n                    }\n                    if (range.contains(end)) {\n                        line.setLine(end2d, y0, end2d, y1);\n                        g2.draw(line);\n                    }\n                }\n            }\n\n            String label = marker.getLabel();\n            RectangleAnchor anchor = marker.getLabelAnchor();\n            if (label != null) {\n                Font labelFont = marker.getLabelFont();\n                g2.setFont(labelFont);\n                g2.setPaint(marker.getLabelPaint());\n                Point2D coordinates = calculateRangeMarkerTextAnchorPoint(\n                        g2, orientation, dataArea, rect,\n                        marker.getLabelOffset(), marker.getLabelOffsetType(),\n                        anchor);\n                TextUtilities.drawAlignedString(label, g2,\n                        (float) coordinates.getX(), (float) coordinates.getY(),\n                        marker.getLabelTextAnchor());\n            }\n            g2.setComposite(savedComposite);\n        }\n    }", "class": "AbstractCategoryItemRenderer", "signature": "void drawRangeMarker(Graphics2D g2,\n                                CategoryPlot plot,\n                                ValueAxis axis,\n                                Marker marker,\n                                Rectangle2D dataArea)", "full_signature": "public void drawRangeMarker(Graphics2D g2,\n                                CategoryPlot plot,\n                                ValueAxis axis,\n                                Marker marker,\n                                Rectangle2D dataArea)", "class_method_signature": "AbstractCategoryItemRenderer.drawRangeMarker(Graphics2D g2,\n                                CategoryPlot plot,\n                                ValueAxis axis,\n                                Marker marker,\n                                Rectangle2D dataArea)", "testcase": false, "constructor": false, "invocations": ["getValue", "getRange", "contains", "getComposite", "setComposite", "getInstance", "getAlpha", "getOrientation", "valueToJava2D", "getRangeAxisEdge", "getMinY", "getMaxY", "getMinX", "getMaxX", "setPaint", "getPaint", "setStroke", "getStroke", "draw", "getLabel", "getLabelAnchor", "getLabelFont", "setFont", "setPaint", "getLabelPaint", "calculateRangeMarkerTextAnchorPoint", "getBounds2D", "getLabelOffset", "drawAlignedString", "getX", "getY", "getLabelTextAnchor", "setComposite", "getStartValue", "getEndValue", "getRange", "intersects", "getComposite", "setComposite", "getInstance", "getAlpha", "valueToJava2D", "getRangeAxisEdge", "valueToJava2D", "getRangeAxisEdge", "min", "max", "getOrientation", "max", "getMinX", "min", "getMaxX", "getMinY", "getHeight", "max", "getMinY", "min", "getMaxY", "getMinX", "getWidth", "getPaint", "getGradientPaintTransformer", "transform", "setPaint", "setPaint", "fill", "getOutlinePaint", "getOutlineStroke", "getMinX", "getMaxX", "setPaint", "getOutlinePaint", "setStroke", "getOutlineStroke", "contains", "setLine", "draw", "contains", "setLine", "draw", "getMinY", "getMaxY", "setPaint", "getOutlinePaint", "setStroke", "getOutlineStroke", "contains", "setLine", "draw", "contains", "setLine", "draw", "getLabel", "getLabelAnchor", "getLabelFont", "setFont", "setPaint", "getLabelPaint", "calculateRangeMarkerTextAnchorPoint", "getLabelOffset", "getLabelOffsetType", "drawAlignedString", "getX", "getY", "getLabelTextAnchor", "setComposite"]}