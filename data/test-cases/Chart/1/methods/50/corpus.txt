AbstractCategoryItemRenderer extends AbstractRenderer implements CategoryItemRenderer, Cloneable, PublicCloneable, Serializable { public Object clone() throws CloneNotSupportedException { AbstractCategoryItemRenderer clone = (AbstractCategoryItemRenderer) super.clone(); if (this.itemLabelGeneratorList != null) { clone.itemLabelGeneratorList = (ObjectList) this.itemLabelGeneratorList.clone(); } if (this.baseItemLabelGenerator != null) { if (this.baseItemLabelGenerator instanceof PublicCloneable) { PublicCloneable pc = (PublicCloneable) this.baseItemLabelGenerator; clone.baseItemLabelGenerator = (CategoryItemLabelGenerator) pc.clone(); } else { throw new CloneNotSupportedException( "ItemLabelGenerator not cloneable."); } } if (this.toolTipGeneratorList != null) { clone.toolTipGeneratorList = (ObjectList) this.toolTipGeneratorList.clone(); } if (this.baseToolTipGenerator != null) { if (this.baseToolTipGenerator instanceof PublicCloneable) { PublicCloneable pc = (PublicCloneable) this.baseToolTipGenerator; clone.baseToolTipGenerator = (CategoryToolTipGenerator) pc.clone(); } else { throw new CloneNotSupportedException( "Base tool tip generator not cloneable."); } } if (this.urlGeneratorList != null) { clone.urlGeneratorList = (ObjectList) this.urlGeneratorList.clone(); } if (this.baseURLGenerator != null) { if (this.baseURLGenerator instanceof PublicCloneable) { PublicCloneable pc = (PublicCloneable) this.baseURLGenerator; clone.baseURLGenerator = (CategoryURLGenerator) pc.clone(); } else { throw new CloneNotSupportedException( "Base item URL generator not cloneable."); } } if (this.legendItemLabelGenerator instanceof PublicCloneable) { clone.legendItemLabelGenerator = (CategorySeriesLabelGenerator) ObjectUtilities.clone(this.legendItemLabelGenerator); } if (this.legendItemToolTipGenerator instanceof PublicCloneable) { clone.legendItemToolTipGenerator = (CategorySeriesLabelGenerator) ObjectUtilities.clone(this.legendItemToolTipGenerator); } if (this.legendItemURLGenerator instanceof PublicCloneable) { clone.legendItemURLGenerator = (CategorySeriesLabelGenerator) ObjectUtilities.clone(this.legendItemURLGenerator); } return clone; } protected AbstractCategoryItemRenderer(); int getPassCount(); CategoryPlot getPlot(); void setPlot(CategoryPlot plot); CategoryItemLabelGenerator getItemLabelGenerator(int row, int column, boolean selected); CategoryItemLabelGenerator getSeriesItemLabelGenerator(int series); void setSeriesItemLabelGenerator(int series, CategoryItemLabelGenerator generator); void setSeriesItemLabelGenerator(int series, CategoryItemLabelGenerator generator, boolean notify); CategoryItemLabelGenerator getBaseItemLabelGenerator(); void setBaseItemLabelGenerator( CategoryItemLabelGenerator generator); void setBaseItemLabelGenerator( CategoryItemLabelGenerator generator, boolean notify); CategoryToolTipGenerator getToolTipGenerator(int row, int column, boolean selected); CategoryToolTipGenerator getSeriesToolTipGenerator(int series); void setSeriesToolTipGenerator(int series, CategoryToolTipGenerator generator); void setSeriesToolTipGenerator(int series, CategoryToolTipGenerator generator, boolean notify); CategoryToolTipGenerator getBaseToolTipGenerator(); void setBaseToolTipGenerator(CategoryToolTipGenerator generator); void setBaseToolTipGenerator(CategoryToolTipGenerator generator, boolean notify); CategoryURLGenerator getURLGenerator(int row, int column, boolean selected); CategoryURLGenerator getSeriesURLGenerator(int series); void setSeriesURLGenerator(int series, CategoryURLGenerator generator); void setSeriesURLGenerator(int series, CategoryURLGenerator generator, boolean notify); CategoryURLGenerator getBaseURLGenerator(); void setBaseURLGenerator(CategoryURLGenerator generator); void setBaseURLGenerator(CategoryURLGenerator generator, boolean notify); void addAnnotation(CategoryAnnotation annotation); void addAnnotation(CategoryAnnotation annotation, Layer layer); boolean removeAnnotation(CategoryAnnotation annotation); void removeAnnotations(); CategorySeriesLabelGenerator getLegendItemLabelGenerator(); void setLegendItemLabelGenerator( CategorySeriesLabelGenerator generator); CategorySeriesLabelGenerator getLegendItemToolTipGenerator(); void setLegendItemToolTipGenerator( CategorySeriesLabelGenerator generator); CategorySeriesLabelGenerator getLegendItemURLGenerator(); void setLegendItemURLGenerator( CategorySeriesLabelGenerator generator); int getRowCount(); int getColumnCount(); CategoryItemRendererState initialise(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryDataset dataset, PlotRenderingInfo info); Range findRangeBounds(CategoryDataset dataset); double getItemMiddle(Comparable rowKey, Comparable columnKey, CategoryDataset dataset, CategoryAxis axis, Rectangle2D area, RectangleEdge edge); void drawBackground(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea); void drawOutline(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea); void drawDomainLine(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea, double value, Paint paint, Stroke stroke); void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Rectangle2D dataArea, double value, Paint paint, Stroke stroke); void drawDomainMarker(Graphics2D g2, CategoryPlot plot, CategoryAxis axis, CategoryMarker marker, Rectangle2D dataArea); void drawRangeMarker(Graphics2D g2, CategoryPlot plot, ValueAxis axis, Marker marker, Rectangle2D dataArea); LegendItem getLegendItem(int datasetIndex, int series); boolean equals(Object obj); int hashCode(); DrawingSupplier getDrawingSupplier(); void drawAnnotations(Graphics2D g2, Rectangle2D dataArea, CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer, PlotRenderingInfo info); Object clone(); LegendItemCollection getLegendItems(); Shape createHotSpotShape(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state); Rectangle2D createHotSpotBounds(Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state, Rectangle2D result); boolean hitTest(double xx, double yy, Graphics2D g2, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, boolean selected, CategoryItemRendererState state); }