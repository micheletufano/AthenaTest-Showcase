CategoryPlot extends Plot implements ValueAxisPlot, Zoomable, RendererChangeListener, Cloneable, PublicCloneable, Serializable { public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof CategoryPlot)) { return false; } if (!super.equals(obj)) { return false; } CategoryPlot that = (CategoryPlot) obj; if (this.orientation != that.orientation) { return false; } if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) { return false; } if (!this.domainAxes.equals(that.domainAxes)) { return false; } if (!this.domainAxisLocations.equals(that.domainAxisLocations)) { return false; } if (this.drawSharedDomainAxis != that.drawSharedDomainAxis) { return false; } if (!this.rangeAxes.equals(that.rangeAxes)) { return false; } if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) { return false; } if (!ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) { return false; } if (!ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) { return false; } if (!ObjectUtilities.equal(this.renderers, that.renderers)) { return false; } if (this.renderingOrder != that.renderingOrder) { return false; } if (this.columnRenderingOrder != that.columnRenderingOrder) { return false; } if (this.rowRenderingOrder != that.rowRenderingOrder) { return false; } if (this.domainGridlinesVisible != that.domainGridlinesVisible) { return false; } if (this.domainGridlinePosition != that.domainGridlinePosition) { return false; } if (!ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) { return false; } if (!PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) { return false; } if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) { return false; } if (!ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) { return false; } if (!PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) { return false; } if (this.anchorValue != that.anchorValue) { return false; } if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) { return false; } if (this.rangeCrosshairValue != that.rangeCrosshairValue) { return false; } if (!ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) { return false; } if (!PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) { return false; } if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) { return false; } if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.annotations, that.annotations)) { return false; } if (this.weight != that.weight) { return false; } if (!ObjectUtilities.equal(this.fixedDomainAxisSpace, that.fixedDomainAxisSpace)) { return false; } if (!ObjectUtilities.equal(this.fixedRangeAxisSpace, that.fixedRangeAxisSpace)) { return false; } return true; } CategoryPlot(); CategoryPlot(CategoryDataset dataset, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryItemRenderer renderer); String getPlotType(); PlotOrientation getOrientation(); void setOrientation(PlotOrientation orientation); RectangleInsets getAxisOffset(); void setAxisOffset(RectangleInsets offset); CategoryAxis getDomainAxis(); CategoryAxis getDomainAxis(int index); void setDomainAxis(CategoryAxis axis); void setDomainAxis(int index, CategoryAxis axis); void setDomainAxis(int index, CategoryAxis axis, boolean notify); void setDomainAxes(CategoryAxis[] axes); int getDomainAxisIndex(CategoryAxis axis); AxisLocation getDomainAxisLocation(); AxisLocation getDomainAxisLocation(int index); void setDomainAxisLocation(AxisLocation location); void setDomainAxisLocation(AxisLocation location, boolean notify); void setDomainAxisLocation(int index, AxisLocation location); void setDomainAxisLocation(int index, AxisLocation location, boolean notify); RectangleEdge getDomainAxisEdge(); RectangleEdge getDomainAxisEdge(int index); int getDomainAxisCount(); void clearDomainAxes(); void configureDomainAxes(); ValueAxis getRangeAxis(); ValueAxis getRangeAxis(int index); void setRangeAxis(ValueAxis axis); void setRangeAxis(int index, ValueAxis axis); void setRangeAxis(int index, ValueAxis axis, boolean notify); void setRangeAxes(ValueAxis[] axes); int getRangeAxisIndex(ValueAxis axis); AxisLocation getRangeAxisLocation(); AxisLocation getRangeAxisLocation(int index); void setRangeAxisLocation(AxisLocation location); void setRangeAxisLocation(AxisLocation location, boolean notify); void setRangeAxisLocation(int index, AxisLocation location); void setRangeAxisLocation(int index, AxisLocation location, boolean notify); RectangleEdge getRangeAxisEdge(); RectangleEdge getRangeAxisEdge(int index); int getRangeAxisCount(); void clearRangeAxes(); void configureRangeAxes(); CategoryDataset getDataset(); CategoryDataset getDataset(int index); void setDataset(CategoryDataset dataset); void setDataset(int index, CategoryDataset dataset); int getDatasetCount(); void mapDatasetToDomainAxis(int index, int axisIndex); CategoryAxis getDomainAxisForDataset(int index); void mapDatasetToRangeAxis(int index, int axisIndex); ValueAxis getRangeAxisForDataset(int index); CategoryItemRenderer getRenderer(); CategoryItemRenderer getRenderer(int index); void setRenderer(CategoryItemRenderer renderer); void setRenderer(CategoryItemRenderer renderer, boolean notify); void setRenderer(int index, CategoryItemRenderer renderer); void setRenderer(int index, CategoryItemRenderer renderer, boolean notify); void setRenderers(CategoryItemRenderer[] renderers); CategoryItemRenderer getRendererForDataset(CategoryDataset dataset); int getIndexOf(CategoryItemRenderer renderer); DatasetRenderingOrder getDatasetRenderingOrder(); void setDatasetRenderingOrder(DatasetRenderingOrder order); SortOrder getColumnRenderingOrder(); void setColumnRenderingOrder(SortOrder order); SortOrder getRowRenderingOrder(); void setRowRenderingOrder(SortOrder order); boolean isDomainGridlinesVisible(); void setDomainGridlinesVisible(boolean visible); CategoryAnchor getDomainGridlinePosition(); void setDomainGridlinePosition(CategoryAnchor position); Stroke getDomainGridlineStroke(); void setDomainGridlineStroke(Stroke stroke); Paint getDomainGridlinePaint(); void setDomainGridlinePaint(Paint paint); boolean isRangeGridlinesVisible(); void setRangeGridlinesVisible(boolean visible); Stroke getRangeGridlineStroke(); void setRangeGridlineStroke(Stroke stroke); Paint getRangeGridlinePaint(); void setRangeGridlinePaint(Paint paint); LegendItemCollection getFixedLegendItems(); void setFixedLegendItems(LegendItemCollection items); LegendItemCollection getLegendItems(); void handleClick(int x, int y, PlotRenderingInfo info); void zoom(double percent); void datasetChanged(DatasetChangeEvent event); void rendererChanged(RendererChangeEvent event); void addDomainMarker(CategoryMarker marker); void addDomainMarker(CategoryMarker marker, Layer layer); void addDomainMarker(int index, CategoryMarker marker, Layer layer); void clearDomainMarkers(); Collection getDomainMarkers(Layer layer); Collection getDomainMarkers(int index, Layer layer); void clearDomainMarkers(int index); void addRangeMarker(Marker marker); void addRangeMarker(Marker marker, Layer layer); void addRangeMarker(int index, Marker marker, Layer layer); void clearRangeMarkers(); Collection getRangeMarkers(Layer layer); Collection getRangeMarkers(int index, Layer layer); void clearRangeMarkers(int index); boolean isRangeCrosshairVisible(); void setRangeCrosshairVisible(boolean flag); boolean isRangeCrosshairLockedOnData(); void setRangeCrosshairLockedOnData(boolean flag); double getRangeCrosshairValue(); void setRangeCrosshairValue(double value); void setRangeCrosshairValue(double value, boolean notify); Stroke getRangeCrosshairStroke(); void setRangeCrosshairStroke(Stroke stroke); Paint getRangeCrosshairPaint(); void setRangeCrosshairPaint(Paint paint); List getAnnotations(); void addAnnotation(CategoryAnnotation annotation); boolean removeAnnotation(CategoryAnnotation annotation); void clearAnnotations(); void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo state); void drawBackground(Graphics2D g2, Rectangle2D area); boolean render(Graphics2D g2, Rectangle2D dataArea, int index, PlotRenderingInfo info); Range getDataRange(ValueAxis axis); int getWeight(); void setWeight(int weight); AxisSpace getFixedDomainAxisSpace(); void setFixedDomainAxisSpace(AxisSpace space); AxisSpace getFixedRangeAxisSpace(); void setFixedRangeAxisSpace(AxisSpace space); List getCategories(); List getCategoriesForAxis(CategoryAxis axis); boolean getDrawSharedDomainAxis(); void setDrawSharedDomainAxis(boolean draw); boolean isDomainZoomable(); boolean isRangeZoomable(); void zoomDomainAxes(double factor, PlotRenderingInfo state, Point2D source); void zoomDomainAxes(double lowerPercent, double upperPercent, PlotRenderingInfo state, Point2D source); void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor); void zoomRangeAxes(double factor, PlotRenderingInfo state, Point2D source); void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor); void zoomRangeAxes(double lowerPercent, double upperPercent, PlotRenderingInfo state, Point2D source); double getAnchorValue(); void setAnchorValue(double value); void setAnchorValue(double value, boolean notify); boolean equals(Object obj); Object clone(); static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE; static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE; static final Stroke DEFAULT_GRIDLINE_STROKE; static final Paint DEFAULT_GRIDLINE_PAINT; static final Font DEFAULT_VALUE_LABEL_FONT; static final boolean DEFAULT_CROSSHAIR_VISIBLE; static final Stroke DEFAULT_CROSSHAIR_STROKE; static final Paint DEFAULT_CROSSHAIR_PAINT; }