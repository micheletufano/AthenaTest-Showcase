{"identifier": "addDomainMarker", "parameters": "(int index, CategoryMarker marker, Layer layer,\n    \t\tboolean notify)", "modifiers": "public", "return": "void", "body": "public void addDomainMarker(int index, CategoryMarker marker, Layer layer,\n    \t\tboolean notify) {\n        if (marker == null) {\n            throw new IllegalArgumentException(\"Null 'marker' not permitted.\");\n        }\n        if (layer == null) {\n            throw new IllegalArgumentException(\"Null 'layer' not permitted.\");\n        }\n        Collection markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (Collection) this.foregroundDomainMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.foregroundDomainMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);\n        }\n        else if (layer == Layer.BACKGROUND) {\n            markers = (Collection) this.backgroundDomainMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.backgroundDomainMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);            \n        }\n        marker.addChangeListener(this);\n        if (notify) {\n            fireChangeEvent();\n        }\n    }", "class": "CategoryPlot", "signature": "void addDomainMarker(int index, CategoryMarker marker, Layer layer,\n    \t\tboolean notify)", "full_signature": "public void addDomainMarker(int index, CategoryMarker marker, Layer layer,\n    \t\tboolean notify)", "class_method_signature": "CategoryPlot.addDomainMarker(int index, CategoryMarker marker, Layer layer,\n    \t\tboolean notify)", "testcase": false, "constructor": false, "invocations": ["get", "put", "add", "get", "put", "add", "addChangeListener", "fireChangeEvent"]}