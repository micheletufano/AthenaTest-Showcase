{"identifier": "equals", "parameters": "(Object obj)", "modifiers": "public", "return": "boolean", "body": "public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof PiePlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        PiePlot that = (PiePlot) obj;\n        if (this.pieIndex != that.pieIndex) {\n            return false;\n        }\n        if (this.interiorGap != that.interiorGap) {\n            return false;\n        }\n        if (this.circular != that.circular) {\n            return false;\n        }\n        if (this.startAngle != that.startAngle) {\n            return false;\n        }\n        if (this.direction != that.direction) {\n            return false;\n        }\n        if (this.ignoreZeroValues != that.ignoreZeroValues) {\n            return false;\n        }\n        if (this.ignoreNullValues != that.ignoreNullValues) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.sectionPaintMap, \n                that.sectionPaintMap)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.baseSectionPaint, \n                that.baseSectionPaint)) {\n            return false;\n        }\n        if (this.sectionOutlinesVisible != that.sectionOutlinesVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.sectionOutlinePaintMap, \n                that.sectionOutlinePaintMap)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(\n            this.baseSectionOutlinePaint, that.baseSectionOutlinePaint\n        )) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.sectionOutlineStrokeMap, \n                that.sectionOutlineStrokeMap)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(\n            this.baseSectionOutlineStroke, that.baseSectionOutlineStroke\n        )) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) {\n            return false;\n        }\n        if (!(this.shadowXOffset == that.shadowXOffset)) {\n            return false;\n        }\n        if (!(this.shadowYOffset == that.shadowYOffset)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.explodePercentages, \n                that.explodePercentages)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelGenerator, \n                that.labelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelBackgroundPaint, \n                that.labelBackgroundPaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelOutlinePaint, \n                that.labelOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelOutlineStroke, \n                that.labelOutlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelShadowPaint, \n                that.labelShadowPaint)) {\n            return false;\n        }\n        if (this.simpleLabels != that.simpleLabels) {\n            return false;\n        }\n        if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) {\n            return false;\n        }\n        if (!this.labelPadding.equals(that.labelPadding)) {\n            return false;\n        }\n        if (!(this.maximumLabelWidth == that.maximumLabelWidth)) {\n            return false;\n        }\n        if (!(this.labelGap == that.labelGap)) {\n            return false;\n        }\n        if (!(this.labelLinkMargin == that.labelLinkMargin)) {\n            return false;\n        }\n        if (this.labelLinksVisible != that.labelLinksVisible) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelLinkStroke, \n                that.labelLinkStroke)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.toolTipGenerator, \n                that.toolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) {\n            return false;\n        }\n        if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw)) {\n            return false;\n        }\n        if (!ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendLabelGenerator, \n                that.legendLabelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendLabelToolTipGenerator,\n                that.legendLabelToolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendLabelURLGenerator,\n                that.legendLabelURLGenerator)) {\n            return false;\n        }\n        // can't find any difference...\n        return true;\n    }", "class": "PiePlot", "signature": "boolean equals(Object obj)", "full_signature": "public boolean equals(Object obj)", "class_method_signature": "PiePlot.equals(Object obj)", "testcase": false, "constructor": false, "invocations": ["equals", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equals", "equals", "equal", "equal", "equal", "equal", "equal", "equal", "equal", "equal"]}