PiePlot extends Plot implements Cloneable, Serializable { public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof PiePlot)) { return false; } if (!super.equals(obj)) { return false; } PiePlot that = (PiePlot) obj; if (this.pieIndex != that.pieIndex) { return false; } if (this.interiorGap != that.interiorGap) { return false; } if (this.circular != that.circular) { return false; } if (this.startAngle != that.startAngle) { return false; } if (this.direction != that.direction) { return false; } if (this.ignoreZeroValues != that.ignoreZeroValues) { return false; } if (this.ignoreNullValues != that.ignoreNullValues) { return false; } if (!ObjectUtilities.equal(this.sectionPaintMap, that.sectionPaintMap)) { return false; } if (!PaintUtilities.equal(this.baseSectionPaint, that.baseSectionPaint)) { return false; } if (this.sectionOutlinesVisible != that.sectionOutlinesVisible) { return false; } if (!ObjectUtilities.equal(this.sectionOutlinePaintMap, that.sectionOutlinePaintMap)) { return false; } if (!PaintUtilities.equal( this.baseSectionOutlinePaint, that.baseSectionOutlinePaint )) { return false; } if (!ObjectUtilities.equal(this.sectionOutlineStrokeMap, that.sectionOutlineStrokeMap)) { return false; } if (!ObjectUtilities.equal( this.baseSectionOutlineStroke, that.baseSectionOutlineStroke )) { return false; } if (!PaintUtilities.equal(this.shadowPaint, that.shadowPaint)) { return false; } if (!(this.shadowXOffset == that.shadowXOffset)) { return false; } if (!(this.shadowYOffset == that.shadowYOffset)) { return false; } if (!ObjectUtilities.equal(this.explodePercentages, that.explodePercentages)) { return false; } if (!ObjectUtilities.equal(this.labelGenerator, that.labelGenerator)) { return false; } if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) { return false; } if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) { return false; } if (!PaintUtilities.equal(this.labelBackgroundPaint, that.labelBackgroundPaint)) { return false; } if (!PaintUtilities.equal(this.labelOutlinePaint, that.labelOutlinePaint)) { return false; } if (!ObjectUtilities.equal(this.labelOutlineStroke, that.labelOutlineStroke)) { return false; } if (!PaintUtilities.equal(this.labelShadowPaint, that.labelShadowPaint)) { return false; } if (this.simpleLabels != that.simpleLabels) { return false; } if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) { return false; } if (!this.labelPadding.equals(that.labelPadding)) { return false; } if (!(this.maximumLabelWidth == that.maximumLabelWidth)) { return false; } if (!(this.labelGap == that.labelGap)) { return false; } if (!(this.labelLinkMargin == that.labelLinkMargin)) { return false; } if (this.labelLinksVisible != that.labelLinksVisible) { return false; } if (!PaintUtilities.equal(this.labelLinkPaint, that.labelLinkPaint)) { return false; } if (!ObjectUtilities.equal(this.labelLinkStroke, that.labelLinkStroke)) { return false; } if (!ObjectUtilities.equal(this.toolTipGenerator, that.toolTipGenerator)) { return false; } if (!ObjectUtilities.equal(this.urlGenerator, that.urlGenerator)) { return false; } if (!(this.minimumArcAngleToDraw == that.minimumArcAngleToDraw)) { return false; } if (!ShapeUtilities.equal(this.legendItemShape, that.legendItemShape)) { return false; } if (!ObjectUtilities.equal(this.legendLabelGenerator, that.legendLabelGenerator)) { return false; } if (!ObjectUtilities.equal(this.legendLabelToolTipGenerator, that.legendLabelToolTipGenerator)) { return false; } if (!ObjectUtilities.equal(this.legendLabelURLGenerator, that.legendLabelURLGenerator)) { return false; } return true; } PiePlot(); PiePlot(PieDataset dataset); PieDataset getDataset(); void setDataset(PieDataset dataset); int getPieIndex(); void setPieIndex(int index); double getStartAngle(); void setStartAngle(double angle); Rotation getDirection(); void setDirection(Rotation direction); double getInteriorGap(); void setInteriorGap(double percent); boolean isCircular(); void setCircular(boolean flag); void setCircular(boolean circular, boolean notify); boolean getIgnoreNullValues(); void setIgnoreNullValues(boolean flag); boolean getIgnoreZeroValues(); void setIgnoreZeroValues(boolean flag); Paint getSectionPaint(Comparable key); void setSectionPaint(Comparable key, Paint paint); Paint getBaseSectionPaint(); void setBaseSectionPaint(Paint paint); boolean getSectionOutlinesVisible(); void setSectionOutlinesVisible(boolean visible); Paint getSectionOutlinePaint(Comparable key); void setSectionOutlinePaint(Comparable key, Paint paint); Paint getBaseSectionOutlinePaint(); void setBaseSectionOutlinePaint(Paint paint); Stroke getSectionOutlineStroke(Comparable key); void setSectionOutlineStroke(Comparable key, Stroke stroke); Stroke getBaseSectionOutlineStroke(); void setBaseSectionOutlineStroke(Stroke stroke); Paint getShadowPaint(); void setShadowPaint(Paint paint); double getShadowXOffset(); void setShadowXOffset(double offset); double getShadowYOffset(); void setShadowYOffset(double offset); double getExplodePercent(Comparable key); void setExplodePercent(Comparable key, double percent); double getMaximumExplodePercent(); PieSectionLabelGenerator getLabelGenerator(); void setLabelGenerator(PieSectionLabelGenerator generator); double getLabelGap(); void setLabelGap(double gap); double getMaximumLabelWidth(); void setMaximumLabelWidth(double width); boolean getLabelLinksVisible(); void setLabelLinksVisible(boolean visible); double getLabelLinkMargin(); void setLabelLinkMargin(double margin); Paint getLabelLinkPaint(); void setLabelLinkPaint(Paint paint); Stroke getLabelLinkStroke(); void setLabelLinkStroke(Stroke stroke); Font getLabelFont(); void setLabelFont(Font font); Paint getLabelPaint(); void setLabelPaint(Paint paint); Paint getLabelBackgroundPaint(); void setLabelBackgroundPaint(Paint paint); Paint getLabelOutlinePaint(); void setLabelOutlinePaint(Paint paint); Stroke getLabelOutlineStroke(); void setLabelOutlineStroke(Stroke stroke); Paint getLabelShadowPaint(); void setLabelShadowPaint(Paint paint); RectangleInsets getLabelPadding(); void setLabelPadding(RectangleInsets padding); boolean getSimpleLabels(); void setSimpleLabels(boolean simple); RectangleInsets getSimpleLabelOffset(); void setSimpleLabelOffset(RectangleInsets offset); AbstractPieLabelDistributor getLabelDistributor(); void setLabelDistributor(AbstractPieLabelDistributor distributor); PieToolTipGenerator getToolTipGenerator(); void setToolTipGenerator(PieToolTipGenerator generator); PieURLGenerator getURLGenerator(); void setURLGenerator(PieURLGenerator generator); double getMinimumArcAngleToDraw(); void setMinimumArcAngleToDraw(double angle); Shape getLegendItemShape(); void setLegendItemShape(Shape shape); PieSectionLabelGenerator getLegendLabelGenerator(); void setLegendLabelGenerator(PieSectionLabelGenerator generator); PieSectionLabelGenerator getLegendLabelToolTipGenerator(); void setLegendLabelToolTipGenerator( PieSectionLabelGenerator generator); PieURLGenerator getLegendLabelURLGenerator(); void setLegendLabelURLGenerator(PieURLGenerator generator); PiePlotState initialise(Graphics2D g2, Rectangle2D plotArea, PiePlot plot, Integer index, PlotRenderingInfo info); void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info); LegendItemCollection getLegendItems(); String getPlotType(); boolean equals(Object obj); Object clone(); static final double DEFAULT_INTERIOR_GAP; static final double MAX_INTERIOR_GAP; static final double DEFAULT_START_ANGLE; static final Font DEFAULT_LABEL_FONT; static final Paint DEFAULT_LABEL_PAINT; static final Paint DEFAULT_LABEL_BACKGROUND_PAINT; static final Paint DEFAULT_LABEL_OUTLINE_PAINT; static final Stroke DEFAULT_LABEL_OUTLINE_STROKE; static final Paint DEFAULT_LABEL_SHADOW_PAINT; static final double DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW; }