DefaultKeyedValues2D implements KeyedValues2D, PublicCloneable, Cloneable, Serializable { public Number getValue(Comparable rowKey, Comparable columnKey) { if (rowKey == null) { throw new IllegalArgumentException("Null 'rowKey' argument."); } if (columnKey == null) { throw new IllegalArgumentException("Null 'columnKey' argument."); } if (!(this.columnKeys.contains(columnKey))) { throw new UnknownKeyException("Unrecognised columnKey: " + columnKey); } int row = getRowIndex(rowKey); if (row >= 0) { DefaultKeyedValues rowData = (DefaultKeyedValues) this.rows.get(row); int col = rowData.getIndex(columnKey); return (col >= 0 ? rowData.getValue(col) : null); } else { throw new UnknownKeyException("Unrecognised rowKey: " + rowKey); } } DefaultKeyedValues2D(); DefaultKeyedValues2D(boolean sortRowKeys); int getRowCount(); int getColumnCount(); Number getValue(int row, int column); Comparable getRowKey(int row); int getRowIndex(Comparable key); List getRowKeys(); Comparable getColumnKey(int column); int getColumnIndex(Comparable key); List getColumnKeys(); Number getValue(Comparable rowKey, Comparable columnKey); void addValue(Number value, Comparable rowKey, Comparable columnKey); void setValue(Number value, Comparable rowKey, Comparable columnKey); void removeValue(Comparable rowKey, Comparable columnKey); void removeRow(int rowIndex); void removeRow(Comparable rowKey); void removeColumn(int columnIndex); void removeColumn(Comparable columnKey); void clear(); boolean equals(Object o); int hashCode(); Object clone(); }