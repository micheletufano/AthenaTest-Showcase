XYPlot extends Plot implements ValueAxisPlot, Pannable, Selectable, Zoomable, RendererChangeListener, Cloneable, PublicCloneable, Serializable { public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof XYPlot)) { return false; } XYPlot that = (XYPlot) obj; if (this.weight != that.weight) { return false; } if (this.orientation != that.orientation) { return false; } if (!this.domainAxes.equals(that.domainAxes)) { return false; } if (!this.domainAxisLocations.equals(that.domainAxisLocations)) { return false; } if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) { return false; } if (this.domainGridlinesVisible != that.domainGridlinesVisible) { return false; } if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) { return false; } if (this.domainMinorGridlinesVisible != that.domainMinorGridlinesVisible) { return false; } if (this.rangeMinorGridlinesVisible != that.rangeMinorGridlinesVisible) { return false; } if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) { return false; } if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) { return false; } if (this.domainCrosshairVisible != that.domainCrosshairVisible) { return false; } if (this.domainCrosshairValue != that.domainCrosshairValue) { return false; } if (this.domainCrosshairLockedOnData != that.domainCrosshairLockedOnData) { return false; } if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) { return false; } if (this.rangeCrosshairValue != that.rangeCrosshairValue) { return false; } if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) { return false; } if (!ObjectUtilities.equal(this.renderers, that.renderers)) { return false; } if (!ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) { return false; } if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) { return false; } if (!ObjectUtilities.equal(this.datasetToDomainAxesMap, that.datasetToDomainAxesMap)) { return false; } if (!ObjectUtilities.equal(this.datasetToRangeAxesMap, that.datasetToRangeAxesMap)) { return false; } if (!ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) { return false; } if (!PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) { return false; } if (!ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) { return false; } if (!PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) { return false; } if (!ObjectUtilities.equal(this.domainMinorGridlineStroke, that.domainMinorGridlineStroke)) { return false; } if (!PaintUtilities.equal(this.domainMinorGridlinePaint, that.domainMinorGridlinePaint)) { return false; } if (!ObjectUtilities.equal(this.rangeMinorGridlineStroke, that.rangeMinorGridlineStroke)) { return false; } if (!PaintUtilities.equal(this.rangeMinorGridlinePaint, that.rangeMinorGridlinePaint)) { return false; } if (!PaintUtilities.equal(this.domainZeroBaselinePaint, that.domainZeroBaselinePaint)) { return false; } if (!ObjectUtilities.equal(this.domainZeroBaselineStroke, that.domainZeroBaselineStroke)) { return false; } if (!PaintUtilities.equal(this.rangeZeroBaselinePaint, that.rangeZeroBaselinePaint)) { return false; } if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke, that.rangeZeroBaselineStroke)) { return false; } if (!ObjectUtilities.equal(this.domainCrosshairStroke, that.domainCrosshairStroke)) { return false; } if (!PaintUtilities.equal(this.domainCrosshairPaint, that.domainCrosshairPaint)) { return false; } if (!ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) { return false; } if (!PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) { return false; } if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) { return false; } if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) { return false; } if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.annotations, that.annotations)) { return false; } if (!ObjectUtilities.equal(this.fixedLegendItems, that.fixedLegendItems)) { return false; } if (!PaintUtilities.equal(this.domainTickBandPaint, that.domainTickBandPaint)) { return false; } if (!PaintUtilities.equal(this.rangeTickBandPaint, that.rangeTickBandPaint)) { return false; } if (!this.quadrantOrigin.equals(that.quadrantOrigin)) { return false; } for (int i = 0; i < 4; i++) { if (!PaintUtilities.equal(this.quadrantPaint[i], that.quadrantPaint[i])) { return false; } } return super.equals(obj); } XYPlot(); XYPlot(XYDataset dataset, ValueAxis domainAxis, ValueAxis rangeAxis, XYItemRenderer renderer); String getPlotType(); PlotOrientation getOrientation(); void setOrientation(PlotOrientation orientation); RectangleInsets getAxisOffset(); void setAxisOffset(RectangleInsets offset); ValueAxis getDomainAxis(); ValueAxis getDomainAxis(int index); void setDomainAxis(ValueAxis axis); void setDomainAxis(int index, ValueAxis axis); void setDomainAxis(int index, ValueAxis axis, boolean notify); void setDomainAxes(ValueAxis[] axes); AxisLocation getDomainAxisLocation(); void setDomainAxisLocation(AxisLocation location); void setDomainAxisLocation(AxisLocation location, boolean notify); RectangleEdge getDomainAxisEdge(); int getDomainAxisCount(); void clearDomainAxes(); void configureDomainAxes(); AxisLocation getDomainAxisLocation(int index); void setDomainAxisLocation(int index, AxisLocation location); void setDomainAxisLocation(int index, AxisLocation location, boolean notify); RectangleEdge getDomainAxisEdge(int index); ValueAxis getRangeAxis(); void setRangeAxis(ValueAxis axis); AxisLocation getRangeAxisLocation(); void setRangeAxisLocation(AxisLocation location); void setRangeAxisLocation(AxisLocation location, boolean notify); RectangleEdge getRangeAxisEdge(); ValueAxis getRangeAxis(int index); void setRangeAxis(int index, ValueAxis axis); void setRangeAxis(int index, ValueAxis axis, boolean notify); void setRangeAxes(ValueAxis[] axes); int getRangeAxisCount(); void clearRangeAxes(); void configureRangeAxes(); AxisLocation getRangeAxisLocation(int index); void setRangeAxisLocation(int index, AxisLocation location); void setRangeAxisLocation(int index, AxisLocation location, boolean notify); RectangleEdge getRangeAxisEdge(int index); XYDataset getDataset(); XYDataset getDataset(int index); void setDataset(XYDataset dataset); void setDataset(int index, XYDataset dataset); int getDatasetCount(); int indexOf(XYDataset dataset); void mapDatasetToDomainAxis(int index, int axisIndex); void mapDatasetToDomainAxes(int index, List axisIndices); void mapDatasetToRangeAxis(int index, int axisIndex); void mapDatasetToRangeAxes(int index, List axisIndices); int getRendererCount(); XYItemRenderer getRenderer(); XYItemRenderer getRenderer(int index); void setRenderer(XYItemRenderer renderer); void setRenderer(int index, XYItemRenderer renderer); void setRenderer(int index, XYItemRenderer renderer, boolean notify); void setRenderers(XYItemRenderer[] renderers); DatasetRenderingOrder getDatasetRenderingOrder(); void setDatasetRenderingOrder(DatasetRenderingOrder order); SeriesRenderingOrder getSeriesRenderingOrder(); void setSeriesRenderingOrder(SeriesRenderingOrder order); int getIndexOf(XYItemRenderer renderer); XYItemRenderer getRendererForDataset(XYDataset dataset); int getWeight(); void setWeight(int weight); boolean isDomainGridlinesVisible(); void setDomainGridlinesVisible(boolean visible); boolean isDomainMinorGridlinesVisible(); void setDomainMinorGridlinesVisible(boolean visible); Stroke getDomainGridlineStroke(); void setDomainGridlineStroke(Stroke stroke); Stroke getDomainMinorGridlineStroke(); void setDomainMinorGridlineStroke(Stroke stroke); Paint getDomainGridlinePaint(); void setDomainGridlinePaint(Paint paint); Paint getDomainMinorGridlinePaint(); void setDomainMinorGridlinePaint(Paint paint); boolean isRangeGridlinesVisible(); void setRangeGridlinesVisible(boolean visible); Stroke getRangeGridlineStroke(); void setRangeGridlineStroke(Stroke stroke); Paint getRangeGridlinePaint(); void setRangeGridlinePaint(Paint paint); boolean isRangeMinorGridlinesVisible(); void setRangeMinorGridlinesVisible(boolean visible); Stroke getRangeMinorGridlineStroke(); void setRangeMinorGridlineStroke(Stroke stroke); Paint getRangeMinorGridlinePaint(); void setRangeMinorGridlinePaint(Paint paint); boolean isDomainZeroBaselineVisible(); void setDomainZeroBaselineVisible(boolean visible); Stroke getDomainZeroBaselineStroke(); void setDomainZeroBaselineStroke(Stroke stroke); Paint getDomainZeroBaselinePaint(); void setDomainZeroBaselinePaint(Paint paint); boolean isRangeZeroBaselineVisible(); void setRangeZeroBaselineVisible(boolean visible); Stroke getRangeZeroBaselineStroke(); void setRangeZeroBaselineStroke(Stroke stroke); Paint getRangeZeroBaselinePaint(); void setRangeZeroBaselinePaint(Paint paint); Paint getDomainTickBandPaint(); void setDomainTickBandPaint(Paint paint); Paint getRangeTickBandPaint(); void setRangeTickBandPaint(Paint paint); Point2D getQuadrantOrigin(); void setQuadrantOrigin(Point2D origin); Paint getQuadrantPaint(int index); void setQuadrantPaint(int index, Paint paint); void addDomainMarker(Marker marker); void addDomainMarker(Marker marker, Layer layer); void clearDomainMarkers(); void clearDomainMarkers(int index); void addDomainMarker(int index, Marker marker, Layer layer); void addDomainMarker(int index, Marker marker, Layer layer, boolean notify); boolean removeDomainMarker(Marker marker); boolean removeDomainMarker(Marker marker, Layer layer); boolean removeDomainMarker(int index, Marker marker, Layer layer); boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify); void addRangeMarker(Marker marker); void addRangeMarker(Marker marker, Layer layer); void clearRangeMarkers(); void addRangeMarker(int index, Marker marker, Layer layer); void addRangeMarker(int index, Marker marker, Layer layer, boolean notify); void clearRangeMarkers(int index); boolean removeRangeMarker(Marker marker); boolean removeRangeMarker(Marker marker, Layer layer); boolean removeRangeMarker(int index, Marker marker, Layer layer); boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify); void addAnnotation(XYAnnotation annotation); void addAnnotation(XYAnnotation annotation, boolean notify); boolean removeAnnotation(XYAnnotation annotation); boolean removeAnnotation(XYAnnotation annotation, boolean notify); List getAnnotations(); void clearAnnotations(); void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info); void drawBackground(Graphics2D g2, Rectangle2D area); void drawDomainTickBands(Graphics2D g2, Rectangle2D dataArea, List ticks); void drawRangeTickBands(Graphics2D g2, Rectangle2D dataArea, List ticks); boolean render(Graphics2D g2, Rectangle2D dataArea, int index, PlotRenderingInfo info, CrosshairState crosshairState); ValueAxis getDomainAxisForDataset(int index); ValueAxis getRangeAxisForDataset(int index); void drawAnnotations(Graphics2D g2, Rectangle2D dataArea, PlotRenderingInfo info); Collection getDomainMarkers(Layer layer); Collection getRangeMarkers(Layer layer); Collection getDomainMarkers(int index, Layer layer); Collection getRangeMarkers(int index, Layer layer); void handleClick(int x, int y, PlotRenderingInfo info); int getDomainAxisIndex(ValueAxis axis); int getRangeAxisIndex(ValueAxis axis); Range getDataRange(ValueAxis axis); void datasetChanged(DatasetChangeEvent event); void rendererChanged(RendererChangeEvent event); boolean isDomainCrosshairVisible(); void setDomainCrosshairVisible(boolean flag); boolean isDomainCrosshairLockedOnData(); void setDomainCrosshairLockedOnData(boolean flag); double getDomainCrosshairValue(); void setDomainCrosshairValue(double value); void setDomainCrosshairValue(double value, boolean notify); Stroke getDomainCrosshairStroke(); void setDomainCrosshairStroke(Stroke stroke); Paint getDomainCrosshairPaint(); void setDomainCrosshairPaint(Paint paint); boolean isRangeCrosshairVisible(); void setRangeCrosshairVisible(boolean flag); boolean isRangeCrosshairLockedOnData(); void setRangeCrosshairLockedOnData(boolean flag); double getRangeCrosshairValue(); void setRangeCrosshairValue(double value); void setRangeCrosshairValue(double value, boolean notify); Stroke getRangeCrosshairStroke(); void setRangeCrosshairStroke(Stroke stroke); Paint getRangeCrosshairPaint(); void setRangeCrosshairPaint(Paint paint); AxisSpace getFixedDomainAxisSpace(); void setFixedDomainAxisSpace(AxisSpace space); void setFixedDomainAxisSpace(AxisSpace space, boolean notify); AxisSpace getFixedRangeAxisSpace(); void setFixedRangeAxisSpace(AxisSpace space); void setFixedRangeAxisSpace(AxisSpace space, boolean notify); boolean isDomainPannable(); void setDomainPannable(boolean pannable); boolean isRangePannable(); void setRangePannable(boolean pannable); void panDomainAxes(double percent, PlotRenderingInfo info, Point2D source); void panRangeAxes(double percent, PlotRenderingInfo info, Point2D source); void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source); void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor); void zoomDomainAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source); void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source); void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor); void zoomRangeAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source); boolean isDomainZoomable(); boolean isRangeZoomable(); int getSeriesCount(); LegendItemCollection getFixedLegendItems(); void setFixedLegendItems(LegendItemCollection items); LegendItemCollection getLegendItems(); boolean equals(Object obj); Object clone(); boolean canSelectByPoint(); boolean canSelectByRegion(); void select(double x, double y, Rectangle2D dataArea, RenderingSource source); void select(GeneralPath region, Rectangle2D dataArea, RenderingSource source); void clearSelection(); static final Stroke DEFAULT_GRIDLINE_STROKE; static final Paint DEFAULT_GRIDLINE_PAINT; static final boolean DEFAULT_CROSSHAIR_VISIBLE; static final Stroke DEFAULT_CROSSHAIR_STROKE; static final Paint DEFAULT_CROSSHAIR_PAINT; }