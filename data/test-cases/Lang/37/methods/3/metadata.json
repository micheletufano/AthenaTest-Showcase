{"identifier": "toMap", "parameters": "(Object[] array)", "modifiers": "public static", "return": "Map<Object, Object>", "body": "public static Map<Object, Object> toMap(Object[] array) {\n        if (array == null) {\n            return null;\n        }\n        final Map<Object, Object> map = new HashMap<Object, Object>((int) (array.length * 1.5));\n        for (int i = 0; i < array.length; i++) {\n            Object object = array[i];\n            if (object instanceof Map.Entry<?, ?>) {\n                Map.Entry<?,?> entry = (Map.Entry<?,?>) object;\n                map.put(entry.getKey(), entry.getValue());\n            } else if (object instanceof Object[]) {\n                Object[] entry = (Object[]) object;\n                if (entry.length < 2) {\n                    throw new IllegalArgumentException(\"Array element \" + i + \", '\"\n                        + object\n                        + \"', has a length less than 2\");\n                }\n                map.put(entry[0], entry[1]);\n            } else {\n                throw new IllegalArgumentException(\"Array element \" + i + \", '\"\n                        + object\n                        + \"', is neither of type Map.Entry nor an Array\");\n            }\n        }\n        return map;\n    }", "class": "ArrayUtils", "signature": "Map<Object, Object> toMap(Object[] array)", "full_signature": "public static Map<Object, Object> toMap(Object[] array)", "class_method_signature": "ArrayUtils.toMap(Object[] array)", "testcase": false, "constructor": false, "invocations": ["put", "getKey", "getValue", "put"]}