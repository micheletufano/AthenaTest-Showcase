NumberUtils { public static boolean isNumber(final String str) { if (StringUtils.isEmpty(str)) { return false; } final char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false; boolean foundDigit = false; final int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; } for (; i < chars.length; i++) { if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) { return false; } } return true; } sz--; int i = start; while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) { if (chars[i] >= '0' && chars[i] <= '9') { foundDigit = true; allowSigns = false; } else if (chars[i] == '.') { if (hasDecPoint || hasExp) { return false; } hasDecPoint = true; } else if (chars[i] == 'e' || chars[i] == 'E') { if (hasExp) { return false; } if (!foundDigit) { return false; } hasExp = true; allowSigns = true; } else if (chars[i] == '+' || chars[i] == '-') { if (!allowSigns) { return false; } allowSigns = false; foundDigit = false; } else { return false; } i++; } if (i < chars.length) { if (chars[i] >= '0' && chars[i] <= '9') { return true; } if (chars[i] == 'e' || chars[i] == 'E') { return false; } if (chars[i] == '.') { if (hasDecPoint || hasExp) { return false; } return foundDigit; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) { return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') { return foundDigit && !hasExp && !hasDecPoint; } return false; } return !allowSigns && foundDigit; } NumberUtils(); static int toInt(final String str); static int toInt(final String str, final int defaultValue); static long toLong(final String str); static long toLong(final String str, final long defaultValue); static float toFloat(final String str); static float toFloat(final String str, final float defaultValue); static double toDouble(final String str); static double toDouble(final String str, final double defaultValue); static byte toByte(final String str); static byte toByte(final String str, final byte defaultValue); static short toShort(final String str); static short toShort(final String str, final short defaultValue); static Number createNumber(final String str); static Float createFloat(final String str); static Double createDouble(final String str); static Integer createInteger(final String str); static Long createLong(final String str); static BigInteger createBigInteger(final String str); static BigDecimal createBigDecimal(final String str); static long min(final long[] array); static int min(final int[] array); static short min(final short[] array); static byte min(final byte[] array); static double min(final double[] array); static float min(final float[] array); static long max(final long[] array); static int max(final int[] array); static short max(final short[] array); static byte max(final byte[] array); static double max(final double[] array); static float max(final float[] array); static long min(long a, final long b, final long c); static int min(int a, final int b, final int c); static short min(short a, final short b, final short c); static byte min(byte a, final byte b, final byte c); static double min(final double a, final double b, final double c); static float min(final float a, final float b, final float c); static long max(long a, final long b, final long c); static int max(int a, final int b, final int c); static short max(short a, final short b, final short c); static byte max(byte a, final byte b, final byte c); static double max(final double a, final double b, final double c); static float max(final float a, final float b, final float c); static boolean isDigits(final String str); static boolean isNumber(final String str); static final Long LONG_ZERO; static final Long LONG_ONE; static final Long LONG_MINUS_ONE; static final Integer INTEGER_ZERO; static final Integer INTEGER_ONE; static final Integer INTEGER_MINUS_ONE; static final Short SHORT_ZERO; static final Short SHORT_ONE; static final Short SHORT_MINUS_ONE; static final Byte BYTE_ZERO; static final Byte BYTE_ONE; static final Byte BYTE_MINUS_ONE; static final Double DOUBLE_ZERO; static final Double DOUBLE_ONE; static final Double DOUBLE_MINUS_ONE; static final Float FLOAT_ZERO; static final Float FLOAT_ONE; static final Float FLOAT_MINUS_ONE; }