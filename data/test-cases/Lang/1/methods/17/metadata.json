{"identifier": "createBigInteger", "parameters": "(final String str)", "modifiers": "public static", "return": "BigInteger", "body": "public static BigInteger createBigInteger(final String str) {\n        if (str == null) {\n            return null;\n        }\n        int pos = 0; // offset within string\n        int radix = 10;\n        boolean negate = false; // need to negate later?\n        if (str.startsWith(\"-\")) {\n            negate = true;\n            pos = 1;\n        }\n        if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos)) { // hex\n            radix = 16;\n            pos += 2;\n        } else if (str.startsWith(\"#\", pos)) { // alternative hex (allowed by Long/Integer)\n            radix = 16;\n            pos ++;\n        } else if (str.startsWith(\"0\", pos) && str.length() > pos + 1) { // octal; so long as there are additional digits\n            radix = 8;\n            pos ++;\n        } // default is to treat as decimal\n\n        final BigInteger value = new BigInteger(str.substring(pos), radix);\n        return negate ? value.negate() : value;\n    }", "class": "NumberUtils", "signature": "BigInteger createBigInteger(final String str)", "full_signature": "public static BigInteger createBigInteger(final String str)", "class_method_signature": "NumberUtils.createBigInteger(final String str)", "testcase": false, "constructor": false, "invocations": ["startsWith", "startsWith", "startsWith", "startsWith", "startsWith", "length", "substring", "negate"]}