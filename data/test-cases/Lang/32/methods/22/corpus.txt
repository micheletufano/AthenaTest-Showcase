HashCodeBuilder { public HashCodeBuilder append(Object object) { if (object == null) { iTotal = iTotal * iConstant; } else { if(object.getClass().isArray()) { if (object instanceof long[]) { append((long[]) object); } else if (object instanceof int[]) { append((int[]) object); } else if (object instanceof short[]) { append((short[]) object); } else if (object instanceof char[]) { append((char[]) object); } else if (object instanceof byte[]) { append((byte[]) object); } else if (object instanceof double[]) { append((double[]) object); } else if (object instanceof float[]) { append((float[]) object); } else if (object instanceof boolean[]) { append((boolean[]) object); } else { append((Object[]) object); } } else { iTotal = iTotal * iConstant + object.hashCode(); } } return this; } HashCodeBuilder(); HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber); static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object); static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object, boolean testTransients); static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass); static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields); static int reflectionHashCode(Object object); static int reflectionHashCode(Object object, boolean testTransients); static int reflectionHashCode(Object object, Collection<String> excludeFields); static int reflectionHashCode(Object object, String[] excludeFields); HashCodeBuilder append(boolean value); HashCodeBuilder append(boolean[] array); HashCodeBuilder append(byte value); HashCodeBuilder append(byte[] array); HashCodeBuilder append(char value); HashCodeBuilder append(char[] array); HashCodeBuilder append(double value); HashCodeBuilder append(double[] array); HashCodeBuilder append(float value); HashCodeBuilder append(float[] array); HashCodeBuilder append(int value); HashCodeBuilder append(int[] array); HashCodeBuilder append(long value); HashCodeBuilder append(long[] array); HashCodeBuilder append(Object object); HashCodeBuilder append(Object[] array); HashCodeBuilder append(short value); HashCodeBuilder append(short[] array); HashCodeBuilder appendSuper(int superHashCode); int toHashCode(); @Override int hashCode(); }