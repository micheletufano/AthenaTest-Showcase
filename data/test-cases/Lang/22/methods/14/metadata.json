{"identifier": "invert", "parameters": "()", "modifiers": "public", "return": "Fraction", "body": "public Fraction invert() {\n        if (numerator == 0) {\n            throw new ArithmeticException(\"Unable to invert zero.\");\n        }\n        if (numerator==Integer.MIN_VALUE) {\n            throw new ArithmeticException(\"overflow: can't negate numerator\");\n        }\n        if (numerator<0) {\n            return new Fraction(-denominator, -numerator);\n        } else {\n            return new Fraction(denominator, numerator);\n        }\n    }", "class": "Fraction", "signature": "Fraction invert()", "full_signature": "public Fraction invert()", "class_method_signature": "Fraction.invert()", "testcase": false, "constructor": false, "invocations": []}