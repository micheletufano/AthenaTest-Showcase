{"identifier": "toProperString", "parameters": "()", "modifiers": "public", "return": "String", "body": "public String toProperString() {\n        if (toProperString == null) {\n            if (numerator == 0) {\n                toProperString = \"0\";\n            } else if (numerator == denominator) {\n                toProperString = \"1\";\n            } else if (numerator == -1 * denominator) {\n                toProperString = \"-1\";\n            } else if ((numerator>0?-numerator:numerator) < -denominator) {\n                // note that we do the magnitude comparison test above with\n                // NEGATIVE (not positive) numbers, since negative numbers\n                // have a larger range.  otherwise numerator==Integer.MIN_VALUE\n                // is handled incorrectly.\n                int properNumerator = getProperNumerator();\n                if (properNumerator == 0) {\n                    toProperString = Integer.toString(getProperWhole());\n                } else {\n                    toProperString = new StringBuilder(32)\n                        .append(getProperWhole()).append(' ')\n                        .append(properNumerator).append('/')\n                        .append(getDenominator()).toString();\n                }\n            } else {\n                toProperString = new StringBuilder(32)\n                    .append(getNumerator()).append('/')\n                    .append(getDenominator()).toString();\n            }\n        }\n        return toProperString;\n    }", "class": "Fraction", "signature": "String toProperString()", "full_signature": "public String toProperString()", "class_method_signature": "Fraction.toProperString()", "testcase": false, "constructor": false, "invocations": ["getProperNumerator", "toString", "getProperWhole", "toString", "append", "append", "append", "append", "append", "getProperWhole", "getDenominator", "toString", "append", "append", "append", "getNumerator", "getDenominator"]}