{"identifier": "getFraction", "parameters": "(int whole, int numerator, int denominator)", "modifiers": "public static", "return": "Fraction", "body": "public static Fraction getFraction(int whole, int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new ArithmeticException(\"The denominator must not be zero\");\n        }\n        if (denominator < 0) {\n            throw new ArithmeticException(\"The denominator must not be negative\");\n        }\n        if (numerator < 0) {\n            throw new ArithmeticException(\"The numerator must not be negative\");\n        }\n        long numeratorValue;\n        if (whole < 0) {\n            numeratorValue = whole * (long)denominator - numerator;\n        } else {\n            numeratorValue = whole * (long)denominator + numerator;\n        }\n        if (numeratorValue < Integer.MIN_VALUE ||\n                numeratorValue > Integer.MAX_VALUE)  {\n            throw new ArithmeticException(\"Numerator too large to represent as an Integer.\");\n        }\n        return new Fraction((int) numeratorValue, denominator);\n    }", "class": "Fraction", "signature": "Fraction getFraction(int whole, int numerator, int denominator)", "full_signature": "public static Fraction getFraction(int whole, int numerator, int denominator)", "class_method_signature": "Fraction.getFraction(int whole, int numerator, int denominator)", "testcase": false, "constructor": false, "invocations": []}