{"identifier": "getFraction", "parameters": "(int numerator, int denominator)", "modifiers": "public static", "return": "Fraction", "body": "public static Fraction getFraction(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new ArithmeticException(\"The denominator must not be zero\");\n        }\n        if (denominator < 0) {\n            if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE) {\n                throw new ArithmeticException(\"overflow: can't negate\");\n            }\n            numerator = -numerator;\n            denominator = -denominator;\n        }\n        return new Fraction(numerator, denominator);\n    }", "class": "Fraction", "signature": "Fraction getFraction(int numerator, int denominator)", "full_signature": "public static Fraction getFraction(int numerator, int denominator)", "class_method_signature": "Fraction.getFraction(int numerator, int denominator)", "testcase": false, "constructor": false, "invocations": []}