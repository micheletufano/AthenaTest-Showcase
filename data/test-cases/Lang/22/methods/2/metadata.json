{"identifier": "getReducedFraction", "parameters": "(int numerator, int denominator)", "modifiers": "public static", "return": "Fraction", "body": "public static Fraction getReducedFraction(int numerator, int denominator) {\n        if (denominator == 0) {\n            throw new ArithmeticException(\"The denominator must not be zero\");\n        }\n        if (numerator==0) {\n            return ZERO; // normalize zero.\n        }\n        // allow 2^k/-2^31 as a valid fraction (where k>0)\n        if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {\n            numerator/=2; denominator/=2;\n        }\n        if (denominator < 0) {\n            if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE) {\n                throw new ArithmeticException(\"overflow: can't negate\");\n            }\n            numerator = -numerator;\n            denominator = -denominator;\n        }\n        // simplify fraction.\n        int gcd = greatestCommonDivisor(numerator, denominator);\n        numerator /= gcd;\n        denominator /= gcd;\n        return new Fraction(numerator, denominator);\n    }", "class": "Fraction", "signature": "Fraction getReducedFraction(int numerator, int denominator)", "full_signature": "public static Fraction getReducedFraction(int numerator, int denominator)", "class_method_signature": "Fraction.getReducedFraction(int numerator, int denominator)", "testcase": false, "constructor": false, "invocations": ["greatestCommonDivisor"]}