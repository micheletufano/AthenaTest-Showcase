Fraction extends Number implements Comparable<Fraction> { public static Fraction getReducedFraction(int numerator, int denominator) { if (denominator == 0) { throw new ArithmeticException("The denominator must not be zero"); } if (numerator==0) { return ZERO; } if (denominator==Integer.MIN_VALUE && (numerator&1)==0) { numerator/=2; denominator/=2; } if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new ArithmeticException("overflow: can't negate"); } numerator = -numerator; denominator = -denominator; } int gcd = greatestCommonDivisor(numerator, denominator); numerator /= gcd; denominator /= gcd; return new Fraction(numerator, denominator); } private Fraction(int numerator, int denominator); static Fraction getFraction(int numerator, int denominator); static Fraction getFraction(int whole, int numerator, int denominator); static Fraction getReducedFraction(int numerator, int denominator); static Fraction getFraction(double value); static Fraction getFraction(String str); int getNumerator(); int getDenominator(); int getProperNumerator(); int getProperWhole(); @Override int intValue(); @Override long longValue(); @Override float floatValue(); @Override double doubleValue(); Fraction reduce(); Fraction invert(); Fraction negate(); Fraction abs(); Fraction pow(int power); Fraction add(Fraction fraction); Fraction subtract(Fraction fraction); Fraction multiplyBy(Fraction fraction); Fraction divideBy(Fraction fraction); @Override boolean equals(Object obj); @Override int hashCode(); int compareTo(Fraction other); @Override String toString(); String toProperString(); static final Fraction ZERO; static final Fraction ONE; static final Fraction ONE_HALF; static final Fraction ONE_THIRD; static final Fraction TWO_THIRDS; static final Fraction ONE_QUARTER; static final Fraction TWO_QUARTERS; static final Fraction THREE_QUARTERS; static final Fraction ONE_FIFTH; static final Fraction TWO_FIFTHS; static final Fraction THREE_FIFTHS; static final Fraction FOUR_FIFTHS; }