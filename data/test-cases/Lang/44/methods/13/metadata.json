{"identifier": "compare", "parameters": "(double lhs, double rhs)", "modifiers": "public static", "return": "int", "body": "public static int compare(double lhs, double rhs) {\n        if (lhs < rhs) {\n            return -1;\n        }\n        if (lhs > rhs) {\n            return +1;\n        }\n        // Need to compare bits to handle 0.0 == -0.0 being true\n        // compare should put -0.0 < +0.0\n        // Two NaNs are also == for compare purposes\n        // where NaN == NaN is false\n        long lhsBits = Double.doubleToLongBits(lhs);\n        long rhsBits = Double.doubleToLongBits(rhs);\n        if (lhsBits == rhsBits) {\n            return 0;\n        }\n        // Something exotic! A comparison to NaN or 0.0 vs -0.0\n        // Fortunately NaN's long is > than everything else\n        // Also negzeros bits < poszero\n        // NAN: 9221120237041090560\n        // MAX: 9218868437227405311\n        // NEGZERO: -9223372036854775808\n        if (lhsBits < rhsBits) {\n            return -1;\n        } else {\n            return +1;\n        }\n    }", "class": "NumberUtils", "signature": "int compare(double lhs, double rhs)", "full_signature": "public static int compare(double lhs, double rhs)", "class_method_signature": "NumberUtils.compare(double lhs, double rhs)", "testcase": false, "constructor": false, "invocations": ["doubleToLongBits", "doubleToLongBits"]}