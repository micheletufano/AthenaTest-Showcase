{"identifier": "subarray", "parameters": "(T[] array, int startIndexInclusive, int endIndexExclusive)", "modifiers": "public static", "return": "T[]", "body": "public static <T> T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive) {\n        if (array == null) {\n            return null;\n        }\n        if (startIndexInclusive < 0) {\n            startIndexInclusive = 0;\n        }\n        if (endIndexExclusive > array.length) {\n            endIndexExclusive = array.length;\n        }\n        int newSize = endIndexExclusive - startIndexInclusive;\n        Class<?> type = array.getClass().getComponentType();\n        if (newSize <= 0) {\n            @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n            final T[] emptyArray = (T[]) Array.newInstance(type, 0);\n            return emptyArray;\n        }\n        @SuppressWarnings(\"unchecked\") // OK, because array is of type T\n        T[] subarray = (T[]) Array.newInstance(type, newSize);\n        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n        return subarray;\n    }", "class": "ArrayUtils", "signature": "T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive)", "full_signature": "public static T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive)", "class_method_signature": "ArrayUtils.subarray(T[] array, int startIndexInclusive, int endIndexExclusive)", "testcase": false, "constructor": false, "invocations": ["getComponentType", "getClass", "newInstance", "newInstance", "arraycopy"]}