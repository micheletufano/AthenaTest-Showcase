LocaleUtils { public static List<Locale> languagesByCountry(String countryCode) { if (countryCode == null) { return Collections.emptyList(); } List<Locale> langs = cLanguagesByCountry.get(countryCode); if (langs == null) { langs = new ArrayList<Locale>(); List<Locale> locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) { Locale locale = locales.get(i); if (countryCode.equals(locale.getCountry()) && locale.getVariant().isEmpty()) { langs.add(locale); } } langs = Collections.unmodifiableList(langs); cLanguagesByCountry.putIfAbsent(countryCode, langs); langs = cLanguagesByCountry.get(countryCode); } return langs; } LocaleUtils(); static Locale toLocale(final String str); static List<Locale> localeLookupList(Locale locale); static List<Locale> localeLookupList(Locale locale, Locale defaultLocale); static List<Locale> availableLocaleList(); static Set<Locale> availableLocaleSet(); static boolean isAvailableLocale(Locale locale); static List<Locale> languagesByCountry(String countryCode); static List<Locale> countriesByLanguage(String languageCode); }