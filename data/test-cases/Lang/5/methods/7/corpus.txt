LocaleUtils { public static List<Locale> countriesByLanguage(String languageCode) { if (languageCode == null) { return Collections.emptyList(); } List<Locale> countries = cCountriesByLanguage.get(languageCode); if (countries == null) { countries = new ArrayList<Locale>(); List<Locale> locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) { Locale locale = locales.get(i); if (languageCode.equals(locale.getLanguage()) && locale.getCountry().length() != 0 && locale.getVariant().isEmpty()) { countries.add(locale); } } countries = Collections.unmodifiableList(countries); cCountriesByLanguage.putIfAbsent(languageCode, countries); countries = cCountriesByLanguage.get(languageCode); } return countries; } LocaleUtils(); static Locale toLocale(final String str); static List<Locale> localeLookupList(Locale locale); static List<Locale> localeLookupList(Locale locale, Locale defaultLocale); static List<Locale> availableLocaleList(); static Set<Locale> availableLocaleSet(); static boolean isAvailableLocale(Locale locale); static List<Locale> languagesByCountry(String countryCode); static List<Locale> countriesByLanguage(String languageCode); }