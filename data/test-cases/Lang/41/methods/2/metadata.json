{"identifier": "getShortClassName", "parameters": "(String className)", "modifiers": "public static", "return": "String", "body": "public static String getShortClassName(String className) {\n        if (className == null) {\n            return StringUtils.EMPTY;\n        }\n        if (className.length() == 0) {\n            return StringUtils.EMPTY;\n        }\n\n        StringBuffer arrayPrefix = new StringBuffer();\n\n        // Handle array encoding\n        if (className.startsWith(\"[\")) {\n            while (className.charAt(0) == '[') {\n                className = className.substring(1);\n                arrayPrefix.append(\"[]\");\n            }\n            // Strip Object type encoding\n            if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n                className = className.substring(1, className.length() - 1);\n            }\n        }\n\n        if (reverseAbbreviationMap.containsKey(className)) {\n            className = reverseAbbreviationMap.get(className);\n        }\n\n        int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n        int innerIdx = className.indexOf(\n                INNER_CLASS_SEPARATOR_CHAR, lastDotIdx == -1 ? 0 : lastDotIdx + 1);\n        String out = className.substring(lastDotIdx + 1);\n        if (innerIdx != -1) {\n            out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n        }\n        return out + arrayPrefix;\n    }", "class": "ClassUtils", "signature": "String getShortClassName(String className)", "full_signature": "public static String getShortClassName(String className)", "class_method_signature": "ClassUtils.getShortClassName(String className)", "testcase": false, "constructor": false, "invocations": ["length", "startsWith", "charAt", "substring", "append", "charAt", "charAt", "length", "substring", "length", "containsKey", "get", "lastIndexOf", "indexOf", "substring", "replace"]}