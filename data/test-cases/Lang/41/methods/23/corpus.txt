ClassUtils { public static Method getPublicMethod(Class<?> cls, String methodName, Class<?> parameterTypes[]) throws SecurityException, NoSuchMethodException { Method declaredMethod = cls.getMethod(methodName, parameterTypes); if (Modifier.isPublic(declaredMethod.getDeclaringClass().getModifiers())) { return declaredMethod; } List<Class<?>> candidateClasses = new ArrayList<Class<?>>(); candidateClasses.addAll(getAllInterfaces(cls)); candidateClasses.addAll(getAllSuperclasses(cls)); for (Class<?> candidateClass : candidateClasses) { if (!Modifier.isPublic(candidateClass.getModifiers())) { continue; } Method candidateMethod; try { candidateMethod = candidateClass.getMethod(methodName, parameterTypes); } catch (NoSuchMethodException ex) { continue; } if (Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) { return candidateMethod; } } throw new NoSuchMethodException("Can't find a public method for " + methodName + " " + ArrayUtils.toString(parameterTypes)); } ClassUtils(); static String getShortClassName(Object object, String valueIfNull); static String getShortClassName(Class<?> cls); static String getShortClassName(String className); static String getPackageName(Object object, String valueIfNull); static String getPackageName(Class<?> cls); static String getPackageName(String className); static List<Class<?>> getAllSuperclasses(Class<?> cls); static List<Class<?>> getAllInterfaces(Class<?> cls); static List<Class<?>> convertClassNamesToClasses(List<String> classNames); static List<String> convertClassesToClassNames(List<Class<?>> classes); static boolean isAssignable(Class<?>[] classArray, Class<?>[] toClassArray); static boolean isAssignable(Class<?>[] classArray, Class<?>[] toClassArray, boolean autoboxing); static boolean isAssignable(Class<?> cls, Class<?> toClass); static boolean isAssignable(Class<?> cls, Class<?> toClass, boolean autoboxing); static Class<?> primitiveToWrapper(Class<?> cls); static Class<?>[] primitivesToWrappers(Class<?>[] classes); static Class<?> wrapperToPrimitive(Class<?> cls); static Class<?>[] wrappersToPrimitives(Class<?>[] classes); static boolean isInnerClass(Class<?> cls); static Class<?> getClass( ClassLoader classLoader, String className, boolean initialize); static Class<?> getClass(ClassLoader classLoader, String className); static Class<?> getClass(String className); static Class<?> getClass(String className, boolean initialize); static Method getPublicMethod(Class<?> cls, String methodName, Class<?> parameterTypes[]); static Class<?>[] toClass(Object[] array); static String getShortCanonicalName(Object object, String valueIfNull); static String getShortCanonicalName(Class<?> cls); static String getShortCanonicalName(String canonicalName); static String getPackageCanonicalName(Object object, String valueIfNull); static String getPackageCanonicalName(Class<?> cls); static String getPackageCanonicalName(String canonicalName); static final char PACKAGE_SEPARATOR_CHAR; static final String PACKAGE_SEPARATOR; static final char INNER_CLASS_SEPARATOR_CHAR; static final String INNER_CLASS_SEPARATOR; }