{"identifier": "getDateTimeInstance", "parameters": "(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale)", "modifiers": "public static synchronized", "return": "FastDateFormat", "body": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale) {\n\n        Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));\n        if (timeZone != null) {\n            key = new Pair(key, timeZone);\n        }\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n        key = new Pair(key, locale);\n\n        FastDateFormat format = (FastDateFormat) cDateTimeInstanceCache.get(key);\n        if (format == null) {\n            try {\n                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,\n                        locale);\n                String pattern = formatter.toPattern();\n                format = getInstance(pattern, timeZone, locale);\n                cDateTimeInstanceCache.put(key, format);\n\n            } catch (ClassCastException ex) {\n                throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale);\n            }\n        }\n        return format;\n    }", "class": "FastDateFormat", "signature": "FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale)", "full_signature": "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale)", "class_method_signature": "FastDateFormat.getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,\n            Locale locale)", "testcase": false, "constructor": false, "invocations": ["getDefault", "get", "getDateTimeInstance", "toPattern", "getInstance", "put"]}