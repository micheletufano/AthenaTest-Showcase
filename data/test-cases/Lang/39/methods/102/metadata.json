{"identifier": "leftPad", "parameters": "(String str, int size, String padStr)", "modifiers": "public static", "return": "String", "body": "public static String leftPad(String str, int size, String padStr) {\n        if (str == null) {\n            return null;\n        }\n        if (isEmpty(padStr)) {\n            padStr = \" \";\n        }\n        int padLen = padStr.length();\n        int strLen = str.length();\n        int pads = size - strLen;\n        if (pads <= 0) {\n            return str; // returns original String when possible\n        }\n        if (padLen == 1 && pads <= PAD_LIMIT) {\n            return leftPad(str, size, padStr.charAt(0));\n        }\n\n        if (pads == padLen) {\n            return padStr.concat(str);\n        } else if (pads < padLen) {\n            return padStr.substring(0, pads).concat(str);\n        } else {\n            char[] padding = new char[pads];\n            char[] padChars = padStr.toCharArray();\n            for (int i = 0; i < pads; i++) {\n                padding[i] = padChars[i % padLen];\n            }\n            return new String(padding).concat(str);\n        }\n    }", "class": "StringUtils", "signature": "String leftPad(String str, int size, String padStr)", "full_signature": "public static String leftPad(String str, int size, String padStr)", "class_method_signature": "StringUtils.leftPad(String str, int size, String padStr)", "testcase": false, "constructor": false, "invocations": ["isEmpty", "length", "length", "leftPad", "charAt", "concat", "concat", "substring", "toCharArray", "concat"]}