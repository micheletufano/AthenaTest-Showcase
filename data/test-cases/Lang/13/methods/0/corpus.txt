SerializationUtils { public static <T extends Serializable> T clone(T object) { if (object == null) { return null; } byte[] objectData = serialize(object); ByteArrayInputStream bais = new ByteArrayInputStream(objectData); ClassLoaderAwareObjectInputStream in = null; try { in = new ClassLoaderAwareObjectInputStream(bais, object.getClass().getClassLoader()); @SuppressWarnings("unchecked") T readObject = (T) in.readObject(); return readObject; } catch (ClassNotFoundException ex) { throw new SerializationException("ClassNotFoundException while reading cloned object data", ex); } catch (IOException ex) { throw new SerializationException("IOException while reading cloned object data", ex); } finally { try { if (in != null) { in.close(); } } catch (IOException ex) { throw new SerializationException("IOException on closing cloned object data InputStream.", ex); } } } SerializationUtils(); static T clone(T object); static void serialize(Serializable obj, OutputStream outputStream); static byte[] serialize(Serializable obj); static Object deserialize(InputStream inputStream); static Object deserialize(byte[] objectData); }