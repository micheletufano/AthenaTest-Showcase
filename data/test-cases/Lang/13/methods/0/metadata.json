{"identifier": "clone", "parameters": "(T object)", "modifiers": "public static", "return": "T", "body": "public static <T extends Serializable> T clone(T object) {\n        if (object == null) {\n            return null;\n        }\n        byte[] objectData = serialize(object);\n        ByteArrayInputStream bais = new ByteArrayInputStream(objectData);\n\n        ClassLoaderAwareObjectInputStream in = null;\n        try {\n            // stream closed in the finally\n            in = new ClassLoaderAwareObjectInputStream(bais, object.getClass().getClassLoader());\n            /*\n             * when we serialize and deserialize an object,\n             * it is reasonable to assume the deserialized object\n             * is of the same type as the original serialized object\n             */\n            @SuppressWarnings(\"unchecked\") // see above\n            T readObject = (T) in.readObject();\n            return readObject;\n\n        } catch (ClassNotFoundException ex) {\n            throw new SerializationException(\"ClassNotFoundException while reading cloned object data\", ex);\n        } catch (IOException ex) {\n            throw new SerializationException(\"IOException while reading cloned object data\", ex);\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n            } catch (IOException ex) {\n                throw new SerializationException(\"IOException on closing cloned object data InputStream.\", ex);\n            }\n        }\n    }", "class": "SerializationUtils", "signature": "T clone(T object)", "full_signature": "public static T clone(T object)", "class_method_signature": "SerializationUtils.clone(T object)", "testcase": false, "constructor": false, "invocations": ["serialize", "getClassLoader", "getClass", "readObject", "close"]}