LocaleUtils { public static List languagesByCountry(String countryCode) { List langs = (List) cLanguagesByCountry.get(countryCode); if (langs == null) { if (countryCode != null) { langs = new ArrayList(); List locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) { Locale locale = (Locale) locales.get(i); if (countryCode.equals(locale.getCountry()) && locale.getVariant().length() == 0) { langs.add(locale); } } langs = Collections.unmodifiableList(langs); } else { langs = Collections.EMPTY_LIST; } cLanguagesByCountry.put(countryCode, langs); } return langs; } LocaleUtils(); static Locale toLocale(String str); static List localeLookupList(Locale locale); static List localeLookupList(Locale locale, Locale defaultLocale); static List availableLocaleList(); static Set availableLocaleSet(); static boolean isAvailableLocale(Locale locale); static List languagesByCountry(String countryCode); static List countriesByLanguage(String languageCode); }