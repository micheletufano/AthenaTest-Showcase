{"identifier": "getPublicMethod", "parameters": "(Class<?> cls, String methodName, Class<?> parameterTypes[])", "modifiers": "public static", "return": "Method", "body": "public static Method getPublicMethod(Class<?> cls, String methodName, Class<?> parameterTypes[])\n            throws SecurityException, NoSuchMethodException {\n\n        Method declaredMethod = cls.getMethod(methodName, parameterTypes);\n        if (Modifier.isPublic(declaredMethod.getDeclaringClass().getModifiers())) {\n            return declaredMethod;\n        }\n\n        List<Class<?>> candidateClasses = new ArrayList<Class<?>>();\n        candidateClasses.addAll(getAllInterfaces(cls));\n        candidateClasses.addAll(getAllSuperclasses(cls));\n\n        for (Class<?> candidateClass : candidateClasses) {\n            if (!Modifier.isPublic(candidateClass.getModifiers())) {\n                continue;\n            }\n            Method candidateMethod;\n            try {\n                candidateMethod = candidateClass.getMethod(methodName, parameterTypes);\n            } catch (NoSuchMethodException ex) {\n                continue;\n            }\n            if (Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) {\n                return candidateMethod;\n            }\n        }\n\n        throw new NoSuchMethodException(\"Can't find a public method for \" +\n                methodName + \" \" + ArrayUtils.toString(parameterTypes));\n    }", "class": "ClassUtils", "signature": "Method getPublicMethod(Class<?> cls, String methodName, Class<?> parameterTypes[])", "full_signature": "public static Method getPublicMethod(Class<?> cls, String methodName, Class<?> parameterTypes[])", "class_method_signature": "ClassUtils.getPublicMethod(Class<?> cls, String methodName, Class<?> parameterTypes[])", "testcase": false, "constructor": false, "invocations": ["getMethod", "isPublic", "getModifiers", "getDeclaringClass", "addAll", "getAllInterfaces", "addAll", "getAllSuperclasses", "isPublic", "getModifiers", "getMethod", "isPublic", "getModifiers", "getDeclaringClass", "toString"]}