{"identifier": "isAssignable", "parameters": "(Class<?> cls, Class<?> toClass, boolean autoboxing)", "modifiers": "public static", "return": "boolean", "body": "public static boolean isAssignable(Class<?> cls, Class<?> toClass, boolean autoboxing) {\n        if (toClass == null) {\n            return false;\n        }\n        // have to check for null, as isAssignableFrom doesn't\n        if (cls == null) {\n            return !(toClass.isPrimitive());\n        }\n        //autoboxing:\n        if (autoboxing) {\n            if (cls.isPrimitive() && !toClass.isPrimitive()) {\n                cls = primitiveToWrapper(cls);\n                if (cls == null) {\n                    return false;\n                }\n            }\n            if (toClass.isPrimitive() && !cls.isPrimitive()) {\n                cls = wrapperToPrimitive(cls);\n                if (cls == null) {\n                    return false;\n                }\n            }\n        }\n        if (cls.equals(toClass)) {\n            return true;\n        }\n        if (cls.isPrimitive()) {\n            if (toClass.isPrimitive() == false) {\n                return false;\n            }\n            if (Integer.TYPE.equals(cls)) {\n                return Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Long.TYPE.equals(cls)) {\n                return Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Boolean.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Double.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Float.TYPE.equals(cls)) {\n                return Double.TYPE.equals(toClass);\n            }\n            if (Character.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Short.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Byte.TYPE.equals(cls)) {\n                return Short.TYPE.equals(toClass)\n                    || Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            // should never get here\n            return false;\n        }\n        return toClass.isAssignableFrom(cls);\n    }", "class": "ClassUtils", "signature": "boolean isAssignable(Class<?> cls, Class<?> toClass, boolean autoboxing)", "full_signature": "public static boolean isAssignable(Class<?> cls, Class<?> toClass, boolean autoboxing)", "class_method_signature": "ClassUtils.isAssignable(Class<?> cls, Class<?> toClass, boolean autoboxing)", "testcase": false, "constructor": false, "invocations": ["isPrimitive", "isPrimitive", "isPrimitive", "primitiveToWrapper", "isPrimitive", "isPrimitive", "wrapperToPrimitive", "equals", "isPrimitive", "isPrimitive", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "equals", "isAssignableFrom"]}