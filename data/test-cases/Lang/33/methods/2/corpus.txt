ClassUtils { public static String getShortClassName(String className) { if (className == null) { return StringUtils.EMPTY; } if (className.length() == 0) { return StringUtils.EMPTY; } StringBuilder arrayPrefix = new StringBuilder(); if (className.startsWith("[")) { while (className.charAt(0) == '[') { className = className.substring(1); arrayPrefix.append("[]"); } if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') { className = className.substring(1, className.length() - 1); } } if (reverseAbbreviationMap.containsKey(className)) { className = reverseAbbreviationMap.get(className); } int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR); int innerIdx = className.indexOf( INNER_CLASS_SEPARATOR_CHAR, lastDotIdx == -1 ? 0 : lastDotIdx + 1); String out = className.substring(lastDotIdx + 1); if (innerIdx != -1) { out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR); } return out + arrayPrefix; } ClassUtils(); static String getShortClassName(Object object, String valueIfNull); static String getShortClassName(Class<?> cls); static String getShortClassName(String className); static String getPackageName(Object object, String valueIfNull); static String getPackageName(Class<?> cls); static String getPackageName(String className); static List<Class<?>> getAllSuperclasses(Class<?> cls); static List<Class<?>> getAllInterfaces(Class<?> cls); static List<Class<?>> convertClassNamesToClasses(List<String> classNames); static List<String> convertClassesToClassNames(List<Class<?>> classes); static boolean isAssignable(Class<?>[] classArray, Class<?>[] toClassArray); static boolean isAssignable(Class<?>[] classArray, Class<?>[] toClassArray, boolean autoboxing); static boolean isAssignable(Class<?> cls, Class<?> toClass); static boolean isAssignable(Class<?> cls, Class<?> toClass, boolean autoboxing); static Class<?> primitiveToWrapper(Class<?> cls); static Class<?>[] primitivesToWrappers(Class<?>[] classes); static Class<?> wrapperToPrimitive(Class<?> cls); static Class<?>[] wrappersToPrimitives(Class<?>[] classes); static boolean isInnerClass(Class<?> cls); static Class<?> getClass( ClassLoader classLoader, String className, boolean initialize); static Class<?> getClass(ClassLoader classLoader, String className); static Class<?> getClass(String className); static Class<?> getClass(String className, boolean initialize); static Method getPublicMethod(Class<?> cls, String methodName, Class<?> parameterTypes[]); static Class<?>[] toClass(Object[] array); static String getShortCanonicalName(Object object, String valueIfNull); static String getShortCanonicalName(Class<?> cls); static String getShortCanonicalName(String canonicalName); static String getPackageCanonicalName(Object object, String valueIfNull); static String getPackageCanonicalName(Class<?> cls); static String getPackageCanonicalName(String canonicalName); static final char PACKAGE_SEPARATOR_CHAR; static final String PACKAGE_SEPARATOR; static final char INNER_CLASS_SEPARATOR_CHAR; static final String INNER_CLASS_SEPARATOR; }