{"identifier": "getTimeInstance", "parameters": "(int style, TimeZone timeZone, Locale locale)", "modifiers": "public static synchronized", "return": "FastDateFormat", "body": "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale) {\n        Object key = new Integer(style);\n        if (timeZone != null) {\n            key = new Pair(key, timeZone);\n        }\n        if (locale != null) {\n            key = new Pair(key, locale);\n        }\n\n        FastDateFormat format = (FastDateFormat) cTimeInstanceCache.get(key);\n        if (format == null) {\n            if (locale == null) {\n                locale = Locale.getDefault();\n            }\n\n            try {\n                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale);\n                String pattern = formatter.toPattern();\n                format = getInstance(pattern, timeZone, locale);\n                cTimeInstanceCache.put(key, format);\n            \n            } catch (ClassCastException ex) {\n                throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n            }\n        }\n        return format;\n    }", "class": "FastDateFormat", "signature": "FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)", "full_signature": "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)", "class_method_signature": "FastDateFormat.getTimeInstance(int style, TimeZone timeZone, Locale locale)", "testcase": false, "constructor": false, "invocations": ["get", "getDefault", "getTimeInstance", "toPattern", "getInstance", "put"]}