{"identifier": "translate", "parameters": "(CharSequence input, int index, Writer out)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            while(input.charAt(end) != ';') {\n                end++;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }", "class": "NumericEntityUnescaper", "signature": "int translate(CharSequence input, int index, Writer out)", "full_signature": "@Override public int translate(CharSequence input, int index, Writer out)", "class_method_signature": "NumericEntityUnescaper.translate(CharSequence input, int index, Writer out)", "testcase": false, "constructor": false, "invocations": ["charAt", "charAt", "charAt", "charAt", "parseInt", "toString", "subSequence", "parseInt", "toString", "subSequence", "toChars", "write", "write", "write"]}