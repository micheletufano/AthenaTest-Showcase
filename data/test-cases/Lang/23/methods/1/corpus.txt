ExtendedMessageFormat extends MessageFormat { @Override public final void applyPattern(String pattern) { if (registry == null) { super.applyPattern(pattern); toPattern = super.toPattern(); return; } ArrayList<Format> foundFormats = new ArrayList<Format>(); ArrayList<String> foundDescriptions = new ArrayList<String>(); StringBuilder stripCustom = new StringBuilder(pattern.length()); ParsePosition pos = new ParsePosition(0); char[] c = pattern.toCharArray(); int fmtCount = 0; while (pos.getIndex() < pattern.length()) { switch (c[pos.getIndex()]) { case QUOTE: appendQuotedString(pattern, pos, stripCustom, true); break; case START_FE: fmtCount++; seekNonWs(pattern, pos); int start = pos.getIndex(); int index = readArgumentIndex(pattern, next(pos)); stripCustom.append(START_FE).append(index); seekNonWs(pattern, pos); Format format = null; String formatDescription = null; if (c[pos.getIndex()] == START_FMT) { formatDescription = parseFormatDescription(pattern, next(pos)); format = getFormat(formatDescription); if (format == null) { stripCustom.append(START_FMT).append(formatDescription); } } foundFormats.add(format); foundDescriptions.add(format == null ? null : formatDescription); Validate.isTrue(foundFormats.size() == fmtCount); Validate.isTrue(foundDescriptions.size() == fmtCount); if (c[pos.getIndex()] != END_FE) { throw new IllegalArgumentException( "Unreadable format element at position " + start); } default: stripCustom.append(c[pos.getIndex()]); next(pos); } } super.applyPattern(stripCustom.toString()); toPattern = insertFormats(super.toPattern(), foundDescriptions); if (containsElements(foundFormats)) { Format[] origFormats = getFormats(); int i = 0; for (Iterator<Format> it = foundFormats.iterator(); it.hasNext(); i++) { Format f = it.next(); if (f != null) { origFormats[i] = f; } } super.setFormats(origFormats); } } ExtendedMessageFormat(String pattern); ExtendedMessageFormat(String pattern, Locale locale); ExtendedMessageFormat(String pattern, Map<String, ? extends FormatFactory> registry); ExtendedMessageFormat(String pattern, Locale locale, Map<String, ? extends FormatFactory> registry); @Override String toPattern(); @Override final void applyPattern(String pattern); @Override void setFormat(int formatElementIndex, Format newFormat); @Override void setFormatByArgumentIndex(int argumentIndex, Format newFormat); @Override void setFormats(Format[] newFormats); @Override void setFormatsByArgumentIndex(Format[] newFormats); @Override boolean equals(Object obj); @Override int hashCode(); }