StringUtils { public static String[] split(String str, char separatorChar) { return splitWorker(str, separatorChar, false); } StringUtils(); static boolean isEmpty(CharSequence cs); static boolean isNotEmpty(CharSequence cs); static boolean isBlank(CharSequence cs); static boolean isNotBlank(CharSequence cs); static String trim(String str); static String trimToNull(String str); static String trimToEmpty(String str); static String strip(String str); static String stripToNull(String str); static String stripToEmpty(String str); static String strip(String str, String stripChars); static String stripStart(String str, String stripChars); static String stripEnd(String str, String stripChars); static String[] stripAll(String[] strs); static String[] stripAll(String[] strs, String stripChars); static String stripAccents(String input); static boolean equals(CharSequence cs1, CharSequence cs2); static boolean equalsIgnoreCase(String str1, String str2); static int indexOf(String str, char searchChar); static int indexOf(String str, char searchChar, int startPos); static int indexOf(String str, String searchStr); static int indexOf(String str, String searchStr, int startPos); static int ordinalIndexOf(String str, String searchStr, int ordinal); static int indexOfIgnoreCase(String str, String searchStr); static int indexOfIgnoreCase(String str, String searchStr, int startPos); static int lastIndexOf(String str, char searchChar); static int lastIndexOf(String str, char searchChar, int startPos); static int lastIndexOf(String str, String searchStr); static int lastOrdinalIndexOf(String str, String searchStr, int ordinal); static int lastIndexOf(String str, String searchStr, int startPos); static int lastIndexOfIgnoreCase(String str, String searchStr); static int lastIndexOfIgnoreCase(String str, String searchStr, int startPos); static boolean contains(String str, char searchChar); static boolean contains(String str, String searchStr); static boolean containsIgnoreCase(String str, String searchStr); static int indexOfAny(CharSequence cs, char[] searchChars); static int indexOfAny(CharSequence cs, String searchChars); static boolean containsAny(CharSequence cs, char[] searchChars); static boolean containsAny(CharSequence cs, String searchChars); static int indexOfAnyBut(CharSequence cs, char[] searchChars); static int indexOfAnyBut(String str, String searchChars); static boolean containsOnly(CharSequence cs, char[] valid); static boolean containsOnly(CharSequence cs, String validChars); static boolean containsNone(CharSequence cs, char[] invalidChars); static boolean containsNone(CharSequence cs, String invalidChars); static int indexOfAny(String str, String[] searchStrs); static int lastIndexOfAny(String str, String[] searchStrs); static String substring(String str, int start); static String substring(String str, int start, int end); static String left(String str, int len); static String right(String str, int len); static String mid(String str, int pos, int len); static String substringBefore(String str, String separator); static String substringAfter(String str, String separator); static String substringBeforeLast(String str, String separator); static String substringAfterLast(String str, String separator); static String substringBetween(String str, String tag); static String substringBetween(String str, String open, String close); static String[] substringsBetween(String str, String open, String close); static String[] split(String str); static String[] split(String str, char separatorChar); static String[] split(String str, String separatorChars); static String[] split(String str, String separatorChars, int max); static String[] splitByWholeSeparator(String str, String separator); static String[] splitByWholeSeparator( String str, String separator, int max ); static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator); static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator, int max); static String[] splitPreserveAllTokens(String str); static String[] splitPreserveAllTokens(String str, char separatorChar); static String[] splitPreserveAllTokens(String str, String separatorChars); static String[] splitPreserveAllTokens(String str, String separatorChars, int max); static String[] splitByCharacterType(String str); static String[] splitByCharacterTypeCamelCase(String str); static String join(Object[] array); static String join(Object[] array, char separator); static String join(Object[] array, char separator, int startIndex, int endIndex); static String join(Object[] array, String separator); static String join(Object[] array, String separator, int startIndex, int endIndex); static String join(Iterator<?> iterator, char separator); static String join(Iterator<?> iterator, String separator); static String join(Iterable<?> iterable, char separator); static String join(Iterable<?> iterable, String separator); static String deleteWhitespace(String str); static String removeStart(String str, String remove); static String removeStartIgnoreCase(String str, String remove); static String removeEnd(String str, String remove); static String removeEndIgnoreCase(String str, String remove); static String remove(String str, String remove); static String remove(String str, char remove); static String replaceOnce(String text, String searchString, String replacement); static String replace(String text, String searchString, String replacement); static String replace(String text, String searchString, String replacement, int max); static String replaceEach(String text, String[] searchList, String[] replacementList); static String replaceEachRepeatedly(String text, String[] searchList, String[] replacementList); static String replaceChars(String str, char searchChar, char replaceChar); static String replaceChars(String str, String searchChars, String replaceChars); static String overlay(String str, String overlay, int start, int end); static String chomp(String str); static String chomp(String str, String separator); static String chop(String str); static String repeat(String str, int repeat); static String repeat(String str, String separator, int repeat); static String rightPad(String str, int size); static String rightPad(String str, int size, char padChar); static String rightPad(String str, int size, String padStr); static String leftPad(String str, int size); static String leftPad(String str, int size, char padChar); static String leftPad(String str, int size, String padStr); static int length(CharSequence cs); static String center(String str, int size); static String center(String str, int size, char padChar); static String center(String str, int size, String padStr); static String upperCase(String str); static String upperCase(String str, Locale locale); static String lowerCase(String str); static String lowerCase(String str, Locale locale); static String capitalize(CharSequence cs); static String uncapitalize(CharSequence cs); static String swapCase(String str); static int countMatches(String str, String sub); static boolean isAlpha(CharSequence cs); static boolean isAlphaSpace(CharSequence cs); static boolean isAlphanumeric(CharSequence cs); static boolean isAlphanumericSpace(CharSequence cs); static boolean isAsciiPrintable(CharSequence cs); static boolean isNumeric(CharSequence cs); static boolean isNumericSpace(CharSequence cs); static boolean isWhitespace(CharSequence cs); static boolean isAllLowerCase(CharSequence cs); static boolean isAllUpperCase(CharSequence cs); static String defaultString(String str); static String defaultString(String str, String defaultStr); static CharSequence defaultIfEmpty(CharSequence str, CharSequence defaultStr); static String reverse(String str); static String reverseDelimited(String str, char separatorChar); static String abbreviate(String str, int maxWidth); static String abbreviate(String str, int offset, int maxWidth); static String abbreviateMiddle(String str, String middle, int length); static String difference(String str1, String str2); static int indexOfDifference(CharSequence cs1, CharSequence cs2); static int indexOfDifference(CharSequence[] css); static String getCommonPrefix(String[] strs); static int getLevenshteinDistance(CharSequence s, CharSequence t); static boolean startsWith(String str, String prefix); static boolean startsWithIgnoreCase(String str, String prefix); static boolean startsWithAny(String string, String[] searchStrings); static boolean endsWith(String str, String suffix); static boolean endsWithIgnoreCase(String str, String suffix); static final String EMPTY; static final int INDEX_NOT_FOUND; }