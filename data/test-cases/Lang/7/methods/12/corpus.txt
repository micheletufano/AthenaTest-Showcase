NumberUtils { public static Number createNumber(String str) throws NumberFormatException { if (str == null) { return null; } if (StringUtils.isBlank(str)) { throw new NumberFormatException("A blank string is not a valid number"); } if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) { int hexDigits = str.length() - 2; if (str.startsWith("-")) { hexDigits--; } if (hexDigits > 8) { return createLong(str); } return createInteger(str); } char lastChar = str.charAt(str.length() - 1); String mant; String dec; String exp; int decPos = str.indexOf('.'); int expPos = str.indexOf('e') + str.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos || expPos > str.length()) { throw new NumberFormatException(str + " is not a valid number."); } dec = str.substring(decPos + 1, expPos); } else { dec = str.substring(decPos + 1); } mant = str.substring(0, decPos); } else { if (expPos > -1) { if (expPos > str.length()) { throw new NumberFormatException(str + " is not a valid number."); } mant = str.substring(0, expPos); } else { mant = str; } dec = null; } if (!Character.isDigit(lastChar) && lastChar != '.') { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length() - 1); } else { exp = null; } String numeric = str.substring(0, str.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try { return createLong(numeric); } catch (NumberFormatException nfe) { } return createBigInteger(numeric); } throw new NumberFormatException(str + " is not a valid number."); case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } case 'd' : case 'D' : try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) { } try { return createBigDecimal(numeric); } catch (NumberFormatException e) { } default : throw new NumberFormatException(str + " is not a valid number."); } } else { if (expPos > -1 && expPos < str.length() - 1) { exp = str.substring(expPos + 1, str.length()); } else { exp = null; } if (dec == null && exp == null) { try { return createInteger(str); } catch (NumberFormatException nfe) { } try { return createLong(str); } catch (NumberFormatException nfe) { } return createBigInteger(str); } else { boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try { Float f = createFloat(str); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } try { Double d = createDouble(str); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d; } } catch (NumberFormatException nfe) { } return createBigDecimal(str); } } } NumberUtils(); static int toInt(String str); static int toInt(String str, int defaultValue); static long toLong(String str); static long toLong(String str, long defaultValue); static float toFloat(String str); static float toFloat(String str, float defaultValue); static double toDouble(String str); static double toDouble(String str, double defaultValue); static byte toByte(String str); static byte toByte(String str, byte defaultValue); static short toShort(String str); static short toShort(String str, short defaultValue); static Number createNumber(String str); static Float createFloat(String str); static Double createDouble(String str); static Integer createInteger(String str); static Long createLong(String str); static BigInteger createBigInteger(String str); static BigDecimal createBigDecimal(String str); static long min(long[] array); static int min(int[] array); static short min(short[] array); static byte min(byte[] array); static double min(double[] array); static float min(float[] array); static long max(long[] array); static int max(int[] array); static short max(short[] array); static byte max(byte[] array); static double max(double[] array); static float max(float[] array); static long min(long a, long b, long c); static int min(int a, int b, int c); static short min(short a, short b, short c); static byte min(byte a, byte b, byte c); static double min(double a, double b, double c); static float min(float a, float b, float c); static long max(long a, long b, long c); static int max(int a, int b, int c); static short max(short a, short b, short c); static byte max(byte a, byte b, byte c); static double max(double a, double b, double c); static float max(float a, float b, float c); static boolean isDigits(String str); static boolean isNumber(String str); static final Long LONG_ZERO; static final Long LONG_ONE; static final Long LONG_MINUS_ONE; static final Integer INTEGER_ZERO; static final Integer INTEGER_ONE; static final Integer INTEGER_MINUS_ONE; static final Short SHORT_ZERO; static final Short SHORT_ONE; static final Short SHORT_MINUS_ONE; static final Byte BYTE_ZERO; static final Byte BYTE_ONE; static final Byte BYTE_MINUS_ONE; static final Double DOUBLE_ZERO; static final Double DOUBLE_ONE; static final Double DOUBLE_MINUS_ONE; static final Float FLOAT_ZERO; static final Float FLOAT_ONE; static final Float FLOAT_MINUS_ONE; }