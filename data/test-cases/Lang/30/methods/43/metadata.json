{"identifier": "containsNone", "parameters": "(CharSequence cs, char[] searchChars)", "modifiers": "public static", "return": "boolean", "body": "public static boolean containsNone(CharSequence cs, char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return true;\n        }\n        int csLen = cs.length();\n        int csLast = csLen - 1;\n        int searchLen = searchChars.length;\n        int searchLast = searchLen - 1;\n        for (int i = 0; i < csLen; i++) {\n            char ch = cs.charAt(i);\n            for (int j = 0; j < searchLen; j++) {\n                if (searchChars[j] == ch) {\n                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n                            // missing low surrogate, fine, like String.indexOf(String)\n                            return false;\n                        }\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return false;\n                        }\n                    } else {\n                        // ch is in the Basic Multilingual Plane\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }", "class": "StringUtils", "signature": "boolean containsNone(CharSequence cs, char[] searchChars)", "full_signature": "public static boolean containsNone(CharSequence cs, char[] searchChars)", "class_method_signature": "StringUtils.containsNone(CharSequence cs, char[] searchChars)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "isHighSurrogate", "charAt"]}