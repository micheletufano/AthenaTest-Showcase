{"identifier": "getDateInstance", "parameters": "(int style, TimeZone timeZone, Locale locale)", "modifiers": "public static synchronized", "return": "FastDateFormat", "body": "public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) {\n        Object key = Integer.valueOf(style);\n        if (timeZone != null) {\n            key = new Pair(key, timeZone);\n        }\n\n        if (locale == null) {\n            locale = Locale.getDefault();\n        }\n\n        key = new Pair(key, locale);\n\n        FastDateFormat format = cDateInstanceCache.get(key);\n        if (format == null) {\n            try {\n                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);\n                String pattern = formatter.toPattern();\n                format = getInstance(pattern, timeZone, locale);\n                cDateInstanceCache.put(key, format);\n                \n            } catch (ClassCastException ex) {\n                throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n            }\n        }\n        return format;\n    }", "class": "FastDateFormat", "signature": "FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale)", "full_signature": "public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale)", "class_method_signature": "FastDateFormat.getDateInstance(int style, TimeZone timeZone, Locale locale)", "testcase": false, "constructor": false, "invocations": ["valueOf", "getDefault", "get", "getDateInstance", "toPattern", "getInstance", "put"]}