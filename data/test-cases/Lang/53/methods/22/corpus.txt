DateUtils { public static Iterator iterator(Calendar focus, int rangeStyle) { if (focus == null) { throw new IllegalArgumentException("The date must not be null"); } Calendar start = null; Calendar end = null; int startCutoff = Calendar.SUNDAY; int endCutoff = Calendar.SATURDAY; switch (rangeStyle) { case RANGE_MONTH_SUNDAY: case RANGE_MONTH_MONDAY: start = truncate(focus, Calendar.MONTH); end = (Calendar) start.clone(); end.add(Calendar.MONTH, 1); end.add(Calendar.DATE, -1); if (rangeStyle == RANGE_MONTH_MONDAY) { startCutoff = Calendar.MONDAY; endCutoff = Calendar.SUNDAY; } break; case RANGE_WEEK_SUNDAY: case RANGE_WEEK_MONDAY: case RANGE_WEEK_RELATIVE: case RANGE_WEEK_CENTER: start = truncate(focus, Calendar.DATE); end = truncate(focus, Calendar.DATE); switch (rangeStyle) { case RANGE_WEEK_SUNDAY: break; case RANGE_WEEK_MONDAY: startCutoff = Calendar.MONDAY; endCutoff = Calendar.SUNDAY; break; case RANGE_WEEK_RELATIVE: startCutoff = focus.get(Calendar.DAY_OF_WEEK); endCutoff = startCutoff - 1; break; case RANGE_WEEK_CENTER: startCutoff = focus.get(Calendar.DAY_OF_WEEK) - 3; endCutoff = focus.get(Calendar.DAY_OF_WEEK) + 3; break; } break; default: throw new IllegalArgumentException("The range style " + rangeStyle + " is not valid."); } if (startCutoff < Calendar.SUNDAY) { startCutoff += 7; } if (startCutoff > Calendar.SATURDAY) { startCutoff -= 7; } if (endCutoff < Calendar.SUNDAY) { endCutoff += 7; } if (endCutoff > Calendar.SATURDAY) { endCutoff -= 7; } while (start.get(Calendar.DAY_OF_WEEK) != startCutoff) { start.add(Calendar.DATE, -1); } while (end.get(Calendar.DAY_OF_WEEK) != endCutoff) { end.add(Calendar.DATE, 1); } return new DateIterator(start, end); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String[] parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date add(Date date, int calendarField, int amount); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Iterator iterator(Date focus, int rangeStyle); static Iterator iterator(Calendar focus, int rangeStyle); static Iterator iterator(Object focus, int rangeStyle); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; static final int MILLIS_IN_SECOND; static final int MILLIS_IN_MINUTE; static final int MILLIS_IN_HOUR; static final int MILLIS_IN_DAY; }