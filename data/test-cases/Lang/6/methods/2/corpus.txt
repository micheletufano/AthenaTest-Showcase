CharSequenceTranslator { public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException("The Writer must not be null"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) { pos += Character.charCount(Character.codePointAt(input, pt)); } } } abstract int translate(CharSequence input, int index, Writer out); final String translate(CharSequence input); final void translate(CharSequence input, Writer out); final CharSequenceTranslator with(CharSequenceTranslator... translators); static String hex(int codepoint); }