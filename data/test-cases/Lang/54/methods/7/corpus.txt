LocaleUtils { public static List countriesByLanguage(String languageCode) { List countries = (List) cCountriesByLanguage.get(languageCode); if (countries == null) { if (languageCode != null) { countries = new ArrayList(); List locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) { Locale locale = (Locale) locales.get(i); if (languageCode.equals(locale.getLanguage()) && locale.getCountry().length() != 0 && locale.getVariant().length() == 0) { countries.add(locale); } } countries = Collections.unmodifiableList(countries); } else { countries = Collections.EMPTY_LIST; } cCountriesByLanguage.put(languageCode, countries); } return countries; } LocaleUtils(); static Locale toLocale(String str); static List localeLookupList(Locale locale); static List localeLookupList(Locale locale, Locale defaultLocale); static List availableLocaleList(); static Set availableLocaleSet(); static boolean isAvailableLocale(Locale locale); static List languagesByCountry(String countryCode); static List countriesByLanguage(String languageCode); }