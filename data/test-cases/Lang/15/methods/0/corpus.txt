TypeUtils { public static boolean isAssignable(Type type, Type toType) { return isAssignable(type, toType, null); } TypeUtils(); static boolean isAssignable(Type type, Type toType); static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type); static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass); static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls, ParameterizedType superType); static boolean isInstance(Object value, Type type); static Type[] normalizeUpperBounds(Type[] bounds); static Type[] getImplicitBounds(TypeVariable<?> typeVariable); static Type[] getImplicitUpperBounds(WildcardType wildcardType); static Type[] getImplicitLowerBounds(WildcardType wildcardType); static boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns); static Class<?> getRawType(Type type, Type assigningType); static boolean isArrayType(Type type); static Type getArrayComponentType(Type type); }