TypeUtils { public static Class<?> getRawType(Type type, Type assigningType) { if (type instanceof Class<?>) { return (Class<?>) type; } if (type instanceof ParameterizedType) { return getRawType((ParameterizedType) type); } if (type instanceof TypeVariable<?>) { if (assigningType == null) { return null; } Object genericDeclaration = ((TypeVariable<?>) type).getGenericDeclaration(); if (!(genericDeclaration instanceof Class<?>)) { return null; } Map<TypeVariable<?>, Type> typeVarAssigns = getTypeArguments(assigningType, (Class<?>) genericDeclaration); if (typeVarAssigns == null) { return null; } Type typeArgument = typeVarAssigns.get(type); if (typeArgument == null) { return null; } return getRawType(typeArgument, assigningType); } if (type instanceof GenericArrayType) { Class<?> rawComponentType = getRawType(((GenericArrayType) type) .getGenericComponentType(), assigningType); return Array.newInstance(rawComponentType, 0).getClass(); } if (type instanceof WildcardType) { return null; } throw new IllegalArgumentException("unknown type: " + type); } TypeUtils(); static boolean isAssignable(Type type, Type toType); static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type); static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass); static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls, ParameterizedType superType); static boolean isInstance(Object value, Type type); static Type[] normalizeUpperBounds(Type[] bounds); static Type[] getImplicitBounds(TypeVariable<?> typeVariable); static Type[] getImplicitUpperBounds(WildcardType wildcardType); static Type[] getImplicitLowerBounds(WildcardType wildcardType); static boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns); static Class<?> getRawType(Type type, Type assigningType); static boolean isArrayType(Type type); static Type getArrayComponentType(Type type); }