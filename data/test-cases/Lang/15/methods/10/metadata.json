{"identifier": "getRawType", "parameters": "(Type type, Type assigningType)", "modifiers": "public static", "return": "Class<?>", "body": "public static Class<?> getRawType(Type type, Type assigningType) {\n        if (type instanceof Class<?>) {\n            // it is raw, no problem\n            return (Class<?>) type;\n        }\n\n        if (type instanceof ParameterizedType) {\n            // simple enough to get the raw type of a ParameterizedType\n            return getRawType((ParameterizedType) type);\n        }\n\n        if (type instanceof TypeVariable<?>) {\n            if (assigningType == null) {\n                return null;\n            }\n\n            // get the entity declaring this type variable\n            Object genericDeclaration = ((TypeVariable<?>) type).getGenericDeclaration();\n\n            // can't get the raw type of a method- or constructor-declared type\n            // variable\n            if (!(genericDeclaration instanceof Class<?>)) {\n                return null;\n            }\n\n            // get the type arguments for the declaring class/interface based\n            // on the enclosing type\n            Map<TypeVariable<?>, Type> typeVarAssigns = getTypeArguments(assigningType,\n                    (Class<?>) genericDeclaration);\n\n            // enclosingType has to be a subclass (or subinterface) of the\n            // declaring type\n            if (typeVarAssigns == null) {\n                return null;\n            }\n\n            // get the argument assigned to this type variable\n            Type typeArgument = typeVarAssigns.get(type);\n\n            if (typeArgument == null) {\n                return null;\n            }\n\n            // get the argument for this type variable\n            return getRawType(typeArgument, assigningType);\n        }\n\n        if (type instanceof GenericArrayType) {\n            // get raw component type\n            Class<?> rawComponentType = getRawType(((GenericArrayType) type)\n                    .getGenericComponentType(), assigningType);\n\n            // create array type from raw component type and return its class\n            return Array.newInstance(rawComponentType, 0).getClass();\n        }\n\n        // (hand-waving) this is not the method you're looking for\n        if (type instanceof WildcardType) {\n            return null;\n        }\n\n        throw new IllegalArgumentException(\"unknown type: \" + type);\n    }", "class": "TypeUtils", "signature": "Class<?> getRawType(Type type, Type assigningType)", "full_signature": "public static Class<?> getRawType(Type type, Type assigningType)", "class_method_signature": "TypeUtils.getRawType(Type type, Type assigningType)", "testcase": false, "constructor": false, "invocations": ["getRawType", "getGenericDeclaration", "getTypeArguments", "get", "getRawType", "getRawType", "getGenericComponentType", "getClass", "newInstance"]}