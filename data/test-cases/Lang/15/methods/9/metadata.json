{"identifier": "typesSatisfyVariables", "parameters": "(Map<TypeVariable<?>, Type> typeVarAssigns)", "modifiers": "public static", "return": "boolean", "body": "public static boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns) {\n        // all types must be assignable to all the bounds of the their mapped\n        // type variable.\n        for (Map.Entry<TypeVariable<?>, Type> entry : typeVarAssigns.entrySet()) {\n            TypeVariable<?> typeVar = entry.getKey();\n            Type type = entry.getValue();\n\n            for (Type bound : getImplicitBounds(typeVar)) {\n                if (!isAssignable(type, substituteTypeVariables(bound, typeVarAssigns),\n                        typeVarAssigns)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }", "class": "TypeUtils", "signature": "boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns)", "full_signature": "public static boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns)", "class_method_signature": "TypeUtils.typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns)", "testcase": false, "constructor": false, "invocations": ["entrySet", "getKey", "getValue", "getImplicitBounds", "isAssignable", "substituteTypeVariables"]}