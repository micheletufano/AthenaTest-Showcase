TypeUtils { public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls, ParameterizedType superType) { Class<?> superClass = getRawType(superType); if (!isAssignable(cls, superClass)) { return null; } if (cls.equals(superClass)) { return getTypeArguments(superType, superClass, null); } Type midType = getClosestParentType(cls, superClass); if (midType instanceof Class<?>) { return determineTypeArguments((Class<?>) midType, superType); } ParameterizedType midParameterizedType = (ParameterizedType) midType; Class<?> midClass = getRawType(midParameterizedType); Map<TypeVariable<?>, Type> typeVarAssigns = determineTypeArguments(midClass, superType); mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns); return typeVarAssigns; } TypeUtils(); static boolean isAssignable(Type type, Type toType); static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type); static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass); static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls, ParameterizedType superType); static boolean isInstance(Object value, Type type); static Type[] normalizeUpperBounds(Type[] bounds); static Type[] getImplicitBounds(TypeVariable<?> typeVariable); static Type[] getImplicitUpperBounds(WildcardType wildcardType); static Type[] getImplicitLowerBounds(WildcardType wildcardType); static boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns); static Class<?> getRawType(Type type, Type assigningType); static boolean isArrayType(Type type); static Type getArrayComponentType(Type type); }