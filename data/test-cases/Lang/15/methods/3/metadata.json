{"identifier": "determineTypeArguments", "parameters": "(Class<?> cls,\n            ParameterizedType superType)", "modifiers": "public static", "return": "Map<TypeVariable<?>, Type>", "body": "public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls,\n            ParameterizedType superType) {\n        Class<?> superClass = getRawType(superType);\n\n        // compatibility check\n        if (!isAssignable(cls, superClass)) {\n            return null;\n        }\n\n        if (cls.equals(superClass)) {\n            return getTypeArguments(superType, superClass, null);\n        }\n\n        // get the next class in the inheritance hierarchy\n        Type midType = getClosestParentType(cls, superClass);\n\n        // can only be a class or a parameterized type\n        if (midType instanceof Class<?>) {\n            return determineTypeArguments((Class<?>) midType, superType);\n        }\n\n        ParameterizedType midParameterizedType = (ParameterizedType) midType;\n        Class<?> midClass = getRawType(midParameterizedType);\n        // get the type variables of the mid class that map to the type\n        // arguments of the super class\n        Map<TypeVariable<?>, Type> typeVarAssigns = determineTypeArguments(midClass, superType);\n        // map the arguments of the mid type to the class type variables\n        mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns);\n\n        return typeVarAssigns;\n    }", "class": "TypeUtils", "signature": "Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls,\n            ParameterizedType superType)", "full_signature": "public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls,\n            ParameterizedType superType)", "class_method_signature": "TypeUtils.determineTypeArguments(Class<?> cls,\n            ParameterizedType superType)", "testcase": false, "constructor": false, "invocations": ["getRawType", "isAssignable", "equals", "getTypeArguments", "getClosestParentType", "determineTypeArguments", "getRawType", "determineTypeArguments", "mapTypeVariablesToArguments"]}