Fraction extends Number implements Comparable { public static Fraction getFraction(String str) { if (str == null) { throw new IllegalArgumentException("The string must not be null"); } int pos = str.indexOf('.'); if (pos >= 0) { return getFraction(Double.parseDouble(str)); } pos = str.indexOf(' '); if (pos > 0) { int whole = Integer.parseInt(str.substring(0, pos)); str = str.substring(pos + 1); pos = str.indexOf('/'); if (pos < 0) { throw new NumberFormatException("The fraction could not be parsed as the format X Y/Z"); } else { int numer = Integer.parseInt(str.substring(0, pos)); int denom = Integer.parseInt(str.substring(pos + 1)); return getFraction(whole, numer, denom); } } pos = str.indexOf('/'); if (pos < 0) { return getFraction(Integer.parseInt(str), 1); } else { int numer = Integer.parseInt(str.substring(0, pos)); int denom = Integer.parseInt(str.substring(pos + 1)); return getFraction(numer, denom); } } private Fraction(int numerator, int denominator); static Fraction getFraction(int numerator, int denominator); static Fraction getFraction(int whole, int numerator, int denominator); static Fraction getReducedFraction(int numerator, int denominator); static Fraction getFraction(double value); static Fraction getFraction(String str); int getNumerator(); int getDenominator(); int getProperNumerator(); int getProperWhole(); int intValue(); long longValue(); float floatValue(); double doubleValue(); Fraction reduce(); Fraction invert(); Fraction negate(); Fraction abs(); Fraction pow(int power); Fraction add(Fraction fraction); Fraction subtract(Fraction fraction); Fraction multiplyBy(Fraction fraction); Fraction divideBy(Fraction fraction); boolean equals(Object obj); int hashCode(); int compareTo(Object object); String toString(); String toProperString(); static final Fraction ZERO; static final Fraction ONE; static final Fraction ONE_HALF; static final Fraction ONE_THIRD; static final Fraction TWO_THIRDS; static final Fraction ONE_QUARTER; static final Fraction TWO_QUARTERS; static final Fraction THREE_QUARTERS; static final Fraction ONE_FIFTH; static final Fraction TWO_FIFTHS; static final Fraction THREE_FIFTHS; static final Fraction FOUR_FIFTHS; }