{"identifier": "pow", "parameters": "(int power)", "modifiers": "public", "return": "Fraction", "body": "public Fraction pow(int power) {\n        if (power == 1) {\n            return this;\n        } else if (power == 0) {\n            return ONE;\n        } else if (power < 0) {\n            if (power==Integer.MIN_VALUE) { // MIN_VALUE can't be negated.\n                return this.invert().pow(2).pow(-(power/2));\n            }\n            return this.invert().pow(-power);\n        } else {\n            Fraction f = this.multiplyBy(this);\n            if ((power % 2) == 0) { // if even...\n                return f.pow(power/2);\n            } else { // if odd...\n                return f.pow(power/2).multiplyBy(this);\n            }\n        }\n    }", "class": "Fraction", "signature": "Fraction pow(int power)", "full_signature": "public Fraction pow(int power)", "class_method_signature": "Fraction.pow(int power)", "testcase": false, "constructor": false, "invocations": ["pow", "pow", "invert", "pow", "invert", "multiplyBy", "pow", "multiplyBy", "pow"]}