Fraction extends Number implements Comparable { public static Fraction getFraction(double value) { int sign = (value < 0 ? -1 : 1); value = Math.abs(value); if (value > Integer.MAX_VALUE || Double.isNaN(value)) { throw new ArithmeticException ("The value must not be greater than Integer.MAX_VALUE or NaN"); } int wholeNumber = (int) value; value -= wholeNumber; int numer0 = 0; int denom0 = 1; int numer1 = 1; int denom1 = 0; int numer2 = 0; int denom2 = 0; int a1 = (int) value; int a2 = 0; double x1 = 1; double x2 = 0; double y1 = value - a1; double y2 = 0; double delta1, delta2 = Double.MAX_VALUE; double fraction; int i = 1; do { delta1 = delta2; a2 = (int) (x1 / y1); x2 = y1; y2 = x1 - a2 * y1; numer2 = a1 * numer1 + numer0; denom2 = a1 * denom1 + denom0; fraction = (double) numer2 / (double) denom2; delta2 = Math.abs(value - fraction); a1 = a2; x1 = x2; y1 = y2; numer0 = numer1; denom0 = denom1; numer1 = numer2; denom1 = denom2; i++; } while ((delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25)); if (i == 25) { throw new ArithmeticException("Unable to convert double to fraction"); } return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0); } private Fraction(int numerator, int denominator); static Fraction getFraction(int numerator, int denominator); static Fraction getFraction(int whole, int numerator, int denominator); static Fraction getReducedFraction(int numerator, int denominator); static Fraction getFraction(double value); static Fraction getFraction(String str); int getNumerator(); int getDenominator(); int getProperNumerator(); int getProperWhole(); int intValue(); long longValue(); float floatValue(); double doubleValue(); Fraction reduce(); Fraction invert(); Fraction negate(); Fraction abs(); Fraction pow(int power); Fraction add(Fraction fraction); Fraction subtract(Fraction fraction); Fraction multiplyBy(Fraction fraction); Fraction divideBy(Fraction fraction); boolean equals(Object obj); int hashCode(); int compareTo(Object object); String toString(); String toProperString(); static final Fraction ZERO; static final Fraction ONE; static final Fraction ONE_HALF; static final Fraction ONE_THIRD; static final Fraction TWO_THIRDS; static final Fraction ONE_QUARTER; static final Fraction TWO_QUARTERS; static final Fraction THREE_QUARTERS; static final Fraction ONE_FIFTH; static final Fraction TWO_FIFTHS; static final Fraction THREE_FIFTHS; static final Fraction FOUR_FIFTHS; }