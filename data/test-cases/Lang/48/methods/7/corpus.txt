EqualsBuilder { public EqualsBuilder append(Object lhs, Object rhs) { if (isEquals == false) { return this; } if (lhs == rhs) { return this; } if (lhs == null || rhs == null) { this.setEquals(false); return this; } Class lhsClass = lhs.getClass(); if (!lhsClass.isArray()) { if (lhs instanceof java.math.BigDecimal) { isEquals = (((java.math.BigDecimal)lhs).compareTo(rhs) == 0); } else { isEquals = lhs.equals(rhs); } } else if (lhs.getClass() != rhs.getClass()) { this.setEquals(false); } else if (lhs instanceof long[]) { append((long[]) lhs, (long[]) rhs); } else if (lhs instanceof int[]) { append((int[]) lhs, (int[]) rhs); } else if (lhs instanceof short[]) { append((short[]) lhs, (short[]) rhs); } else if (lhs instanceof char[]) { append((char[]) lhs, (char[]) rhs); } else if (lhs instanceof byte[]) { append((byte[]) lhs, (byte[]) rhs); } else if (lhs instanceof double[]) { append((double[]) lhs, (double[]) rhs); } else if (lhs instanceof float[]) { append((float[]) lhs, (float[]) rhs); } else if (lhs instanceof boolean[]) { append((boolean[]) lhs, (boolean[]) rhs); } else { append((Object[]) lhs, (Object[]) rhs); } return this; } EqualsBuilder(); static boolean reflectionEquals(Object lhs, Object rhs); static boolean reflectionEquals(Object lhs, Object rhs, Collection /*String*/ excludeFields); static boolean reflectionEquals(Object lhs, Object rhs, String[] excludeFields); static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients); static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass); static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields); EqualsBuilder appendSuper(boolean superEquals); EqualsBuilder append(Object lhs, Object rhs); EqualsBuilder append(long lhs, long rhs); EqualsBuilder append(int lhs, int rhs); EqualsBuilder append(short lhs, short rhs); EqualsBuilder append(char lhs, char rhs); EqualsBuilder append(byte lhs, byte rhs); EqualsBuilder append(double lhs, double rhs); EqualsBuilder append(float lhs, float rhs); EqualsBuilder append(boolean lhs, boolean rhs); EqualsBuilder append(Object[] lhs, Object[] rhs); EqualsBuilder append(long[] lhs, long[] rhs); EqualsBuilder append(int[] lhs, int[] rhs); EqualsBuilder append(short[] lhs, short[] rhs); EqualsBuilder append(char[] lhs, char[] rhs); EqualsBuilder append(byte[] lhs, byte[] rhs); EqualsBuilder append(double[] lhs, double[] rhs); EqualsBuilder append(float[] lhs, float[] rhs); EqualsBuilder append(boolean[] lhs, boolean[] rhs); boolean isEquals(); }