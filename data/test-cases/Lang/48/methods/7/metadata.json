{"identifier": "append", "parameters": "(Object lhs, Object rhs)", "modifiers": "public", "return": "EqualsBuilder", "body": "public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            if (lhs instanceof java.math.BigDecimal) {\n                isEquals = (((java.math.BigDecimal)lhs).compareTo(rhs) == 0);\n            } else {\n                // The simple case, not an array, just test the element\n                isEquals = lhs.equals(rhs);\n            }\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n            this.setEquals(false);\n        }\n        // 'Switch' on type of array, to dispatch to the correct handler\n        // This handles multi dimensional arrays of the same depth\n        else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n        return this;\n    }", "class": "EqualsBuilder", "signature": "EqualsBuilder append(Object lhs, Object rhs)", "full_signature": "public EqualsBuilder append(Object lhs, Object rhs)", "class_method_signature": "EqualsBuilder.append(Object lhs, Object rhs)", "testcase": false, "constructor": false, "invocations": ["setEquals", "getClass", "isArray", "compareTo", "equals", "getClass", "getClass", "setEquals", "append", "append", "append", "append", "append", "append", "append", "append", "append"]}