{"identifier": "translate", "parameters": "(final CharSequence input, final int index, final Writer out)", "modifiers": "@Override public", "return": "int", "body": "@Override\n    public int translate(final CharSequence input, final int index, final Writer out) throws IOException {\n        int max = longest;\n        if (index + longest > input.length()) {\n            max = input.length() - index;\n        }\n        // descend so as to get a greedy algorithm\n        for (int i = max; i >= shortest; i--) {\n            final CharSequence subSeq = input.subSequence(index, index + i);\n            final CharSequence result = lookupMap.get(subSeq.toString());\n            if (result != null) {\n                out.write(result.toString());\n                return i;\n            }\n        }\n        return 0;\n    }", "class": "LookupTranslator", "signature": "int translate(final CharSequence input, final int index, final Writer out)", "full_signature": "@Override public int translate(final CharSequence input, final int index, final Writer out)", "class_method_signature": "LookupTranslator.translate(final CharSequence input, final int index, final Writer out)", "testcase": false, "constructor": false, "invocations": ["length", "length", "subSequence", "get", "toString", "write", "toString"]}