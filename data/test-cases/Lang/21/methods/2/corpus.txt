DateUtils { public static boolean isSameInstant(Date date1, Date date2) { if (date1 == null || date2 == null) { throw new IllegalArgumentException("The date must not be null"); } return date1.getTime() == date2.getTime(); } DateUtils(); static boolean isSameDay(Date date1, Date date2); static boolean isSameDay(Calendar cal1, Calendar cal2); static boolean isSameInstant(Date date1, Date date2); static boolean isSameInstant(Calendar cal1, Calendar cal2); static boolean isSameLocalTime(Calendar cal1, Calendar cal2); static Date parseDate(String str, String... parsePatterns); static Date parseDateStrictly(String str, String... parsePatterns); static Date addYears(Date date, int amount); static Date addMonths(Date date, int amount); static Date addWeeks(Date date, int amount); static Date addDays(Date date, int amount); static Date addHours(Date date, int amount); static Date addMinutes(Date date, int amount); static Date addSeconds(Date date, int amount); static Date addMilliseconds(Date date, int amount); static Date setYears(Date date, int amount); static Date setMonths(Date date, int amount); static Date setDays(Date date, int amount); static Date setHours(Date date, int amount); static Date setMinutes(Date date, int amount); static Date setSeconds(Date date, int amount); static Date setMilliseconds(Date date, int amount); static Calendar toCalendar(Date date); static Date round(Date date, int field); static Calendar round(Calendar date, int field); static Date round(Object date, int field); static Date truncate(Date date, int field); static Calendar truncate(Calendar date, int field); static Date truncate(Object date, int field); static Date ceiling(Date date, int field); static Calendar ceiling(Calendar date, int field); static Date ceiling(Object date, int field); static Iterator<Calendar> iterator(Date focus, int rangeStyle); static Iterator<Calendar> iterator(Calendar focus, int rangeStyle); static Iterator<?> iterator(Object focus, int rangeStyle); static long getFragmentInMilliseconds(Date date, int fragment); static long getFragmentInSeconds(Date date, int fragment); static long getFragmentInMinutes(Date date, int fragment); static long getFragmentInHours(Date date, int fragment); static long getFragmentInDays(Date date, int fragment); static long getFragmentInMilliseconds(Calendar calendar, int fragment); static long getFragmentInSeconds(Calendar calendar, int fragment); static long getFragmentInMinutes(Calendar calendar, int fragment); static long getFragmentInHours(Calendar calendar, int fragment); static long getFragmentInDays(Calendar calendar, int fragment); static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field); static boolean truncatedEquals(Date date1, Date date2, int field); static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field); static int truncatedCompareTo(Date date1, Date date2, int field); static final TimeZone UTC_TIME_ZONE; static final long MILLIS_PER_SECOND; static final long MILLIS_PER_MINUTE; static final long MILLIS_PER_HOUR; static final long MILLIS_PER_DAY; final static int SEMI_MONTH; final static int RANGE_WEEK_SUNDAY; final static int RANGE_WEEK_MONDAY; final static int RANGE_WEEK_RELATIVE; final static int RANGE_WEEK_CENTER; final static int RANGE_MONTH_SUNDAY; final static int RANGE_MONTH_MONDAY; final static int MODIFY_TRUNCATE; final static int MODIFY_ROUND; final static int MODIFY_CEILING; }