DurationFormatUtils { public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, TimeZone timezone) { long millis = endMillis - startMillis; if (millis < 28 * DateUtils.MILLIS_PER_DAY) { return formatDuration(millis, format, padWithZeros); } Token[] tokens = lexx(format); Calendar start = Calendar.getInstance(timezone); start.setTime(new Date(startMillis)); Calendar end = Calendar.getInstance(timezone); end.setTime(new Date(endMillis)); int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND); int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND); int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE); int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY); int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH); int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH); int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR); while (milliseconds < 0) { milliseconds += 1000; seconds -= 1; } while (seconds < 0) { seconds += 60; minutes -= 1; } while (minutes < 0) { minutes += 60; hours -= 1; } while (hours < 0) { hours += 24; days -= 1; } while (days < 0) { end.add(Calendar.MONTH, -1); days += end.getActualMaximum(Calendar.DAY_OF_MONTH); months -= 1; end.add(Calendar.MONTH, 1); } while (months < 0) { months += 12; years -= 1; } if (!Token.containsTokenWithValue(tokens, y)) { if (Token.containsTokenWithValue(tokens, M)) { months += 12 * years; years = 0; } else { days += 365 * years; years = 0; } } if (!Token.containsTokenWithValue(tokens, M)) { days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR); months = 0; } if (!Token.containsTokenWithValue(tokens, d)) { hours += 24 * days; days = 0; } if (!Token.containsTokenWithValue(tokens, H)) { minutes += 60 * hours; hours = 0; } if (!Token.containsTokenWithValue(tokens, m)) { seconds += 60 * minutes; minutes = 0; } if (!Token.containsTokenWithValue(tokens, s)) { milliseconds += 1000 * seconds; seconds = 0; } return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros); } DurationFormatUtils(); static String formatDurationHMS(long durationMillis); static String formatDurationISO(long durationMillis); static String formatDuration(long durationMillis, String format); static String formatDuration(long durationMillis, String format, boolean padWithZeros); static String formatDurationWords( long durationMillis, boolean suppressLeadingZeroElements, boolean suppressTrailingZeroElements); static String formatPeriodISO(long startMillis, long endMillis); static String formatPeriod(long startMillis, long endMillis, String format); static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, TimeZone timezone); static final String ISO_EXTENDED_FORMAT_PATTERN; }