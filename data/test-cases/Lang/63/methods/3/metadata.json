{"identifier": "formatDuration", "parameters": "(long durationMillis, String format, boolean padWithZeros)", "modifiers": "public static", "return": "String", "body": "public static String formatDuration(long durationMillis, String format, boolean padWithZeros) {\n\n        Token[] tokens = lexx(format);\n\n        int days         = 0;\n        int hours        = 0;\n        int minutes      = 0;\n        int seconds      = 0;\n        int milliseconds = 0;\n        \n        if (Token.containsTokenWithValue(tokens, d) ) {\n            days = (int) (durationMillis / DateUtils.MILLIS_PER_DAY);\n            durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY);\n        }\n        if (Token.containsTokenWithValue(tokens, H) ) {\n            hours = (int) (durationMillis / DateUtils.MILLIS_PER_HOUR);\n            durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR);\n        }\n        if (Token.containsTokenWithValue(tokens, m) ) {\n            minutes = (int) (durationMillis / DateUtils.MILLIS_PER_MINUTE);\n            durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE);\n        }\n        if (Token.containsTokenWithValue(tokens, s) ) {\n            seconds = (int) (durationMillis / DateUtils.MILLIS_PER_SECOND);\n            durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND);\n        }\n        if (Token.containsTokenWithValue(tokens, S) ) {\n            milliseconds = (int) durationMillis;\n        }\n\n        return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros);\n    }", "class": "DurationFormatUtils", "signature": "String formatDuration(long durationMillis, String format, boolean padWithZeros)", "full_signature": "public static String formatDuration(long durationMillis, String format, boolean padWithZeros)", "class_method_signature": "DurationFormatUtils.formatDuration(long durationMillis, String format, boolean padWithZeros)", "testcase": false, "constructor": false, "invocations": ["lexx", "containsTokenWithValue", "containsTokenWithValue", "containsTokenWithValue", "containsTokenWithValue", "containsTokenWithValue", "format"]}