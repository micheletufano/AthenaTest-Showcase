{"identifier": "withPattern", "parameters": "(final String pattern)", "modifiers": "public", "return": "void", "body": "public void withPattern(final String pattern) {\n        int sz = pattern.length();\n\n        char opt = ' ';\n        char ch = ' ';\n        char type = ' ';\n        boolean required = false;\n\n        for (int i = 0; i < sz; i++) {\n            ch = pattern.charAt(i);\n\n            switch (ch) {\n                case '!' :\n                    required = true;\n                    break;\n                case '@' :\n                case ':' :\n                case '%' :\n                case '+' :\n                case '#' :\n                case '<' :\n                case '>' :\n                case '*' :\n                case '/' :\n                    type = ch;\n                    break;\n                default :\n                    if (opt != ' ') {\n                        createOption(type, required, opt);\n                        required = false;\n                        type = ' ';\n                    }\n\n                    opt = ch;\n            }\n        }\n\n        if (opt != ' ') {\n            createOption(type, required, opt);\n        }\n    }", "class": "PatternBuilder", "signature": "void withPattern(final String pattern)", "full_signature": "public void withPattern(final String pattern)", "class_method_signature": "PatternBuilder.withPattern(final String pattern)", "testcase": false, "constructor": false, "invocations": ["length", "charAt", "createOption", "createOption"]}