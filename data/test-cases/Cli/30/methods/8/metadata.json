{"identifier": "processArgs", "parameters": "(Option opt, ListIterator iter)", "modifiers": "public", "return": "void", "body": "public void processArgs(Option opt, ListIterator iter) throws ParseException\n    {\n        // loop until an option is found\n        while (iter.hasNext())\n        {\n            String str = (String) iter.next();\n\n            // found an Option, not an argument\n            if (getOptions().hasOption(str) && str.startsWith(\"-\"))\n            {\n                iter.previous();\n                break;\n            }\n\n            // found a value\n            try\n            {\n                opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));\n            }\n            catch (RuntimeException exp)\n            {\n                iter.previous();\n                break;\n            }\n        }\n\n        if (opt.getValues() == null && !opt.hasOptionalArg())\n        {\n            throw new MissingArgumentException(opt);\n        }\n    }", "class": "Parser", "signature": "void processArgs(Option opt, ListIterator iter)", "full_signature": "public void processArgs(Option opt, ListIterator iter)", "class_method_signature": "Parser.processArgs(Option opt, ListIterator iter)", "testcase": false, "constructor": false, "invocations": ["hasNext", "next", "hasOption", "getOptions", "startsWith", "previous", "addValueForProcessing", "stripLeadingAndTrailingQuotes", "previous", "getValues", "hasOptionalArg"]}