{"identifier": "appendUsage", "parameters": "(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp,\n                            final String separator)", "modifiers": "public", "return": "void", "body": "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp,\n                            final String separator) {\n        final Set helpSettingsCopy = new HashSet(helpSettings);\n\n        final boolean optional =\n            (minimum == 0) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL);\n\n        final boolean expanded =\n            (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED);\n\n        final boolean named =\n            !expanded ||\n            ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME));\n\n        final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);\n\n        final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);\n\n        helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);\n\n        final boolean both = named && expanded;\n\n        if (optional) {\n            buffer.append('[');\n        }\n\n        if (named) {\n            buffer.append(name);\n        }\n\n        if (both) {\n            buffer.append(\" (\");\n        }\n\n        if (expanded) {\n            final Set childSettings;\n\n            if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) {\n                childSettings = DisplaySetting.NONE;\n            } else {\n                childSettings = new HashSet(helpSettingsCopy);\n                childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL);\n            }\n\n            // grab a list of the group's options.\n            final List list;\n\n            if (comp == null) {\n                // default to using the initial order\n                list = options;\n            } else {\n                // sort options if comparator is supplied\n                list = new ArrayList(options);\n                Collections.sort(list, comp);\n            }\n\n            // for each option.\n            for (final Iterator i = list.iterator(); i.hasNext();) {\n                final Option option = (Option) i.next();\n\n                // append usage information\n                option.appendUsage(buffer, childSettings, comp);\n\n                // add separators as needed\n                if (i.hasNext()) {\n                    buffer.append(separator);\n                }\n            }\n        }\n\n        if (both) {\n            buffer.append(')');\n        }\n\n        if (optional && outer) {\n            buffer.append(']');\n        }\n\n        if (arguments) {\n            for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n                buffer.append(' ');\n\n                final Option option = (Option) i.next();\n                option.appendUsage(buffer, helpSettingsCopy, comp);\n            }\n        }\n\n        if (optional && !outer) {\n            buffer.append(']');\n        }\n    }", "class": "GroupImpl", "signature": "void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp,\n                            final String separator)", "full_signature": "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp,\n                            final String separator)", "class_method_signature": "GroupImpl.appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp,\n                            final String separator)", "testcase": false, "constructor": false, "invocations": ["contains", "contains", "contains", "contains", "contains", "remove", "append", "append", "append", "contains", "remove", "sort", "iterator", "hasNext", "next", "appendUsage", "hasNext", "append", "append", "append", "iterator", "hasNext", "append", "next", "appendUsage", "append"]}