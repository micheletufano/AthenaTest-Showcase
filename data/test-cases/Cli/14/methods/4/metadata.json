{"identifier": "validate", "parameters": "(final WriteableCommandLine commandLine)", "modifiers": "public", "return": "void", "body": "public void validate(final WriteableCommandLine commandLine)\n        throws OptionException {\n        // number of options found\n        int present = 0;\n\n        // reference to first unexpected option\n        Option unexpected = null;\n\n        for (final Iterator i = options.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n\n            // needs validation?\n            boolean validate = option.isRequired() || option instanceof Group;\n\n            // if the child option is present then validate it\n            if (commandLine.hasOption(option)) {\n                if (++present > maximum) {\n                    unexpected = option;\n\n                    break;\n                }\n                validate = true;\n            }\n\n            if (validate) {\n                option.validate(commandLine);\n            }\n        }\n\n        // too many options\n        if (unexpected != null) {\n            throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());\n        }\n\n        // too few option\n        if (present < minimum) {\n            throw new OptionException(this, ResourceConstants.MISSING_OPTION);\n        }\n\n        // validate each anonymous argument\n        for (final Iterator i = anonymous.iterator(); i.hasNext();) {\n            final Option option = (Option) i.next();\n            option.validate(commandLine);\n        }\n    }", "class": "GroupImpl", "signature": "void validate(final WriteableCommandLine commandLine)", "full_signature": "public void validate(final WriteableCommandLine commandLine)", "class_method_signature": "GroupImpl.validate(final WriteableCommandLine commandLine)", "testcase": false, "constructor": false, "invocations": ["iterator", "hasNext", "next", "isRequired", "hasOption", "validate", "getPreferredName", "iterator", "hasNext", "next", "validate"]}