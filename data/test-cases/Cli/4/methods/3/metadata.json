{"identifier": "parse", "parameters": "(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)", "modifiers": "public", "return": "CommandLine", "body": "public CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)\n        throws ParseException\n    {\n        // initialise members\n        this.options = options;\n\n        // clear out the data in options in case it's been used before (CLI-71)\n        for (Iterator it = options.helpOptions().iterator(); it.hasNext();) {\n            Option opt = (Option) it.next();\n            opt.clearValues();\n        }\n\n        requiredOptions = options.getRequiredOptions();\n        cmd = new CommandLine();\n\n        boolean eatTheRest = false;\n\n        if (arguments == null)\n        {\n            arguments = new String[0];\n        }\n\n        List tokenList = Arrays.asList(flatten(this.options, \n                                               arguments, \n                                               stopAtNonOption));\n\n        ListIterator iterator = tokenList.listIterator();\n\n        // process each flattened token\n        while (iterator.hasNext())\n        {\n            String t = (String) iterator.next();\n\n            // the value is the double-dash\n            if (\"--\".equals(t))\n            {\n                eatTheRest = true;\n            }\n\n            // the value is a single dash\n            else if (\"-\".equals(t))\n            {\n                if (stopAtNonOption)\n                {\n                    eatTheRest = true;\n                }\n                else\n                {\n                    cmd.addArg(t);\n                }\n            }\n\n            // the value is an option\n            else if (t.startsWith(\"-\"))\n            {\n                if (stopAtNonOption && !options.hasOption(t))\n                {\n                    eatTheRest = true;\n                    cmd.addArg(t);\n                }\n                else\n                {\n                    processOption(t, iterator);\n                }\n            }\n\n            // the value is an argument\n            else\n            {\n                cmd.addArg(t);\n\n                if (stopAtNonOption)\n                {\n                    eatTheRest = true;\n                }\n            }\n\n            // eat the remaining tokens\n            if (eatTheRest)\n            {\n                while (iterator.hasNext())\n                {\n                    String str = (String) iterator.next();\n\n                    // ensure only one double-dash is added\n                    if (!\"--\".equals(str))\n                    {\n                        cmd.addArg(str);\n                    }\n                }\n            }\n        }\n\n        processProperties(properties);\n        checkRequiredOptions();\n\n        return cmd;\n    }", "class": "Parser", "signature": "CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)", "full_signature": "public CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)", "class_method_signature": "Parser.parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)", "testcase": false, "constructor": false, "invocations": ["iterator", "helpOptions", "hasNext", "next", "clearValues", "getRequiredOptions", "asList", "flatten", "listIterator", "hasNext", "next", "equals", "equals", "addArg", "startsWith", "hasOption", "addArg", "processOption", "addArg", "hasNext", "next", "equals", "addArg", "processProperties", "checkRequiredOptions"]}