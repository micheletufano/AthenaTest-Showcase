Parser implements CommandLineParser { public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if ("--".equals(t)) { eatTheRest = true; } else if ("-".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith("-")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!"--".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); return cmd; } CommandLine parse(Options options, String[] arguments); CommandLine parse(Options options, String[] arguments, Properties properties); CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption); CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption); void processArgs(Option opt, ListIterator iter); }