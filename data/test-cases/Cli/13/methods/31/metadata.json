{"identifier": "appendUsage", "parameters": "(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp)", "modifiers": "public", "return": "void", "body": "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp) {\n        // do we display the outer optionality\n        final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);\n\n        // allow numbering if multiple args\n        final boolean numbered =\n            (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);\n\n        final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);\n\n        // if infinite args are allowed then crop the list\n        final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum;\n\n        int i = 0;\n\n        // for each argument\n        while (i < max) {\n            // if we're past the first add a space\n            if (i > 0) {\n                buffer.append(' ');\n            }\n\n            // if the next arg is optional\n            if ((i >= minimum) && (optional || (i > 0))) {\n                buffer.append('[');\n            }\n\n            if (bracketed) {\n                buffer.append('<');\n            }\n\n            // add name\n            buffer.append(name);\n            ++i;\n\n            // if numbering\n            if (numbered) {\n                buffer.append(i);\n            }\n\n            if (bracketed) {\n                buffer.append('>');\n            }\n        }\n\n        // if infinite args are allowed\n        if (maximum == Integer.MAX_VALUE) {\n            // append elipsis\n            buffer.append(\" ...\");\n        }\n\n        // for each argument\n        while (i > 0) {\n            --i;\n\n            // if the next arg is optional\n            if ((i >= minimum) && (optional || (i > 0))) {\n                buffer.append(']');\n            }\n        }\n    }", "class": "ArgumentImpl", "signature": "void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp)", "full_signature": "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp)", "class_method_signature": "ArgumentImpl.appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp)", "testcase": false, "constructor": false, "invocations": ["contains", "contains", "contains", "append", "append", "append", "append", "append", "append", "append", "append"]}