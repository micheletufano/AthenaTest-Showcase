{"identifier": "processValues", "parameters": "(final WriteableCommandLine commandLine,\n                              final ListIterator arguments,\n                              final Option option)", "modifiers": "public", "return": "void", "body": "public void processValues(final WriteableCommandLine commandLine,\n                              final ListIterator arguments,\n                              final Option option)\n        throws OptionException {\n        // count of arguments processed for this option.\n        int argumentCount = commandLine.getUndefaultedValues(option).size();\n\n        while (arguments.hasNext() && (argumentCount < maximum)) {\n            final String allValuesQuoted = (String) arguments.next();\n            final String allValues = stripBoundaryQuotes(allValuesQuoted);\n\n            // should we ignore things that look like options?\n            if (allValuesQuoted.equals(consumeRemaining)) {\n                while (arguments.hasNext() && (argumentCount < maximum)) {\n                    ++argumentCount;\n                    commandLine.addValue(option, arguments.next());\n                }\n            }\n            // does it look like an option?\n            else if (commandLine.looksLikeOption(allValuesQuoted)) {\n                arguments.previous();\n\n                break;\n            }\n            // should we split the string up?\n            else if (subsequentSplit) {\n                final StringTokenizer values =\n                    new StringTokenizer(allValues, String.valueOf(subsequentSeparator));\n\n                arguments.remove();\n\n                while (values.hasMoreTokens() && (argumentCount < maximum)) {\n                    ++argumentCount;\n\n                    final String token = values.nextToken();\n                    commandLine.addValue(option, token);\n                    arguments.add(token);\n                }\n\n                if (values.hasMoreTokens()) {\n                    throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,\n                                              values.nextToken());\n                }\n            }\n            // it must be a value as it is\n            else {\n                ++argumentCount;\n                commandLine.addValue(option, allValues);\n            }\n        }\n    }", "class": "ArgumentImpl", "signature": "void processValues(final WriteableCommandLine commandLine,\n                              final ListIterator arguments,\n                              final Option option)", "full_signature": "public void processValues(final WriteableCommandLine commandLine,\n                              final ListIterator arguments,\n                              final Option option)", "class_method_signature": "ArgumentImpl.processValues(final WriteableCommandLine commandLine,\n                              final ListIterator arguments,\n                              final Option option)", "testcase": false, "constructor": false, "invocations": ["size", "getUndefaultedValues", "hasNext", "next", "stripBoundaryQuotes", "equals", "hasNext", "addValue", "next", "looksLikeOption", "previous", "valueOf", "remove", "hasMoreTokens", "nextToken", "addValue", "add", "hasMoreTokens", "nextToken", "addValue"]}