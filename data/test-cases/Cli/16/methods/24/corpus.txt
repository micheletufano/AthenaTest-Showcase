GroupImpl extends OptionImpl implements Group { public void process(final WriteableCommandLine commandLine, final ListIterator arguments) throws OptionException { String previous = null; while (arguments.hasNext()) { final String arg = (String) arguments.next(); if (arg == previous) { arguments.previous(); break; } previous = arg; final Option opt = (Option) optionMap.get(arg); if (opt != null) { arguments.previous(); opt.process(commandLine, arguments); } else { if (commandLine.looksLikeOption(arg)) { final Collection values = optionMap.tailMap(arg).values(); boolean foundMemberOption = false; for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) { final Option option = (Option) i.next(); if (option.canProcess(commandLine, arg)) { foundMemberOption = true; arguments.previous(); option.process(commandLine, arguments); } } if (!foundMemberOption) { arguments.previous(); return; } } else { arguments.previous(); if (anonymous.isEmpty()) { break; } for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Argument argument = (Argument) i.next(); if (argument.canProcess(commandLine, arguments)) { argument.process(commandLine, arguments); } } } } } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }