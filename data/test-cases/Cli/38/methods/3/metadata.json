{"identifier": "parse", "parameters": "(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)", "modifiers": "public", "return": "CommandLine", "body": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException\n    {\n        this.options = options;\n        this.stopAtNonOption = stopAtNonOption;\n        skipParsing = false;\n        currentOption = null;\n        expectedOpts = new ArrayList(options.getRequiredOptions());\n\n        // clear the data from the groups\n        for (OptionGroup group : options.getOptionGroups())\n        {\n            group.setSelected(null);\n        }\n\n        cmd = new CommandLine();\n\n        if (arguments != null)\n        {\n            for (String argument : arguments)\n            {\n                handleToken(argument);\n            }\n        }\n\n        // check the arguments of the last option\n        checkRequiredArgs();\n\n        // add the default options\n        handleProperties(properties);\n\n        checkRequiredOptions();\n\n        return cmd;\n    }", "class": "DefaultParser", "signature": "CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)", "full_signature": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)", "class_method_signature": "DefaultParser.parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)", "testcase": false, "constructor": false, "invocations": ["getRequiredOptions", "getOptionGroups", "setSelected", "handleToken", "checkRequiredArgs", "handleProperties", "checkRequiredOptions"]}