GroupImpl extends OptionImpl implements Group { public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final List helpLines = new ArrayList(); if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME)) { final HelpLine helpLine = new HelpLineImpl(this, depth); helpLines.add(helpLine); } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT)) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { final Option option = (Option) i.next(); helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp)); } } return helpLines; } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }