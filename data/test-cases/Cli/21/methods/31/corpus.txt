GroupImpl extends OptionImpl implements Group { public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator) { final Set helpSettingsCopy = new HashSet(helpSettings); final boolean optional = !isRequired() && (helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL_CHILD_GROUP)); final boolean expanded = (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED); final boolean named = !expanded || ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME)); final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT); final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER); helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER); final boolean both = named && expanded; if (optional) { buffer.append('['); } if (named) { buffer.append(name); } if (both) { buffer.append(" ("); } if (expanded) { final Set childSettings; if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) { childSettings = DisplaySetting.NONE; } else { childSettings = new HashSet(helpSettingsCopy); childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL); } final List list; if (comp == null) { list = options; } else { list = new ArrayList(options); Collections.sort(list, comp); } for (final Iterator i = list.iterator(); i.hasNext();) { final Option option = (Option) i.next(); option.appendUsage(buffer, childSettings, comp); if (i.hasNext()) { buffer.append(separator); } } } if (both) { buffer.append(')'); } if (optional && outer) { buffer.append(']'); } if (arguments) { for (final Iterator i = anonymous.iterator(); i.hasNext();) { buffer.append(' '); final Option option = (Option) i.next(); option.appendUsage(buffer, helpSettingsCopy, comp); } } if (optional && !outer) { buffer.append(']'); } } GroupImpl(final List options, final String name, final String description, final int minimum, final int maximum, final boolean required); boolean canProcess(final WriteableCommandLine commandLine, final String arg); Set getPrefixes(); Set getTriggers(); void process(final WriteableCommandLine commandLine, final ListIterator arguments); void validate(final WriteableCommandLine commandLine); String getPreferredName(); String getDescription(); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp); void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp, final String separator); List helpLines(final int depth, final Set helpSettings, final Comparator comp); List getOptions(); List getAnonymous(); Option findOption(final String trigger); int getMinimum(); int getMaximum(); boolean isRequired(); void defaults(final WriteableCommandLine commandLine); }